{"version":3,"sources":["assets/VideoSimple/js/lib/AAC.js","assets/Scripts/Core/Config/ConfigReader.js","assets/Scripts/Core/Config/Csv/CsvTableData.js","assets/Scripts/Core/Config/Csv/CsvTableLine.js","assets/Scripts/GameStart.js","assets/Scripts/ProjectEnum.js","assets/Scripts/Singleton/SingletonBase.js","assets/Scripts/Core/Tools/TouchManager.js","assets/VideoSimple/js/video/VideoShader.js","assets/Scripts/UI/tools/commonBtn.js","assets/VideoSimple/js/A/eBET.js","assets/VideoSimple/js/video/h264Sprite.js","assets/Scripts/Core/ResHandle/lottery_BaseResLoad.js","assets/Scripts/Core/Net/lottery_BaseSocket.js","assets/Scripts/Core/ResHandle/lottery_BaseUrlLoad.js","assets/Scripts/Core/lottery_CoreMgr.js","assets/Scripts/Data/lottery_EventDefine.js","assets/Scripts/Core/Event/lottery_GlobalMsg.js","assets/Scripts/Core/Net/lottery_HttpUtils.js","assets/Scripts/UI/tools/lottery_Keyboard.js","assets/Scripts/LanguageTool/lottery_LanguageLabel.js","assets/Scripts/Manager/lottery_LanguageManager.js","assets/Scripts/LanguageTool/lottery_LanguageRichTextKey.js","assets/Scripts/LanguageTool/lottery_LanguageRichText.js","assets/Scripts/LanguageTool/lottery_LanguageTool.js","assets/Scripts/UI/view_login/lottery_Login.js","assets/Scripts/Data/lottery_MsgStation.js","assets/Scripts/Manager/lottery_NetManager.js","assets/Scripts/Manager/lottery_RunInBackground.js","assets/Scripts/Tools/lottery_ScrollViewNormalExtend.js","assets/Scripts/Manager/lottery_SockMsgDefine.js","assets/Scripts/Core/Net/lottery_SocketEnum.js","assets/Scripts/Manager/lottery_SocketManager.js","assets/Scripts/Core/Timer/lottery_TimeMgr.js","assets/Scripts/UI/view_login/lottery_TypeSelect.js","assets/Scripts/Core/Tools/lottery_Utils.js","assets/Scripts/UI/view_videoPlay/lottery_VideoPlayCtr.js","assets/Scripts/UI/view_videoPlay/lottery_VideoPlayView.js","assets/Scripts/UI/view_videoSys/lottery_VideoSysCtr.js","assets/Scripts/UI/view_videoSys/lottery_VideoSysView.js","assets/Scripts/UI/animCom/lottery_animCom.js","assets/Scripts/Data/lottery_animDataMgr.js","assets/Scripts/UI/tools/lottery_helper.js","assets/Scripts/UI/tools/lottery_loadingTip.js","assets/Scripts/UI/view_login/lottery_loginViewCom.js","assets/Scripts/UI/view_login/lottery_loginViewCtr.js","assets/Scripts/Data/lottery_lotteryData.js","assets/Scripts/UI/tools/lottery_tipsLayer.js","assets/Scripts/UI/videoCom/lottery_videoCom.js","assets/Scripts/UI/view_videoSys/lottery_videoFlow.js","assets/Scripts/UI/view_videoSys/lottery_videoPlayer.js","assets/Scripts/UI/lottery_viewBaseComponent.js","assets/Scripts/Manager/lottery_viewComponentManager.js","assets/Scripts/UI/lottery_viewCtrBase.js","assets/Scripts/Manager/lottery_viewCtrManager.js","assets/Scripts/Tools/screenfull/screenfull.min.js","assets/Scripts/Tools/screenfull/screenfull.d.ts","assets/Scripts/UI/view_videoSys/videoMsgFactory.js","assets/Scripts/UI/videoCom/videoShader1.js","assets/VideoSimple/js/lib/videoSocketController.js","assets/VideoSimple/js/videoSprite.js"],"names":["module","exports","gwin","global","AV","__hasProp","hasOwnProperty","__extends","child","parent","key","call","ctor","this","constructor","prototype","__super__","__slice","slice","__bind","fn","me","apply","arguments","__indexOf","indexOf","item","i","l","length","Base","fnTest","extend","prop","Class","keys","_ref","_super","Object","test","ret","tmp","Bitstream","stream","bitPosition","copy","result","offset","available","bits","advance","pos","rewind","Math","abs","seek","curOffset","align","read","signed","a","a0","a1","a2","a3","a4","mBits","peekUInt8","peekUInt16","peekUInt24","peekUInt32","Error","pow","floor","peek","readLSB","peekLSB","AVBuffer","Buffer","BlobBuilder","URL","input","Uint8Array","data","ArrayBuffer","Array","isArray","isBuffer","buffer","byteOffset","BYTES_PER_ELEMENT","next","prev","allocate","size","position","subarray","MozBlobBuilder","WebKitBlobBuilder","webkitURL","mozURL","makeBlob","type","bb","Blob","_error","append","getBlob","makeBlobURL","createObjectURL","revokeBlobURL","url","revokeObjectURL","toBlob","toBlobURL","UnderflowError","name","stack","BufferList","first","last","numBuffers","availableBytes","availableBuffers","reset","_results","EventEmitter","on","event","_base","events","push","off","index","splice","once","_cb","emit","args","_i","_len","_ref1","Stream","buf","decodeString","float32","float64","float64Fallback","float80","int16","int32","int8","nativeEndian","uint16","uint32","uint8","list","localOffset","Int8Array","Uint16Array","Int16Array","Uint32Array","Int32Array","Float32Array","Float64Array","fromBuffer","bytes","remainingBytes","readUInt8","littleEndian","_j","readInt8","peekInt8","readUInt16","readInt16","peekInt16","readUInt24","readInt24","peekInt24","readUInt32","readInt32","peekInt32","readFloat32","peekFloat32","readFloat64","exp","frac","high","low","out","sign","NaN","Infinity","peekFloat64","readFloat80","peekFloat80","readBuffer","to","peekBuffer","readSingleBuffer","peekSingleBuffer","readString","encoding","peekString","b1","b2","b3","b4","bom","c","end","nullEnd","pt","w1","w2","toLowerCase","String","fromCharCode","Decoder","codecs","demuxer","format","_this","bitstream","receivedFinalBuffer","waiting","cookie","error","setCookie","chunk","decode","init","readChunk","packet","timestamp","seekPoint","register","id","decoder","find","Demuxer","formats","source","received","e","err","seekPoints","probe","addSeekPoint","searchTimestamp","backward","mid","time","framesPerPacket","bytesPerPacket","AudioDevice","devices","sampleRate","channels","updateTime","playing","currentTime","_lastTime","start","device","create","getDeviceTime","_timer","setInterval","refill","stop","clearInterval","destroy","supported","Asset","MozillaAudioDevice","createTimer","destroyTimer","audio","Audio","mozSetup","writePosition","prebufferSize","tail","timer","cc","sys","isNative","currentPosition","written","mozWriteAudio","mozCurrentSampleOffset","interval","worker","Worker","onmessage","terminate","_decode","findDecoder","buffered","duration","metadata","active","BufferSource","fromBufferSource","serverUrl","shouldDecode","pause","get","callback","value","decodePacket","decodeToBuffer","chunks","dataHandler","set","div","formatID","floatingPoint","bitsPerChannel","sample","_ref2","Resampler","fromSampleRate","toSampleRate","inputBufferLength","initialize","resampler","bypassResampler","ratioWeight","compileLinearInterpolationFunction","lastWeight","compileMultiTapFunction","tailExists","outputBufferSize","ceil","outputBuffer","lastOutput","toCompile","channel","Function","inputBuffer","Filter","WebAudioDevice","createProcessor","sharedContext","AudioContext","webkitAudioContext","context","deviceSampleRate","bufferSize","node","onaudioprocess","connect","destination","state","close","channelCount","n","_k","numberOfChannels","getChannelData","disconnect","defineProperty","process","BalanceFilter","pan","max","min","VolumeFilter","vol","Player","asset","startPlaying","volume","queue","Queue","preload","startedPreloading","play","togglePlayback","frame","frameOffset","channelsPerFrame","bufferOffset","filters","write","readyMark","finished","buffering","ended","buffers","clearImmediate","setImmediate","loop","add","paused","ADTSDemuxer","readHeader","protectionAbsent","profile","samplingIndex","frameLength","sentHeader","header","SAMPLE_RATES","chanConfig","CCEElement","config","ics","ICStream","channelPair","chSelect","gain","BEFORE_TNS","AFTER_IMDCT","CCE_SCALE","idSelect","couplingPoint","coupledCount","gainCount","groupCount","info","bandTypes","idx","cge","gainCache","Huffman","decodeScaleFactor","gain_i","g","sfb","maxSFB","ZERO_BT","t","s","scale","iqData","applyDependentCoupling","swbOffsets","gains","len","groupLength","group","k","swb","CPEElement","ms_used","right","left","mask","maskPresent","val","commonWindow","sampleIndex","sectionDataResilience","scalefactorResilience","spectralDataResilience","filter_bank","FilterBank","elements","elementType","cpe","cce","cces","count","j","output","processSingle","processPair","element","applyChannelCoupling","tnsPresent","tns","AFTER_TNS","gainPresent","sbrPresent","l_info","r_info","l_data","processMS","r_data","processIS","offsets","windowGroups","sectEnd","scaleFactors","groupOff","INTENSITY_BT","INTENSITY_BT2","w","sfbCBl","sfbCBr","data1","data2","isChannelPair","applyCoupling","FFT","roots","generateFFTTableShort","generateFFTTableLong","rev","b","d","e1","e2","cosT","cos","sinT","sin","f","lastImag","forward","imOffset","ii","tmpInputI","shift","m","km","tmpI","tmpJK","rootRe","rootIm","zRe","zIm","smallFrames","shortLength","trans","mdctShort","MDCT","overlaps","generateSineWindow","PI","generateKBDWindow","alpha","PIN","sum","alpha2","bessel","sqrt","SINE_128","KBD_1024","KBD_128","SHORT_WINDOWS","windowShape","longWindows","LONG_WINDOWS","shortWindows","longWindowsPrev","windowShapePrev","shortWindowsPrev","shortLen","windowSequence","ONLY_LONG_SEQUENCE","mdctLong","overlap","UNSIGNED","HCB_SF","cw","table","signValues","getEscape","decodeSpectralData","cb","findOffset","HCB","ICSInfo","MAX_SECTIONS","randomState","TNS","specBuf","ESC_BT","NOISE_BT","LONG_START_SEQUENCE","LONG_STOP_SEQUENCE","MAX_WINDOW_GROUP_COUNT","ltpData1Present","globalGain","decodeScaleFactors","pulsePresent","EIGHT_SHORT_SEQUENCE","decodePulseData","decodeBandTypes","escape","incr","bandType","noiseFlag","runEnd","SCALEFACTOR_TABLE","pulseCount","pulseSWB","pulseOffset","pulseAmp","groupLen","hcb","width","energy","num","FIRST_PAIR_BT","IQ_TABLE","windowCount","swbCount","SWB_SHORT_WINDOW_COUNT","predictorPresent","SWB_OFFSET_1024","SWB_LONG_WINDOW_COUNT","decodePrediction","N2","N4","sincos","MDCT_TABLE_2048","MDCT_TABLE_1920","fft","inOffset","outOffset","N8","MDCT_TABLE_256","SWB_OFFSET_1024_96","SWB_OFFSET_1024_64","SWB_OFFSET_1024_48","SWB_OFFSET_128_48","SWB_OFFSET_1024_32","SWB_OFFSET_1024_24","SWB_OFFSET_128_24","SWB_OFFSET_1024_16","SWB_OFFSET_128_16","SWB_OFFSET_1024_8","SWB_OFFSET_128_8","nFilt","direction","order","coef","filt","lpc","SHORT_BITS","LONG_BITS","TNS_TABLES","TNS_MAX_BANDS_1024","nFilt_w","length_w","order_w","direction_w","coef_w","coefCompress","coefRes","order_w_filt","coef_w_filt","mmm","maxBands","bottom","top","autoc","r","_onTimeout","immediateIds","process/browser.js","ConfigReader","require","_RF","_createClass","defineProperties","target","props","descriptor","enumerable","configurable","writable","Constructor","protoProps","staticProps","_CsvTableData2","_interopRequireDefault","_SingletonBase3","default","func","ReadCsv","res","col","pop","undefined","texArray","mtitle","split","CsvTableData","tabledata","initData","_temp","CsvTableLine","_class","obj","_lottery_Utils2","_lottery_Utils","__esModule","instance","TypeError","title","tex","getInstance","getInt","strsub","getFloat","str","replace","floatArray","Create","line","includes","lottery_Utils","GameStart","_lottery_MsgStation2","_lottery_animDataMgr2","_lottery_loginViewCtr2","window","ebet","baccarat","loader","loadRes","setLoadingProgress","bind","loadingProgress","progress","pre","game","setFrameRate","./Data/lottery_MsgStation","./Data/lottery_animDataMgr","./UI/view_login/lottery_loginViewCtr","AAC","videoSocketController","ProjectEnum","NeedHide","HideOther","_lottery_CoreMgr2","_lottery_CoreMgr","_classCallCheck","SingletonBase","allowNew","_singleInstance","_onNewObject","RegisterSingleton","_onDestroyObject","_doDestroyInstance","lottery_CoreMgr","../Core/lottery_CoreMgr","TouchManager","VideoShader","_currentBuffer","default_vert","gray_frag","MycreateTexture","gl","_renderContext","texture","createTexture","bindTexture","TEXTURE_2D","texParameteri","TEXTURE_MAG_FILTER","LINEAR","TEXTURE_MIN_FILTER","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","ShaderEffect","program","GLProgram","initWithString","initWithVertexShaderByteArray","addAttribute","macro","ATTRIBUTE_NAME_POSITION","VERTEX_ATTRIB_POSITION","ATTRIBUTE_NAME_COLOR","VERTEX_ATTRIB_COLOR","ATTRIBUTE_NAME_TEX_COORD","VERTEX_ATTRIB_TEX_COORDS","link","updateUniforms","_uniforms","getUniformLocation","_programObj","uint8Cb","lumaSize","chromaSize","activeTexture","TEXTURE0","_texture1","TEXTURE1","_texture2","TEXTURE2","_texture3","texImage2D","LUMINANCE","videoSize","height","UNSIGNED_BYTE","uint8Cr","uint8Y","glProgram_state","GLProgramState","getOrCreateWithGLProgram","setGLProgramState","setShaderProgram","commonBtn","_possibleConstructorReturn","self","ReferenceError","downCallback","isSelect","selectNode","is","radioBtn","_commonBtn","__proto__","getPrototypeOf","Node","EventType","TOUCH_START","touchStart","TOUCH_CANCEL","touchCancle","TOUCH_END","touchEnd","_inherits","select","groupBtn","_commonBtn2","_this2","arr","NetworkStatistics","byteRate","startTime","Date","totalBytes","currentBytes","_byteRate","proto","receiveBytes","getNetworkStatus","second","h264Sprite","H264Sprite","extends","Component","_currentUrl","_socketController","_hideListener","_showListener","_lbTipInfo","_count","_useWebWorker","_currenturl","EVENT_HIDE","gameHideClose","gameShowReOpen","reOpen","unscheduleAllCallbacks","selfSprite","getComponent","Sprite","shaderStatus","texureImag","initWithData","pixelFormat","pixelsWidth","pixelsHeight","contentSize","spriteFrame","SpriteFrame","winSize","_SingletonBase2","BaseResLoad","_SingletonBase","WaitList","DoneList","KeyList","keyDic","ProgressList","TypeList","CurDownloadKey","IsLoading","subClass","superClass","setPrototypeOf","downFunc","CheckUpdate","mtype","DownloadRes","loadResDir","../../Singleton/SingletonBase","lottery_BaseSocket","SocketEnum","simplewebsocket","_wb_client","_host","_attachParam","_cacheMsg","_is_opened","_onMessageCallback","_onConnectCallback","host","port","param","_port","WebSocket","onerror","onError","onclose","onClose","success","log","js","getClassName","message","readyState","send","BaseUrlLoad","keyList","urlList","callbackList","suffixList","curKey","curUrl","curCallback","load","curSuffix","loadCallback","loadHead","isLoading","singletonList","lottery_EventDefine","keyboradNum","loadingOvertime","lottery_GlobalMsg","GlobalMsg","m_Callbacks","msgkey","uuid","EXHRDataType","Enum","Undefined","Text","HttpUtils","_reqListTimes","dataType","xhr","XMLHttpRequest","getError","responseType","open","status","response","Binary","responseText","datatype","httpGets","encodeURIComponent","timers","onreadystatechange","setRequestHeader","serializePost","params","setTimeout","abort","timeout","succ","fail","options","toUpperCase","async","_lottery_EventDefine","property","_key","lotteryKeyboard","concat","_descriptor","keyBoardArr","itemArr","one","content","children","systemEvent","loginView","_class2","_dec","initializer","forEach","desc","decorators","reverse","reduce","decorator","languageID","languageManager","GetLanguageText","lottery_LanguageManager","lottery_LanguageTool","none","cn","en","languageJSName","languageDic","changeEvent","LanguageEnum","languageEnum","languageNam","curLanguageID","eventCus","Event","EventCustom","lang","tag","../Core/ResHandle/lottery_BaseResLoad","lottery_LanguageRichTextKey","_lottery_BaseResLoad","_lottery_BaseResLoad2","tooltip","textCache","Label","RichText","SetLanguageID","UpdateText","helper","lottery","Helper","string","LoadByKey","Res","ConfigPath","text","lottery_BaseResLoad","lottery_LanguageRichText","properties","constStrArr","keyArr","onLoad","resultStr","setLanguageId","changeLanguage","curLanguageEnum","changeLanguageEnum","SetArgs","_lottery_LanguageManager2","_lottery_LanguageManager","UnRegister","_initDefineProp","_applyDecoratedDescriptor","_cc$_decorator","_decorator","ccclass","lotteryLogin","_dec2","_cc$Component","btnGruop","_descriptor2","loginCotentBtn","setContent","user","editbox","_lottery_helper2","showTips","password","onSendEnterLogin","getUserData","btn","substr","delBtnNode","_lottery_GlobalMsg2","_lottery_VideoPlayCtr2","lottery_MsgStation","httpServer","socketIP","socketPort","loging","socket","_lottery_SocketManager2","On","_lottery_SockMsgDefine2","DOWN","SC_OK","socketConnect","SC_VideoMsg","videoMsg","Register","_lottery_NetManager2","HttpPost","userName","account","msg","showLoading","lotteryCode","screenfull","request","document","getElementById","Open","_lottery_VideoSysCtr2","Close","console","_lottery_RunInBackground2","_lottery_TimeMgr2","token","NetManager","curServerTimeStamp","changeServerTimerID","openHttpPost","httpPostList","endfunc","hideTipsFunc","_lottery_HttpUtils2","httpPost","errorMessage","thisTime","FreshServerTimeStamp","logintoken","serverTimeChangeEvent","thistime","delay","closeTimer","http","RegestRunInBackground","RunInBackground","showErrorTips","showTipsFunc","ajaxGet","suffix","runCallback","CallRunCallback","focus","_instance","_goToBackground","EVENT_SHOW","_goToFront","lottery_ScrollViewNormalExtend","deltaPos","checkTimes","ScrollView","editor","CC_EDITOR","itemNode","itemprefab","Prefab","viewMask","spacing","mDirect","visible","mValue","mAnchor","dataCount","maxItemCount","curItemCount","curShowItemIndex","showTopPos","showDownPos","hideTopPos","hideDownPos","itemActiveList","itemDeactivePool","NodePool","lastContentPos","checkdelta","itemway","itemSynPos","Vec2","cloneItem","instantiate","addChild","vertical","horizontal","CalculateRangePos","update","dt","isScrolling","isAutoScrolling","UpdateItemPos","GetItem","PopItem","setPosition","PushItem","UnshiftItem","unshift","freshItemCallback","ShiftItem","CheckTopPop","CheckTopPush","CheckDownPop","CheckDownPush","InitItemData","AddItemData","AddItemDataNum","stopAutoScroll","UpdateItem","_index","UnRegestUpdateItem","ClearData","SpacingChanged","space","setItemNode","removeAllChildren","_item","lottery_SockMsgDefine","CS_KaiPan","CS_LotteryLssueCanOpenProcess","MsgEventKey","lottery_SocketManager","socktIP","SocketManager","heartTime","heartTimerID","reConnectTimerID","isreconnect","curSocketState","socketEventDic","loadingShowFunc","loadingHideFunc","reConnectSocketNum","BaseSocketIns","msgId","codeBack","UP","Heart","code","LongConnect","Disconnect","ReConnect","HeartClose","openTimer","Send","JSON","stringify","Connect","socketParam","ip","show","hide","_lottery_BaseSocket2","RegestMessageEvent","OnMessage","RegisterConnectEvent","OnConnect","lottery_SocketEnum","lottery_TimeMgr","TimerManager","timerList","timerID","isOpenTimer","timerIndex","timerobj","isPause","intervalTime","repeat","isEndless","activeTimerIDDic","getTimerID","spriteName","CP1002","CP1004","lotterySelect","_dec3","_dec4","_descriptor3","_descriptor4","btnGroup","submitBtn","submitBtnDown","listData","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","updateData","_one","itemPrefab","selectBtn","lotteryData","dataIndex","onSendLotteryChoice","nameLable0","setSprite","icon","Utils","eventHandler","EventHandler","component","handler","Button","clickEvents","Number","parseFloat","fixNum","flag","toFixed","defaultdata","isEmpty","stamp","tostring","year","month","day","date","getDate","hour","getHours","getMinutes","getSeconds","digit","newstr","path","folders","dir","jsb","fileUtils","createDirectory","colorstr","Color","WHITE","fixed","sprite","spritename","atlasname","SpriteAtlas","atlasDic","getSpriteFrame","../ResHandle/lottery_BaseResLoad","lottery_VideoPlayCtr","_ViewCtrBase","_lottery_viewCtrBase2","moduleName","../lottery_viewCtrBase","lottery_VideoPlayView","_lottery_videoCom2","exitBtn","videoPlayBtn","videoCanvas","videoIndex","continue","onSendLogoutContent","onFullPlay","../../Data/lottery_MsgStation","../videoCom/lottery_videoCom","lottery_viewBaseComponent","lottery_VideoSysCtr","lottery_VideoSysView","_lottery_videoFlow2","tips","bg","backBtn","videoFlow","OnInit","onSendLinkHeGuan","onEnable","backBtnDown","SystemEvent","KEY_DOWN","escEvent","onDisable","OnHide","OnDispose","_onMessageHandel","lottery_animCom","Integer","Boolean","_dec5","_descriptor5","frameSpriteArr","nowTime","frameTime","playFinishCallBack","loadFail","resDir","folderName","targetSprite","isPlaying","../../Data/lottery_animDataMgr","lottery_animDataMgr","objects","releaseResDir","resUrl","tipsLayer","addPrefabToNode","_this3","loadingLayer","startPlay","completeCallBack","lottery_loadingTip","timeId","playLongTime","clearTimeout","callFunc","actionNode","rotation","lotteryTypeJs","OnShow","lottery_loginViewCtr","lottery_videoCom","isPlay","currentUrl","_videoShader2","_renderType","RENDER_TYPE_CANVAS","VideoSocketController","orgHeight","orgWidth","scheduleOnce","onPictureDecoded","Myrendering","lottery_videoFlow","VideoPlayer","_lottery_animCom2","_dec6","_dec7","_dec8","msgFuncDefine","stanardFlow","_descriptor6","_descriptor7","_descriptor8","msgList","totalTime","nowMsgPos","isPlayCountDown","_iterator","return","_didIteratorError2","_iteratorError2","_step2","_iterator2","Symbol","iterator","_iteratorNormalCompletion2","done","videoStream","opacity","lotteryId","_lottery_lotteryData2","videoArr","qiShuArr","runAction","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","balls","littleCom","setData","setFinshCallBack","startLottery","moveTo","v2","awardResult","animFinshCallBack","y","spawn","scaleTo","_step4","_iterator4","_iteratorNormalCompletion4","_iteratorError4","_didIteratorError4","scaleX","scaleY","sequence","delayTime","fadeIn","fadeOut","_iteratorNormalCompletion5","_iteratorError5","_step5","_iterator5","_didIteratorError5","countDownArr","setCountDown","timer1","_timers","_this4","isBig","nodeItem","_iteratorNormalCompletion6","_iteratorError6","_step6","_iterator6","_didIteratorError6","_iteratorNormalCompletion7","minute","../../Core/Tools/lottery_Utils","../../Data/lottery_lotteryData","../animCom/lottery_animCom","./videoMsgFactory","lottery_videoPlayer","RawAsset","_lottery_viewComponentManager2","curStatus","ViewStatus","Unregister","curZIndex","ViewOpenEventKey","ViewCloseEventKey","ViewComponentManager","panelDic","canvas","curOpenPanelName","ChangeScene","panelname","panel","view","Init","Hide","zIndex","removeFromParent","openPanel","OpenByPrefab","DeletePanel","../Core/Event/lottery_GlobalMsg","../Singleton/SingletonBase","lottery_viewCtrBase","_lottery_viewCtrManager2","moduleEnum","ViewCtrBase","ModuleStatus","curModuleStatus","Destroy","AddEvent","AddViewCtr","OpenViewCtr","script","_data","ViewCtrManager","OpenModuleDic","openModuleStack","RegisterClosePanelEvent","OnViewCloseMessageHandle","ctr","openStatus","None","_ctr","./lottery_viewComponentManager","screenfull.d","screenfull.min","change","fullscreenchange","fullscreenerror","Promise","isFullscreen","resolve","u","exitFullscreen","catch","toggle","exit","onchange","addEventListener","removeEventListener","raw","fullscreenElement","isEnabled","fullscreenEnabled","videosMsgFatory","videosMsg","videoShader1","shaderPos","shaderIndex","orgProgram","sgNode","shaderProgram","useWorker","webgl","_currentFPS","VIDEO_FPS","audioPlayer","timerId","decodeFromQueueTimer","_useWorker","USE_WORKER","_useGL","_RENDER_TYPE_WEBGL","reuseMemory","transferMemory","_lastBuffer","_lastTimestamp","_decoder","rgb","_statistics","_client","onopen","onOpenCallback","onErrorCallback","onOpen","_decodeVideo","_videoCache","_packageCache","_setupWorker","binaryType","onMessageCallback","onCloseCallback","currentTarget","WSHeader","messageData","ts","intFromBytes","newBuffer","comparePackages","recycleMemory","NALU","nalu","ForbiddenZero","RefIdc","UnitType","base","parseInt","idc","x","onRenderingBefore","cache","ms","getTime","_lastTickMs","diffTime","selPkg","getDecodeH264Buffer","audioPkg","getDecodeAACBuffer","infos","consoleLog","postMessage","videoData","parInfo","copyU8","parArray","H264Cache","pushH264","setUrl","getUrl","clear","getState","H264Package","byteLength","keyframe","_audioCache","receivedKeyframe","_deltaTime","h264CacheProto","lastPlayedTimestamp","sortCaches","sort","videoCache","_searchVideoKeyframe","range","selIdx","packages","audioCache","skipAACBuffer"],"mappings":"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CAAA,iBAAA,kBAAA,CAAA,gBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,iBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,gBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,gBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,gBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,gBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,gBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,iBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,iBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,gBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,iBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,mBAGDL,EAAA,CAAA,CAAA,iBAAA,iBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,gBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,gBAAA,CAAA,iBAAA,kBAAA,CAAA,gBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,gBAAA,iBAAA,CAAA,iBAAA,kBAAA,CAAA,gBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,aAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,gBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,gBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,iBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,eAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,iBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,gBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,gBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,gBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,iBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,gBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,iBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,gBAAA,gBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,gBAAA,kBAAA,CAAA,iBAAA,iBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,gBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,gBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,gBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,gBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,gBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,gBAAA,CAAA,iBAAA,iBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,gBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,gBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,iBAAA,CAAA,iBAAA,kBAAA,CAAA,gBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,gBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,gBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,gBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,iBAAA,CAAA,iBAAA,kBAAA,CAAA,gBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,gBAAA,iBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,gBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,iBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,iBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,iBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,iBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,gBAAA,iBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,gBAAA,kBAAA,CAAA,gBAAA,kBAAA,CAAA,iBAAA,iBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,iBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,iBAAA,CAAA,iBAAA,iBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,iBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,gBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,iBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,eAAA,kBAAA,CAAA,iBAAA,gBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,gBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,iBAAA,CAAA,gBAAA,kBAAA,CAAA,gBAAA,gBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,gBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,eAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,iBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,gBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,iBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,iBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,gBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,gBAAA,CAAA,iBAAA,iBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,iBAAA,CAAA,iBAAA,kBAAA,CAAA,gBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,iBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,gBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,eAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,gBAAA,iBAAA,CAAA,gBAAA,kBAAA,CAAA,gBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,iBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,gBAAA,kBAAA,CAAA,iBAAA,iBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,gBAAA,kBAAA,CAAA,iBAAA,iBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,gBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,gBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,iBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,gBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,eAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,gBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,gBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,iBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBAAA,CAAA,iBAAA,kBA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","sourcesContent":["module.exports = aac;\r\nfunction aac(gwin){\r\n    (function (global) {\r\n        var AV = global.AV = {};\r\n        var __hasProp = {}.hasOwnProperty,\r\n            __extends = function (child, parent) {\r\n                for (var key in parent) {\r\n                    if (__hasProp.call(parent, key)) child[key] = parent[key];\r\n                }\r\n    \r\n                function ctor() {\r\n                    this.constructor = child;\r\n                }\r\n    \r\n                ctor.prototype = parent.prototype;\r\n                child.prototype = new ctor();\r\n                child.__super__ = parent.prototype;\r\n                return child;\r\n            },\r\n            __slice = [].slice,\r\n            __bind = function (fn, me) {\r\n                return function () {\r\n                    return fn.apply(me, arguments);\r\n                };\r\n            }, __indexOf = [].indexOf || function (item) {\r\n                for (var i = 0, l = this.length; i < l; i++) {\r\n                    if (i in this && this[i] === item) return i;\r\n                }\r\n                return -1;\r\n            };\r\n    \r\n        var Base = AV.Base = (function () {\r\n            var fnTest;\r\n    \r\n            function Base() {\r\n            }\r\n    \r\n            fnTest = /\\b_super\\b/;\r\n            Base.extend = function (prop) {\r\n                var Class, fn, key, keys, _ref, _super;\r\n                Class = (function (_super) {\r\n                    __extends(Class, _super);\r\n    \r\n                    function Class() {\r\n                        return Class.__super__.constructor.apply(this, arguments);\r\n                    }\r\n    \r\n                    return Class;\r\n                })(this);\r\n                if (typeof prop === 'function') {\r\n                    keys = Object.keys(Class.prototype);\r\n                    prop.call(Class, Class);\r\n                    prop = {};\r\n                    _ref = Class.prototype;\r\n                    for (key in _ref) {\r\n                        fn = _ref[key];\r\n                        if (__indexOf.call(keys, key) < 0) {\r\n                            prop[key] = fn;\r\n                        }\r\n                    }\r\n                }\r\n                _super = Class.__super__;\r\n                for (key in prop) {\r\n                    fn = prop[key];\r\n                    if (typeof fn === 'function' && fnTest.test(fn)) {\r\n                        (function (key, fn) {\r\n                            return Class.prototype[key] = function () {\r\n                                var ret, tmp;\r\n                                tmp = this._super;\r\n                                this._super = _super[key];\r\n                                ret = fn.apply(this, arguments);\r\n                                this._super = tmp;\r\n                                return ret;\r\n                            };\r\n                        })(key, fn);\r\n                    } else {\r\n                        Class.prototype[key] = fn;\r\n                    }\r\n                }\r\n                return Class;\r\n            };\r\n            return Base;\r\n        })();\r\n    \r\n        var Bitstream = AV.Bitstream = (function () {\r\n            function Bitstream(stream) {\r\n                this.stream = stream;\r\n                this.bitPosition = 0;\r\n            }\r\n    \r\n            Bitstream.prototype.copy = function () {\r\n                var result;\r\n                result = new Bitstream(this.stream.copy());\r\n                result.bitPosition = this.bitPosition;\r\n                return result;\r\n            };\r\n    \r\n            Bitstream.prototype.offset = function () {\r\n                return 8 * this.stream.offset + this.bitPosition;\r\n            };\r\n    \r\n            Bitstream.prototype.available = function (bits) {\r\n                return this.stream.available((bits + 8 - this.bitPosition) / 8);\r\n            };\r\n    \r\n            Bitstream.prototype.advance = function (bits) {\r\n                var pos;\r\n                pos = this.bitPosition + bits;\r\n                this.stream.advance(pos >> 3);\r\n                return this.bitPosition = pos & 7;\r\n            };\r\n    \r\n            Bitstream.prototype.rewind = function (bits) {\r\n                var pos;\r\n                pos = this.bitPosition - bits;\r\n                this.stream.rewind(Math.abs(pos >> 3));\r\n                return this.bitPosition = pos & 7;\r\n            };\r\n    \r\n            Bitstream.prototype.seek = function (offset) {\r\n                var curOffset;\r\n                curOffset = this.offset();\r\n                if (offset > curOffset) {\r\n                    return this.advance(offset - curOffset);\r\n                } else if (offset < curOffset) {\r\n                    return this.rewind(curOffset - offset);\r\n                }\r\n            };\r\n    \r\n            Bitstream.prototype.align = function () {\r\n                if (this.bitPosition !== 0) {\r\n                    this.bitPosition = 0;\r\n                    return this.stream.advance(1);\r\n                }\r\n            };\r\n    \r\n            Bitstream.prototype.read = function (bits, signed) {\r\n                var a, a0, a1, a2, a3, a4, mBits;\r\n                if (bits === 0) {\r\n                    return 0;\r\n                }\r\n                mBits = bits + this.bitPosition;\r\n                if (mBits <= 8) {\r\n                    a = ((this.stream.peekUInt8() << this.bitPosition) & 0xff) >>> (8 - bits);\r\n                } else if (mBits <= 16) {\r\n                    a = ((this.stream.peekUInt16() << this.bitPosition) & 0xffff) >>> (16 - bits);\r\n                } else if (mBits <= 24) {\r\n                    a = ((this.stream.peekUInt24() << this.bitPosition) & 0xffffff) >>> (24 - bits);\r\n                } else if (mBits <= 32) {\r\n                    a = (this.stream.peekUInt32() << this.bitPosition) >>> (32 - bits);\r\n                } else if (mBits <= 40) {\r\n                    a0 = this.stream.peekUInt8(0) * 0x0100000000;\r\n                    a1 = this.stream.peekUInt8(1) << 24 >>> 0;\r\n                    a2 = this.stream.peekUInt8(2) << 16;\r\n                    a3 = this.stream.peekUInt8(3) << 8;\r\n                    a4 = this.stream.peekUInt8(4);\r\n                    a = a0 + a1 + a2 + a3 + a4;\r\n                    a %= Math.pow(2, 40 - this.bitPosition);\r\n                    a = Math.floor(a / Math.pow(2, 40 - this.bitPosition - bits));\r\n                } else {\r\n                    throw new Error(\"Too many bits!\");\r\n                }\r\n                if (signed) {\r\n                    if (mBits < 32) {\r\n                        if (a >>> (bits - 1)) {\r\n                            a = ((1 << bits >>> 0) - a) * -1;\r\n                        }\r\n                    } else {\r\n                        if (a / Math.pow(2, bits - 1) | 0) {\r\n                            a = (Math.pow(2, bits) - a) * -1;\r\n                        }\r\n                    }\r\n                }\r\n                this.advance(bits);\r\n                return a;\r\n            };\r\n    \r\n            Bitstream.prototype.peek = function (bits, signed) {\r\n                var a, a0, a1, a2, a3, a4, mBits;\r\n                if (bits === 0) {\r\n                    return 0;\r\n                }\r\n                mBits = bits + this.bitPosition;\r\n                if (mBits <= 8) {\r\n                    a = ((this.stream.peekUInt8() << this.bitPosition) & 0xff) >>> (8 - bits);\r\n                } else if (mBits <= 16) {\r\n                    a = ((this.stream.peekUInt16() << this.bitPosition) & 0xffff) >>> (16 - bits);\r\n                } else if (mBits <= 24) {\r\n                    a = ((this.stream.peekUInt24() << this.bitPosition) & 0xffffff) >>> (24 - bits);\r\n                } else if (mBits <= 32) {\r\n                    a = (this.stream.peekUInt32() << this.bitPosition) >>> (32 - bits);\r\n                } else if (mBits <= 40) {\r\n                    a0 = this.stream.peekUInt8(0) * 0x0100000000;\r\n                    a1 = this.stream.peekUInt8(1) << 24 >>> 0;\r\n                    a2 = this.stream.peekUInt8(2) << 16;\r\n                    a3 = this.stream.peekUInt8(3) << 8;\r\n                    a4 = this.stream.peekUInt8(4);\r\n                    a = a0 + a1 + a2 + a3 + a4;\r\n                    a %= Math.pow(2, 40 - this.bitPosition);\r\n                    a = Math.floor(a / Math.pow(2, 40 - this.bitPosition - bits));\r\n                } else {\r\n                    throw new Error(\"Too many bits!\");\r\n                }\r\n                if (signed) {\r\n                    if (mBits < 32) {\r\n                        if (a >>> (bits - 1)) {\r\n                            a = ((1 << bits >>> 0) - a) * -1;\r\n                        }\r\n                    } else {\r\n                        if (a / Math.pow(2, bits - 1) | 0) {\r\n                            a = (Math.pow(2, bits) - a) * -1;\r\n                        }\r\n                    }\r\n                }\r\n                return a;\r\n            };\r\n    \r\n            Bitstream.prototype.readLSB = function (bits, signed) {\r\n                var a, mBits;\r\n                if (bits === 0) {\r\n                    return 0;\r\n                }\r\n                if (bits > 40) {\r\n                    throw new Error(\"Too many bits!\");\r\n                }\r\n                mBits = bits + this.bitPosition;\r\n                a = (this.stream.peekUInt8(0)) >>> this.bitPosition;\r\n                if (mBits > 8) {\r\n                    a |= (this.stream.peekUInt8(1)) << (8 - this.bitPosition);\r\n                }\r\n                if (mBits > 16) {\r\n                    a |= (this.stream.peekUInt8(2)) << (16 - this.bitPosition);\r\n                }\r\n                if (mBits > 24) {\r\n                    a += (this.stream.peekUInt8(3)) << (24 - this.bitPosition) >>> 0;\r\n                }\r\n                if (mBits > 32) {\r\n                    a += (this.stream.peekUInt8(4)) * Math.pow(2, 32 - this.bitPosition);\r\n                }\r\n                if (mBits >= 32) {\r\n                    a %= Math.pow(2, bits);\r\n                } else {\r\n                    a &= (1 << bits) - 1;\r\n                }\r\n                if (signed) {\r\n                    if (mBits < 32) {\r\n                        if (a >>> (bits - 1)) {\r\n                            a = ((1 << bits >>> 0) - a) * -1;\r\n                        }\r\n                    } else {\r\n                        if (a / Math.pow(2, bits - 1) | 0) {\r\n                            a = (Math.pow(2, bits) - a) * -1;\r\n                        }\r\n                    }\r\n                }\r\n                this.advance(bits);\r\n                return a;\r\n            };\r\n    \r\n            Bitstream.prototype.peekLSB = function (bits, signed) {\r\n                var a, mBits;\r\n                if (bits === 0) {\r\n                    return 0;\r\n                }\r\n                if (bits > 40) {\r\n                    throw new Error(\"Too many bits!\");\r\n                }\r\n                mBits = bits + this.bitPosition;\r\n                a = (this.stream.peekUInt8(0)) >>> this.bitPosition;\r\n                if (mBits > 8) {\r\n                    a |= (this.stream.peekUInt8(1)) << (8 - this.bitPosition);\r\n                }\r\n                if (mBits > 16) {\r\n                    a |= (this.stream.peekUInt8(2)) << (16 - this.bitPosition);\r\n                }\r\n                if (mBits > 24) {\r\n                    a += (this.stream.peekUInt8(3)) << (24 - this.bitPosition) >>> 0;\r\n                }\r\n                if (mBits > 32) {\r\n                    a += (this.stream.peekUInt8(4)) * Math.pow(2, 32 - this.bitPosition);\r\n                }\r\n                if (mBits >= 32) {\r\n                    a %= Math.pow(2, bits);\r\n                } else {\r\n                    a &= (1 << bits) - 1;\r\n                }\r\n                if (signed) {\r\n                    if (mBits < 32) {\r\n                        if (a >>> (bits - 1)) {\r\n                            a = ((1 << bits >>> 0) - a) * -1;\r\n                        }\r\n                    } else {\r\n                        if (a / Math.pow(2, bits - 1) | 0) {\r\n                            a = (Math.pow(2, bits) - a) * -1;\r\n                        }\r\n                    }\r\n                }\r\n                return a;\r\n            };\r\n    \r\n            return Bitstream;\r\n        })();\r\n    \r\n        var AVBuffer = AV.Buffer = (function () {\r\n            var BlobBuilder, URL;\r\n    \r\n            function AVBuffer(input) {\r\n                var _ref;\r\n                if (input instanceof Uint8Array) {\r\n                    this.data = input;\r\n                } else if (input instanceof ArrayBuffer || Array.isArray(input) || typeof input === 'number' || ((_ref = global.Buffer) != null ? _ref.isBuffer(input) : void 0)) {\r\n                    this.data = new Uint8Array(input);\r\n                } else if (input.buffer instanceof ArrayBuffer) {\r\n                    this.data = new Uint8Array(input.buffer, input.byteOffset, input.length * input.BYTES_PER_ELEMENT);\r\n                } else if (input instanceof AVBuffer) {\r\n                    this.data = input.data;\r\n                } else {\r\n                    throw new Error(\"Constructing buffer with unknown type.\");\r\n                }\r\n                this.length = this.data.length;\r\n                this.next = null;\r\n                this.prev = null;\r\n            }\r\n    \r\n            AVBuffer.allocate = function (size) {\r\n                return new AVBuffer(size);\r\n            };\r\n    \r\n            AVBuffer.prototype.copy = function () {\r\n                return new AVBuffer(new Uint8Array(this.data));\r\n            };\r\n    \r\n            AVBuffer.prototype.slice = function (position, length) {\r\n                if (length == null) {\r\n                    length = this.length;\r\n                }\r\n                if (position === 0 && length >= this.length) {\r\n                    return new AVBuffer(this.data);\r\n                } else {\r\n                    return new AVBuffer(this.data.subarray(position, position + length));\r\n                }\r\n            };\r\n    \r\n            BlobBuilder = global.BlobBuilder || global.MozBlobBuilder || global.WebKitBlobBuilder;\r\n    \r\n            URL = global.URL || global.webkitURL || global.mozURL;\r\n    \r\n            AVBuffer.makeBlob = function (data, type) {\r\n                var bb;\r\n                if (type == null) {\r\n                    type = 'application/octet-stream';\r\n                }\r\n                try {\r\n                    return new Blob([data], {\r\n                        type: type\r\n                    });\r\n                } catch (_error) {\r\n                }\r\n                if (BlobBuilder != null) {\r\n                    bb = new BlobBuilder;\r\n                    bb.append(data);\r\n                    return bb.getBlob(type);\r\n                }\r\n                return null;\r\n            };\r\n    \r\n            AVBuffer.makeBlobURL = function (data, type) {\r\n                return URL != null ? URL.createObjectURL(this.makeBlob(data, type)) : void 0;\r\n            };\r\n    \r\n            AVBuffer.revokeBlobURL = function (url) {\r\n                return URL != null ? URL.revokeObjectURL(url) : void 0;\r\n            };\r\n    \r\n            AVBuffer.prototype.toBlob = function () {\r\n                return AVBuffer.makeBlob(this.data.buffer);\r\n            };\r\n    \r\n            AVBuffer.prototype.toBlobURL = function () {\r\n                return AVBuffer.makeBlobURL(this.data.buffer);\r\n            };\r\n    \r\n            return AVBuffer;\r\n        })();\r\n    \r\n        var UnderflowError = AV.UnderflowError = (function (_super) {\r\n            __extends(UnderflowError, _super);\r\n    \r\n            function UnderflowError() {\r\n                UnderflowError.__super__.constructor.apply(this, arguments);\r\n                this.name = 'UnderflowError';\r\n                this.stack = new Error().stack;\r\n            }\r\n    \r\n            return UnderflowError;\r\n        })(Error);\r\n    \r\n        var BufferList = AV.BufferList = (function () {\r\n            function BufferList() {\r\n                this.first = null;\r\n                this.last = null;\r\n                this.numBuffers = 0;\r\n                this.availableBytes = 0;\r\n                this.availableBuffers = 0;\r\n            }\r\n    \r\n            BufferList.prototype.copy = function () {\r\n                var result;\r\n                result = new BufferList;\r\n                result.first = this.first;\r\n                result.last = this.last;\r\n                result.numBuffers = this.numBuffers;\r\n                result.availableBytes = this.availableBytes;\r\n                result.availableBuffers = this.availableBuffers;\r\n                return result;\r\n            };\r\n    \r\n            BufferList.prototype.append = function (buffer) {\r\n                var _ref;\r\n                buffer.prev = this.last;\r\n                if ((_ref = this.last) != null) {\r\n                    _ref.next = buffer;\r\n                }\r\n                this.last = buffer;\r\n                if (this.first == null) {\r\n                    this.first = buffer;\r\n                }\r\n                this.availableBytes += buffer.length;\r\n                this.availableBuffers++;\r\n                return this.numBuffers++;\r\n            };\r\n    \r\n            BufferList.prototype.advance = function () {\r\n                if (this.first) {\r\n                    this.availableBytes -= this.first.length;\r\n                    this.availableBuffers--;\r\n                    this.first = this.first.next;\r\n                    return this.first != null;\r\n                }\r\n                return false;\r\n            };\r\n    \r\n            BufferList.prototype.rewind = function () {\r\n                var _ref;\r\n                if (this.first && !this.first.prev) {\r\n                    return false;\r\n                }\r\n                this.first = ((_ref = this.first) != null ? _ref.prev : void 0) || this.last;\r\n                if (this.first) {\r\n                    this.availableBytes += this.first.length;\r\n                    this.availableBuffers++;\r\n                }\r\n                return this.first != null;\r\n            };\r\n    \r\n            BufferList.prototype.reset = function () {\r\n                var _results;\r\n                _results = [];\r\n                while (this.rewind()) {\r\n                    continue;\r\n                }\r\n                return _results;\r\n            };\r\n    \r\n            return BufferList;\r\n    \r\n        })();\r\n    \r\n        var EventEmitter = AV.BufferList = (function (_super) {\r\n            __extends(EventEmitter, _super);\r\n    \r\n            function EventEmitter() {\r\n                return EventEmitter.__super__.constructor.apply(this, arguments);\r\n            }\r\n    \r\n            EventEmitter.prototype.on = function (event, fn) {\r\n                var _base;\r\n                if (this.events == null) {\r\n                    this.events = {};\r\n                }\r\n                if ((_base = this.events)[event] == null) {\r\n                    _base[event] = [];\r\n                }\r\n                return this.events[event].push(fn);\r\n            };\r\n    \r\n            EventEmitter.prototype.off = function (event, fn) {\r\n                var events, index, _ref;\r\n                if (this.events == null) {\r\n                    return;\r\n                }\r\n                if ((_ref = this.events) != null ? _ref[event] : void 0) {\r\n                    if (fn != null) {\r\n                        index = this.events[event].indexOf(fn);\r\n                        if (~index) {\r\n                            return this.events[event].splice(index, 1);\r\n                        }\r\n                    } else {\r\n                        return this.events[event];\r\n                    }\r\n                } else if (event == null) {\r\n                    return events = {};\r\n                }\r\n            };\r\n    \r\n            EventEmitter.prototype.once = function (event, fn) {\r\n                var cb;\r\n                return this.on(event, cb = function () {\r\n                    this.off(event, cb);\r\n                    return fn.apply(this, arguments);\r\n                });\r\n            };\r\n    \r\n            EventEmitter.prototype.emit = function () {\r\n                var args, event, fn, _i, _len, _ref, _ref1;\r\n                event = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];\r\n                if (!((_ref = this.events) != null ? _ref[event] : void 0)) {\r\n                    return;\r\n                }\r\n                _ref1 = this.events[event].slice();\r\n                for (_i = 0, _len = _ref1.length; _i < _len; _i++) {\r\n                    fn = _ref1[_i];\r\n                    fn.apply(this, args);\r\n                }\r\n            };\r\n    \r\n            return EventEmitter;\r\n    \r\n        })(Base);\r\n    \r\n        var Stream = AV.Stream = (function () {\r\n            var buf, decodeString, float32, float64, float64Fallback, float80, int16, int32, int8, nativeEndian, uint16,\r\n                uint32, uint8;\r\n    \r\n            buf = new ArrayBuffer(16);\r\n    \r\n            uint8 = new Uint8Array(buf);\r\n    \r\n            int8 = new Int8Array(buf);\r\n    \r\n            uint16 = new Uint16Array(buf);\r\n    \r\n            int16 = new Int16Array(buf);\r\n    \r\n            uint32 = new Uint32Array(buf);\r\n    \r\n            int32 = new Int32Array(buf);\r\n    \r\n            float32 = new Float32Array(buf);\r\n    \r\n            if (typeof Float64Array !== \"undefined\" && Float64Array !== null) {\r\n                float64 = new Float64Array(buf);\r\n            }\r\n    \r\n            nativeEndian = new Uint16Array(new Uint8Array([0x12, 0x34]).buffer)[0] === 0x3412;\r\n    \r\n            function Stream(list) {\r\n                this.list = list;\r\n                this.localOffset = 0;\r\n                this.offset = 0;\r\n            }\r\n    \r\n            Stream.fromBuffer = function (buffer) {\r\n                var list;\r\n                list = new BufferList;\r\n                list.append(buffer);\r\n                return new Stream(list);\r\n            };\r\n    \r\n            Stream.prototype.copy = function () {\r\n                var result;\r\n                result = new Stream(this.list.copy());\r\n                result.localOffset = this.localOffset;\r\n                result.offset = this.offset;\r\n                return result;\r\n            };\r\n    \r\n            Stream.prototype.available = function (bytes) {\r\n                return bytes <= this.list.availableBytes - this.localOffset;\r\n            };\r\n    \r\n            Stream.prototype.remainingBytes = function () {\r\n                return this.list.availableBytes - this.localOffset;\r\n            };\r\n    \r\n            Stream.prototype.advance = function (bytes) {\r\n                if (!this.available(bytes)) {\r\n                    throw new UnderflowError();\r\n                }\r\n                this.localOffset += bytes;\r\n                this.offset += bytes;\r\n                while (this.list.first && this.localOffset >= this.list.first.length) {\r\n                    this.localOffset -= this.list.first.length;\r\n                    this.list.advance();\r\n                }\r\n                return this;\r\n            };\r\n    \r\n            Stream.prototype.rewind = function (bytes) {\r\n                if (bytes > this.offset) {\r\n                    throw new UnderflowError();\r\n                }\r\n                if (!this.list.first) {\r\n                    this.list.rewind();\r\n                    this.localOffset = this.list.first.length;\r\n                }\r\n                this.localOffset -= bytes;\r\n                this.offset -= bytes;\r\n                while (this.list.first.prev && this.localOffset < 0) {\r\n                    this.list.rewind();\r\n                    this.localOffset += this.list.first.length;\r\n                }\r\n                return this;\r\n            };\r\n    \r\n            Stream.prototype.seek = function (position) {\r\n                if (position > this.offset) {\r\n                    return this.advance(position - this.offset);\r\n                } else if (position < this.offset) {\r\n                    return this.rewind(this.offset - position);\r\n                }\r\n            };\r\n    \r\n            Stream.prototype.readUInt8 = function () {\r\n                var a;\r\n                if (!this.available(1)) {\r\n                    throw new UnderflowError();\r\n                }\r\n                a = this.list.first.data[this.localOffset];\r\n                this.localOffset += 1;\r\n                this.offset += 1;\r\n                if (this.localOffset === this.list.first.length) {\r\n                    this.localOffset = 0;\r\n                    this.list.advance();\r\n                }\r\n                return a;\r\n            };\r\n    \r\n            Stream.prototype.peekUInt8 = function (offset) {\r\n                var buffer;\r\n                if (offset == null) {\r\n                    offset = 0;\r\n                }\r\n                if (!this.available(offset + 1)) {\r\n                    throw new UnderflowError();\r\n                }\r\n                offset = this.localOffset + offset;\r\n                buffer = this.list.first;\r\n                while (buffer) {\r\n                    if (buffer.length > offset) {\r\n                        return buffer.data[offset];\r\n                    }\r\n                    offset -= buffer.length;\r\n                    buffer = buffer.next;\r\n                }\r\n                return 0;\r\n            };\r\n    \r\n            Stream.prototype.read = function (bytes, littleEndian) {\r\n                var i, _i, _j, _ref;\r\n                if (littleEndian == null) {\r\n                    littleEndian = false;\r\n                }\r\n                if (littleEndian === nativeEndian) {\r\n                    for (i = _i = 0; _i < bytes; i = _i += 1) {\r\n                        uint8[i] = this.readUInt8();\r\n                    }\r\n                } else {\r\n                    for (i = _j = _ref = bytes - 1; _j >= 0; i = _j += -1) {\r\n                        uint8[i] = this.readUInt8();\r\n                    }\r\n                }\r\n            };\r\n    \r\n            Stream.prototype.peek = function (bytes, offset, littleEndian) {\r\n                var i, _i, _j;\r\n                if (littleEndian == null) {\r\n                    littleEndian = false;\r\n                }\r\n                if (littleEndian === nativeEndian) {\r\n                    for (i = _i = 0; _i < bytes; i = _i += 1) {\r\n                        uint8[i] = this.peekUInt8(offset + i);\r\n                    }\r\n                } else {\r\n                    for (i = _j = 0; _j < bytes; i = _j += 1) {\r\n                        uint8[bytes - i - 1] = this.peekUInt8(offset + i);\r\n                    }\r\n                }\r\n            };\r\n    \r\n            Stream.prototype.readInt8 = function () {\r\n                this.read(1);\r\n                return int8[0];\r\n            };\r\n    \r\n            Stream.prototype.peekInt8 = function (offset) {\r\n                if (offset == null) {\r\n                    offset = 0;\r\n                }\r\n                this.peek(1, offset);\r\n                return int8[0];\r\n            };\r\n    \r\n            Stream.prototype.readUInt16 = function (littleEndian) {\r\n                this.read(2, littleEndian);\r\n                return uint16[0];\r\n            };\r\n    \r\n            Stream.prototype.peekUInt16 = function (offset, littleEndian) {\r\n                if (offset == null) {\r\n                    offset = 0;\r\n                }\r\n                this.peek(2, offset, littleEndian);\r\n                return uint16[0];\r\n            };\r\n    \r\n            Stream.prototype.readInt16 = function (littleEndian) {\r\n                this.read(2, littleEndian);\r\n                return int16[0];\r\n            };\r\n    \r\n            Stream.prototype.peekInt16 = function (offset, littleEndian) {\r\n                if (offset == null) {\r\n                    offset = 0;\r\n                }\r\n                this.peek(2, offset, littleEndian);\r\n                return int16[0];\r\n            };\r\n    \r\n            Stream.prototype.readUInt24 = function (littleEndian) {\r\n                if (littleEndian) {\r\n                    return this.readUInt16(true) + (this.readUInt8() << 16);\r\n                } else {\r\n                    return (this.readUInt16() << 8) + this.readUInt8();\r\n                }\r\n            };\r\n    \r\n            Stream.prototype.peekUInt24 = function (offset, littleEndian) {\r\n                if (offset == null) {\r\n                    offset = 0;\r\n                }\r\n                if (littleEndian) {\r\n                    return this.peekUInt16(offset, true) + (this.peekUInt8(offset + 2) << 16);\r\n                } else {\r\n                    return (this.peekUInt16(offset) << 8) + this.peekUInt8(offset + 2);\r\n                }\r\n            };\r\n    \r\n            Stream.prototype.readInt24 = function (littleEndian) {\r\n                if (littleEndian) {\r\n                    return this.readUInt16(true) + (this.readInt8() << 16);\r\n                } else {\r\n                    return (this.readInt16() << 8) + this.readUInt8();\r\n                }\r\n            };\r\n    \r\n            Stream.prototype.peekInt24 = function (offset, littleEndian) {\r\n                if (offset == null) {\r\n                    offset = 0;\r\n                }\r\n                if (littleEndian) {\r\n                    return this.peekUInt16(offset, true) + (this.peekInt8(offset + 2) << 16);\r\n                } else {\r\n                    return (this.peekInt16(offset) << 8) + this.peekUInt8(offset + 2);\r\n                }\r\n            };\r\n    \r\n            Stream.prototype.readUInt32 = function (littleEndian) {\r\n                this.read(4, littleEndian);\r\n                return uint32[0];\r\n            };\r\n    \r\n            Stream.prototype.peekUInt32 = function (offset, littleEndian) {\r\n                if (offset == null) {\r\n                    offset = 0;\r\n                }\r\n                this.peek(4, offset, littleEndian);\r\n                return uint32[0];\r\n            };\r\n    \r\n            Stream.prototype.readInt32 = function (littleEndian) {\r\n                this.read(4, littleEndian);\r\n                return int32[0];\r\n            };\r\n    \r\n            Stream.prototype.peekInt32 = function (offset, littleEndian) {\r\n                if (offset == null) {\r\n                    offset = 0;\r\n                }\r\n                this.peek(4, offset, littleEndian);\r\n                return int32[0];\r\n            };\r\n    \r\n            Stream.prototype.readFloat32 = function (littleEndian) {\r\n                this.read(4, littleEndian);\r\n                return float32[0];\r\n            };\r\n    \r\n            Stream.prototype.peekFloat32 = function (offset, littleEndian) {\r\n                if (offset == null) {\r\n                    offset = 0;\r\n                }\r\n                this.peek(4, offset, littleEndian);\r\n                return float32[0];\r\n            };\r\n    \r\n            Stream.prototype.readFloat64 = function (littleEndian) {\r\n                this.read(8, littleEndian);\r\n                if (float64) {\r\n                    return float64[0];\r\n                } else {\r\n                    return float64Fallback();\r\n                }\r\n            };\r\n    \r\n            float64Fallback = function () {\r\n                var exp, frac, high, low, out, sign;\r\n                low = uint32[0], high = uint32[1];\r\n                if (!high || high === 0x80000000) {\r\n                    return 0.0;\r\n                }\r\n                sign = 1 - (high >>> 31) * 2;\r\n                exp = (high >>> 20) & 0x7ff;\r\n                frac = high & 0xfffff;\r\n                if (exp === 0x7ff) {\r\n                    if (frac) {\r\n                        return NaN;\r\n                    }\r\n                    return sign * Infinity;\r\n                }\r\n                exp -= 1023;\r\n                out = (frac | 0x100000) * Math.pow(2, exp - 20);\r\n                out += low * Math.pow(2, exp - 52);\r\n                return sign * out;\r\n            };\r\n    \r\n            Stream.prototype.peekFloat64 = function (offset, littleEndian) {\r\n                if (offset == null) {\r\n                    offset = 0;\r\n                }\r\n                this.peek(8, offset, littleEndian);\r\n                if (float64) {\r\n                    return float64[0];\r\n                } else {\r\n                    return float64Fallback();\r\n                }\r\n            };\r\n    \r\n            Stream.prototype.readFloat80 = function (littleEndian) {\r\n                this.read(10, littleEndian);\r\n                return float80();\r\n            };\r\n    \r\n            float80 = function () {\r\n                var a0, a1, exp, high, low, out, sign;\r\n                high = uint32[0], low = uint32[1];\r\n                a0 = uint8[9];\r\n                a1 = uint8[8];\r\n                sign = 1 - (a0 >>> 7) * 2;\r\n                exp = ((a0 & 0x7F) << 8) | a1;\r\n                if (exp === 0 && low === 0 && high === 0) {\r\n                    return 0;\r\n                }\r\n                if (exp === 0x7fff) {\r\n                    if (low === 0 && high === 0) {\r\n                        return sign * Infinity;\r\n                    }\r\n                    return NaN;\r\n                }\r\n                exp -= 16383;\r\n                out = low * Math.pow(2, exp - 31);\r\n                out += high * Math.pow(2, exp - 63);\r\n                return sign * out;\r\n            };\r\n    \r\n            Stream.prototype.peekFloat80 = function (offset, littleEndian) {\r\n                if (offset == null) {\r\n                    offset = 0;\r\n                }\r\n                this.peek(10, offset, littleEndian);\r\n                return float80();\r\n            };\r\n    \r\n            Stream.prototype.readBuffer = function (length) {\r\n                var i, result, to, _i;\r\n                result = AVBuffer.allocate(length);\r\n                to = result.data;\r\n                for (i = _i = 0; _i < length; i = _i += 1) {\r\n                    to[i] = this.readUInt8();\r\n                }\r\n                return result;\r\n            };\r\n    \r\n            Stream.prototype.peekBuffer = function (offset, length) {\r\n                var i, result, to, _i;\r\n                if (offset == null) {\r\n                    offset = 0;\r\n                }\r\n                result = AVBuffer.allocate(length);\r\n                to = result.data;\r\n                for (i = _i = 0; _i < length; i = _i += 1) {\r\n                    to[i] = this.peekUInt8(offset + i);\r\n                }\r\n                return result;\r\n            };\r\n    \r\n            Stream.prototype.readSingleBuffer = function (length) {\r\n                var result;\r\n                result = this.list.first.slice(this.localOffset, length);\r\n                this.advance(result.length);\r\n                return result;\r\n            };\r\n    \r\n            Stream.prototype.peekSingleBuffer = function (offset, length) {\r\n                var result;\r\n                result = this.list.first.slice(this.localOffset + offset, length);\r\n                return result;\r\n            };\r\n    \r\n            Stream.prototype.readString = function (length, encoding) {\r\n                if (encoding == null) {\r\n                    encoding = 'ascii';\r\n                }\r\n                return decodeString.call(this, 0, length, encoding, true);\r\n            };\r\n    \r\n            Stream.prototype.peekString = function (offset, length, encoding) {\r\n                if (offset == null) {\r\n                    offset = 0;\r\n                }\r\n                if (encoding == null) {\r\n                    encoding = 'ascii';\r\n                }\r\n                return decodeString.call(this, offset, length, encoding, false);\r\n            };\r\n    \r\n            decodeString = function (offset, length, encoding, advance) {\r\n                var b1, b2, b3, b4, bom, c, end, littleEndian, nullEnd, pt, result, w1, w2;\r\n                encoding = encoding.toLowerCase();\r\n                nullEnd = length === null ? 0 : -1;\r\n                if (length == null) {\r\n                    length = Infinity;\r\n                }\r\n                end = offset + length;\r\n                result = '';\r\n                switch (encoding) {\r\n                    case 'ascii':\r\n                    case 'latin1':\r\n                        while (offset < end && (c = this.peekUInt8(offset++)) !== nullEnd) {\r\n                            result += String.fromCharCode(c);\r\n                        }\r\n                        break;\r\n                    case 'utf8':\r\n                    case 'utf-8':\r\n                        while (offset < end && (b1 = this.peekUInt8(offset++)) !== nullEnd) {\r\n                            if ((b1 & 0x80) === 0) {\r\n                                result += String.fromCharCode(b1);\r\n                            } else if ((b1 & 0xe0) === 0xc0) {\r\n                                b2 = this.peekUInt8(offset++) & 0x3f;\r\n                                result += String.fromCharCode(((b1 & 0x1f) << 6) | b2);\r\n                            } else if ((b1 & 0xf0) === 0xe0) {\r\n                                b2 = this.peekUInt8(offset++) & 0x3f;\r\n                                b3 = this.peekUInt8(offset++) & 0x3f;\r\n                                result += String.fromCharCode(((b1 & 0x0f) << 12) | (b2 << 6) | b3);\r\n                            } else if ((b1 & 0xf8) === 0xf0) {\r\n                                b2 = this.peekUInt8(offset++) & 0x3f;\r\n                                b3 = this.peekUInt8(offset++) & 0x3f;\r\n                                b4 = this.peekUInt8(offset++) & 0x3f;\r\n                                pt = (((b1 & 0x0f) << 18) | (b2 << 12) | (b3 << 6) | b4) - 0x10000;\r\n                                result += String.fromCharCode(0xd800 + (pt >> 10), 0xdc00 + (pt & 0x3ff));\r\n                            }\r\n                        }\r\n                        break;\r\n                    case 'utf16-be':\r\n                    case 'utf16be':\r\n                    case 'utf16le':\r\n                    case 'utf16-le':\r\n                    case 'utf16bom':\r\n                    case 'utf16-bom':\r\n                        switch (encoding) {\r\n                            case 'utf16be':\r\n                            case 'utf16-be':\r\n                                littleEndian = false;\r\n                                break;\r\n                            case 'utf16le':\r\n                            case 'utf16-le':\r\n                                littleEndian = true;\r\n                                break;\r\n                            case 'utf16bom':\r\n                            case 'utf16-bom':\r\n                                if (length < 2 || (bom = this.peekUInt16(offset)) === nullEnd) {\r\n                                    if (advance) {\r\n                                        this.advance(offset += 2);\r\n                                    }\r\n                                    return result;\r\n                                }\r\n                                littleEndian = bom === 0xfffe;\r\n                                offset += 2;\r\n                        }\r\n                        while (offset < end && (w1 = this.peekUInt16(offset, littleEndian)) !== nullEnd) {\r\n                            offset += 2;\r\n                            if (w1 < 0xd800 || w1 > 0xdfff) {\r\n                                result += String.fromCharCode(w1);\r\n                            } else {\r\n                                if (w1 > 0xdbff) {\r\n                                    throw new Error(\"Invalid utf16 sequence.\");\r\n                                }\r\n                                w2 = this.peekUInt16(offset, littleEndian);\r\n                                if (w2 < 0xdc00 || w2 > 0xdfff) {\r\n                                    throw new Error(\"Invalid utf16 sequence.\");\r\n                                }\r\n                                result += String.fromCharCode(w1, w2);\r\n                                offset += 2;\r\n                            }\r\n                        }\r\n                        if (w1 === nullEnd) {\r\n                            offset += 2;\r\n                        }\r\n                        break;\r\n                    default:\r\n                        throw new Error(\"Unknown encoding: \" + encoding);\r\n                }\r\n                if (advance) {\r\n                    this.advance(offset);\r\n                }\r\n                return result;\r\n            };\r\n    \r\n            return Stream;\r\n    \r\n        })();\r\n    \r\n        var Decoder = AV.Decoder = (function (_super) {\r\n            var codecs;\r\n    \r\n            __extends(Decoder, _super);\r\n    \r\n            function Decoder(demuxer, format) {\r\n                var list;\r\n                this.demuxer = demuxer;\r\n                this.format = format;\r\n                list = new BufferList;\r\n                this.stream = new Stream(list);\r\n                this.bitstream = new Bitstream(this.stream);\r\n                this.receivedFinalBuffer = false;\r\n                this.waiting = false;\r\n                this.demuxer.on('cookie', (function (_this) {\r\n                    return function (cookie) {\r\n                        var error;\r\n                        try {\r\n                            return _this.setCookie(cookie);\r\n                        } catch (_error) {\r\n                            error = _error;\r\n                            return _this.emit('error', error);\r\n                        }\r\n                    };\r\n                })(this));\r\n                this.demuxer.on('data', (function (_this) {\r\n                    return function (chunk) {\r\n                        list.append(chunk);\r\n                        if (_this.waiting) {\r\n                            return _this.decode();\r\n                        }\r\n                    };\r\n                })(this));\r\n                this.demuxer.on('end', (function (_this) {\r\n                    return function () {\r\n                        _this.receivedFinalBuffer = true;\r\n                        if (_this.waiting) {\r\n                            return _this.decode();\r\n                        }\r\n                    };\r\n                })(this));\r\n                this.init();\r\n            }\r\n    \r\n            Decoder.prototype.init = function () {\r\n            };\r\n    \r\n            Decoder.prototype.setCookie = function (cookie) {\r\n            };\r\n    \r\n            Decoder.prototype.readChunk = function () {\r\n            };\r\n    \r\n            Decoder.prototype.decode = function () {\r\n                var error, offset, packet;\r\n                this.waiting = !this.receivedFinalBuffer;\r\n                offset = this.bitstream.offset();\r\n                try {\r\n                    packet = this.readChunk();\r\n                } catch (_error) {\r\n                    error = _error;\r\n                    if (!(error instanceof UnderflowError)) {\r\n                        this.emit('error', error);\r\n                        return false;\r\n                    }\r\n                }\r\n                if (packet) {\r\n                    this.emit('data', packet);\r\n                    if (this.receivedFinalBuffer) {\r\n                        this.emit('end');\r\n                    }\r\n                    return true;\r\n                } else if (!this.receivedFinalBuffer) {\r\n                    this.bitstream.seek(offset);\r\n                    this.waiting = true;\r\n                } else {\r\n                    this.emit('end');\r\n                }\r\n                return false;\r\n            };\r\n    \r\n            Decoder.prototype.seek = function (timestamp) {\r\n                var seekPoint;\r\n                seekPoint = this.demuxer.seek(timestamp);\r\n                this.stream.seek(seekPoint.offset);\r\n                return seekPoint.timestamp;\r\n            };\r\n    \r\n            codecs = {};\r\n    \r\n            Decoder.register = function (id, decoder) {\r\n                return codecs[id] = decoder;\r\n            };\r\n    \r\n            Decoder.find = function (id) {\r\n                return codecs[id] || null;\r\n            };\r\n    \r\n            return Decoder;\r\n    \r\n        })(EventEmitter);\r\n    \r\n        var Demuxer = AV.Demuxer = (function (_super) {\r\n            var formats;\r\n    \r\n            __extends(Demuxer, _super);\r\n    \r\n            Demuxer.probe = function (buffer) {\r\n                return false;\r\n            };\r\n    \r\n            function Demuxer(source, chunk) {\r\n                var list, received;\r\n                list = new BufferList;\r\n                list.append(chunk);\r\n                this.stream = new Stream(list);\r\n                received = false;\r\n                source.on('data', (function (_this) {\r\n                    return function (chunk) {\r\n                        var e;\r\n                        received = true;\r\n                        list.append(chunk);\r\n                        try {\r\n                            return _this.readChunk(chunk);\r\n                        } catch (_error) {\r\n                            e = _error;\r\n                            return _this.emit('error', e);\r\n                        }\r\n                    };\r\n                })(this));\r\n                source.on('error', (function (_this) {\r\n                    return function (err) {\r\n                        return _this.emit('error', err);\r\n                    };\r\n                })(this));\r\n                source.on('end', (function (_this) {\r\n                    return function () {\r\n                        if (!received) {\r\n                            _this.readChunk(chunk);\r\n                        }\r\n                        return _this.emit('end');\r\n                    };\r\n                })(this));\r\n                this.seekPoints = [];\r\n                this.init();\r\n            }\r\n    \r\n            Demuxer.prototype.init = function () {\r\n            };\r\n    \r\n            Demuxer.prototype.readChunk = function (chunk) {\r\n            };\r\n    \r\n            Demuxer.prototype.addSeekPoint = function (offset, timestamp) {\r\n                var index;\r\n                index = this.searchTimestamp(timestamp);\r\n                return this.seekPoints.splice(index, 0, {\r\n                    offset: offset,\r\n                    timestamp: timestamp\r\n                });\r\n            };\r\n    \r\n            Demuxer.prototype.searchTimestamp = function (timestamp, backward) {\r\n                var high, low, mid, time;\r\n                low = 0;\r\n                high = this.seekPoints.length;\r\n                if (high > 0 && this.seekPoints[high - 1].timestamp < timestamp) {\r\n                    return high;\r\n                }\r\n                while (low < high) {\r\n                    mid = (low + high) >> 1;\r\n                    time = this.seekPoints[mid].timestamp;\r\n                    if (time < timestamp) {\r\n                        low = mid + 1;\r\n                    } else if (time >= timestamp) {\r\n                        high = mid;\r\n                    }\r\n                }\r\n                if (high > this.seekPoints.length) {\r\n                    high = this.seekPoints.length;\r\n                }\r\n                return high;\r\n            };\r\n    \r\n            Demuxer.prototype.seek = function (timestamp) {\r\n                var index, seekPoint;\r\n                if (this.format && this.format.framesPerPacket > 0 && this.format.bytesPerPacket > 0) {\r\n                    seekPoint = {\r\n                        timestamp: timestamp,\r\n                        offset: this.format.bytesPerPacket * timestamp / this.format.framesPerPacket\r\n                    };\r\n                    return seekPoint;\r\n                } else {\r\n                    index = this.searchTimestamp(timestamp);\r\n                    return this.seekPoints[index];\r\n                }\r\n            };\r\n    \r\n            formats = [];\r\n    \r\n            Demuxer.register = function (demuxer) {\r\n                return formats.push(demuxer);\r\n            };\r\n    \r\n            Demuxer.find = function (buffer) {\r\n                var e, format, offset, stream, _i, _len;\r\n                stream = Stream.fromBuffer(buffer);\r\n                for (_i = 0, _len = formats.length; _i < _len; _i++) {\r\n                    format = formats[_i];\r\n                    offset = stream.offset;\r\n                    try {\r\n                        if (format.probe(stream)) {\r\n                            return format;\r\n                        }\r\n                    } catch (_error) {\r\n                        e = _error;\r\n                    }\r\n                    stream.seek(offset);\r\n                }\r\n                return null;\r\n            };\r\n    \r\n            return Demuxer;\r\n    \r\n        })(EventEmitter);\r\n    \r\n        var AudioDevice = AV.AudioDevice = (function (_super) {\r\n            var devices;\r\n    \r\n            __extends(AudioDevice, _super);\r\n    \r\n            function AudioDevice(sampleRate, channels) {\r\n                this.sampleRate = sampleRate;\r\n                this.channels = channels;\r\n                this.updateTime = __bind(this.updateTime, this);\r\n                this.playing = false;\r\n                this.currentTime = 0;\r\n                this._lastTime = 0;\r\n            }\r\n    \r\n            AudioDevice.prototype.start = function () {\r\n                if (this.playing) {\r\n                    return;\r\n                }\r\n                this.playing = true;\r\n                if (this.device == null) {\r\n                    this.device = AudioDevice.create(this.sampleRate, this.channels);\r\n                }\r\n                if (!this.device) {\r\n                    throw new Error(\"No supported audio device found.\");\r\n                }\r\n                this._lastTime = this.device.getDeviceTime();\r\n                this._timer = setInterval(this.updateTime, 200);  //default is 200\r\n                return this.device.on('refill', this.refill = (function (_this) {\r\n                    return function (buffer) {\r\n                        return _this.emit('refill', buffer);\r\n                    };\r\n                })(this));\r\n            };\r\n    \r\n            AudioDevice.prototype.stop = function () {\r\n                if (!this.playing) {\r\n                    return;\r\n                }\r\n                this.playing = false;\r\n                if(this.device)\r\n                    this.device.off('refill', this.refill);\r\n                return clearInterval(this._timer);\r\n            };\r\n    \r\n            AudioDevice.prototype.destroy = function () {\r\n                var _ref;\r\n                this.stop();\r\n                return (_ref = this.device) != null ? _ref.destroy() : void 0;\r\n            };\r\n    \r\n            AudioDevice.prototype.seek = function (currentTime) {\r\n                this.currentTime = currentTime;\r\n                if (this.playing) {\r\n                    this._lastTime = this.device.getDeviceTime();\r\n                }\r\n                return this.emit('timeUpdate', this.currentTime);\r\n            };\r\n    \r\n            AudioDevice.prototype.updateTime = function () {\r\n                var time;\r\n                time = this.device.getDeviceTime();\r\n                this.currentTime += (time - this._lastTime) / this.device.sampleRate * 1000 | 0;\r\n                this._lastTime = time;\r\n                return this.emit('timeUpdate', this.currentTime);\r\n            };\r\n    \r\n            devices = [];\r\n    \r\n            AudioDevice.register = function (device) {\r\n                return devices.push(device);\r\n            };\r\n    \r\n            AudioDevice.create = function (sampleRate, channels) {\r\n                var device, _i, _len;\r\n                for (_i = 0, _len = devices.length; _i < _len; _i++) {\r\n                    device = devices[_i];\r\n                    if (device.supported) {\r\n                        return new device(sampleRate, channels);\r\n                    }\r\n                }\r\n                return null;\r\n            };\r\n    \r\n            return AudioDevice;\r\n    \r\n        })(EventEmitter);\r\n    \r\n        var MozillaAudioDevice = AV.MozillaAudioDevice = (function (_super) {\r\n            var createTimer, destroyTimer;\r\n    \r\n            __extends(MozillaAudioDevice, _super);\r\n    \r\n            AudioDevice.register(MozillaAudioDevice);\r\n    \r\n            // ios在執行下列這行 MozillaAudioDevice.supported = (typeof Audio !== \"undefined\" && Audio !== null) && 'mozWriteAudio' in new Audio; 時會發生錯誤\r\n            // 因為ios不允許new Audio去產生一個沒有內容的Audio\r\n            // 且egret.Capabilities.os 在這邊會回傳 unknown，無法用這方式判斷是ios或是android\r\n            // 所以這邊只判斷是否為原生，原生的 MozillaAudioDevice.supported 就設為false 因為反正原生也不是用Mozilla 不會影響到web端即可\r\n            // sorrows 2018.03.22\r\n            if(cc.sys.isNative)\r\n            {\r\n                MozillaAudioDevice.supported = false;\r\n            }\r\n            else\r\n            {\r\n                MozillaAudioDevice.supported = (typeof Audio !== \"undefined\" && Audio !== null) && 'mozWriteAudio' in new Audio;\r\n            }\r\n    \r\n            function MozillaAudioDevice(sampleRate, channels) {\r\n                this.sampleRate = sampleRate;\r\n                this.channels = channels;\r\n                this.refill = __bind(this.refill, this);\r\n                this.audio = new Audio;\r\n                this.audio.mozSetup(this.channels, this.sampleRate);\r\n                this.writePosition = 0;\r\n                this.prebufferSize = this.sampleRate / 2;\r\n                this.tail = null;\r\n                this.timer = createTimer(this.refill, 100);\r\n            }\r\n    \r\n            MozillaAudioDevice.prototype.refill = function () {\r\n                var available, buffer, currentPosition, written;\r\n                if (this.tail) {\r\n                    written = this.audio.mozWriteAudio(this.tail);\r\n                    this.writePosition += written;\r\n                    if (this.writePosition < this.tail.length) {\r\n                        this.tail = this.tail.subarray(written);\r\n                    } else {\r\n                        this.tail = null;\r\n                    }\r\n                }\r\n                currentPosition = this.audio.mozCurrentSampleOffset();\r\n                available = currentPosition + this.prebufferSize - this.writePosition;\r\n                if (available > 0) {\r\n                    buffer = new Float32Array(available);\r\n                    this.emit('refill', buffer);\r\n                    written = this.audio.mozWriteAudio(buffer);\r\n                    if (written < buffer.length) {\r\n                        this.tail = buffer.subarray(written);\r\n                    }\r\n                    this.writePosition += written;\r\n                }\r\n            };\r\n    \r\n            MozillaAudioDevice.prototype.destroy = function () {\r\n                return destroyTimer(this.timer);\r\n            };\r\n    \r\n            MozillaAudioDevice.prototype.getDeviceTime = function () {\r\n                return this.audio.mozCurrentSampleOffset() / this.channels;\r\n            };\r\n    \r\n            createTimer = function (fn, interval) {\r\n                var url, worker;\r\n                url = AVBuffer.makeBlobURL(\"setInterval(function() { postMessage('ping'); }, \" + interval + \");\");\r\n                if (url == null) {\r\n                    return setInterval(fn, interval);\r\n                }\r\n                worker = new Worker(url);\r\n                worker.onmessage = fn;\r\n                worker.url = url;\r\n                return worker;\r\n            };\r\n    \r\n            destroyTimer = function (timer) {\r\n                if (timer.terminate) {\r\n                    timer.terminate();\r\n                    return URL.revokeObjectURL(timer.url);\r\n                } else {\r\n                    return clearInterval(timer);\r\n                }\r\n            };\r\n    \r\n            return MozillaAudioDevice;\r\n    \r\n        })(EventEmitter);\r\n    \r\n        var Asset = AV.Asset = (function (_super) {\r\n            __extends(Asset, _super);\r\n    \r\n            function Asset(source) {\r\n                this.source = source;\r\n                this._decode = __bind(this._decode, this);\r\n                this.findDecoder = __bind(this.findDecoder, this);\r\n                this.probe = __bind(this.probe, this);\r\n                this.buffered = 0;\r\n                this.duration = null;\r\n                this.format = null;\r\n                this.metadata = null;\r\n                this.active = false;\r\n                this.demuxer = null;\r\n                this.decoder = null;\r\n                this.source.once('data', this.probe);\r\n                this.source.on('error', (function (_this) {\r\n                    return function (err) {\r\n                        _this.emit('error', err);\r\n                        return _this.stop();\r\n                    };\r\n                })(this));\r\n                this.source.on('progress', (function (_this) {\r\n                    return function (buffered) {\r\n                        _this.buffered = buffered;\r\n                        return _this.emit('buffer', _this.buffered);\r\n                    };\r\n                })(this));\r\n            }\r\n    \r\n            Asset.fromBuffer = function (buffer) {\r\n                return new Asset(new BufferSource(buffer));\r\n            };\r\n            Asset.fromBufferSource = function (serverUrl) {\r\n                return new AV.Asset(new AV.BufferSource());\r\n            };\r\n            Asset.prototype.start = function (decode) {\r\n                if (this.active) {\r\n                    return;\r\n                }\r\n                if (decode != null) {\r\n                    this.shouldDecode = decode;\r\n                }\r\n                if (this.shouldDecode == null) {\r\n                    this.shouldDecode = true;\r\n                }\r\n                this.active = true;\r\n                this.source.start();\r\n                if (this.decoder && this.shouldDecode) {\r\n                    return this._decode();\r\n                }\r\n            };\r\n    \r\n            Asset.prototype.stop = function () {\r\n                if (!this.active) {\r\n                    return;\r\n                }\r\n                this.active = false;\r\n                return this.source.pause();\r\n            };\r\n    \r\n            Asset.prototype.get = function (event, callback) {\r\n                if (event !== 'format' && event !== 'duration' && event !== 'metadata') {\r\n                    return;\r\n                }\r\n                if (this[event] != null) {\r\n                    return callback(this[event]);\r\n                } else {\r\n                    this.once(event, (function (_this) {\r\n                        return function (value) {\r\n                            _this.stop();\r\n                            return callback(value);\r\n                        };\r\n                    })(this));\r\n                    return this.start();\r\n                }\r\n            };\r\n    \r\n            Asset.prototype.decodePacket = function () {\r\n                return this.decoder.decode();\r\n            };\r\n    \r\n            Asset.prototype.decodeToBuffer = function (callback) {\r\n                var chunks, dataHandler, length;\r\n                length = 0;\r\n                chunks = [];\r\n                this.on('data', dataHandler = function (chunk) {\r\n                    length += chunk.length;\r\n                    return chunks.push(chunk);\r\n                });\r\n                this.once('end', function () {\r\n                    var buf, chunk, offset, _i, _len;\r\n                    buf = new Float32Array(length);\r\n                    offset = 0;\r\n                    for (_i = 0, _len = chunks.length; _i < _len; _i++) {\r\n                        chunk = chunks[_i];\r\n                        buf.set(chunk, offset);\r\n                        offset += chunk.length;\r\n                    }\r\n                    this.off('data', dataHandler);\r\n                    return callback(buf);\r\n                });\r\n                return this.start();\r\n            };\r\n    \r\n            Asset.prototype.probe = function (chunk) {\r\n                var demuxer;\r\n                if (!this.active) {\r\n                    return;\r\n                }\r\n                demuxer = Demuxer.find(chunk);\r\n                if (!demuxer) {\r\n                    return this.emit('error', 'A demuxer for this container was not found.');\r\n                }\r\n                this.demuxer = new demuxer(this.source, chunk);\r\n                this.demuxer.on('format', this.findDecoder);\r\n                this.demuxer.on('duration', (function (_this) {\r\n                    return function (duration) {\r\n                        _this.duration = duration;\r\n                        return _this.emit('duration', _this.duration);\r\n                    };\r\n                })(this));\r\n                this.demuxer.on('metadata', (function (_this) {\r\n                    return function (metadata) {\r\n                        _this.metadata = metadata;\r\n                        return _this.emit('metadata', _this.metadata);\r\n                    };\r\n                })(this));\r\n                return this.demuxer.on('error', (function (_this) {\r\n                    return function (err) {\r\n                        _this.emit('error', err);\r\n                        return _this.stop();\r\n                    };\r\n                })(this));\r\n            };\r\n    \r\n            Asset.prototype.findDecoder = function (format) {\r\n                var decoder, div;\r\n                this.format = format;\r\n                if (!this.active) {\r\n                    return;\r\n                }\r\n                this.emit('format', this.format);\r\n                decoder = Decoder.find(this.format.formatID);\r\n                if (!decoder) {\r\n                    return this.emit('error', \"A decoder for \" + this.format.formatID + \" was not found.\");\r\n                }\r\n                this.decoder = new decoder(this.demuxer, this.format);\r\n                if (this.format.floatingPoint) {\r\n                    this.decoder.on('data', (function (_this) {\r\n                        return function (buffer) {\r\n                            return _this.emit('data', buffer);\r\n                        };\r\n                    })(this));\r\n                } else {\r\n                    div = Math.pow(2, this.format.bitsPerChannel - 1);\r\n                    this.decoder.on('data', (function (_this) {\r\n                        return function (buffer) {\r\n                            var buf, i, sample, _i, _len;\r\n                            buf = new Float32Array(buffer.length);\r\n                            for (i = _i = 0, _len = buffer.length; _i < _len; i = ++_i) {\r\n                                sample = buffer[i];\r\n                                buf[i] = sample / div;\r\n                            }\r\n                            return _this.emit('data', buf);\r\n                        };\r\n                    })(this));\r\n                }\r\n                this.decoder.on('error', (function (_this) {\r\n                    return function (err) {\r\n                        _this.emit('error', err);\r\n                        return _this.stop();\r\n                    };\r\n                })(this));\r\n                this.decoder.on('end', (function (_this) {\r\n                    return function () {\r\n                        return _this.emit('end');\r\n                    };\r\n                })(this));\r\n                this.emit('decodeStart');\r\n                if (this.shouldDecode) {\r\n                    return this._decode();\r\n                }\r\n            };\r\n    \r\n            Asset.prototype._decode = function () {\r\n                while (this.decoder.decode() && this.active) {\r\n                    continue;\r\n                }\r\n                if (this.active) {\r\n                    return this.decoder.once('data', this._decode);\r\n                }\r\n            };\r\n    \r\n            Asset.prototype.destroy = function () {\r\n                var _ref, _ref1, _ref2;\r\n                this.stop();\r\n                if ((_ref = this.demuxer) != null) {\r\n                    _ref.off();\r\n                }\r\n                if ((_ref1 = this.decoder) != null) {\r\n                    _ref1.off();\r\n                }\r\n                if ((_ref2 = this.source) != null) {\r\n                    _ref2.off();\r\n                }\r\n                return this.off();\r\n            };\r\n    \r\n            return Asset;\r\n    \r\n        })(EventEmitter);\r\n    \r\n        var Resampler = AV.Resampler = (function () {\r\n            //JavaScript Audio Resampler\r\n            //Copyright (C) 2011-2015 Grant Galitz\r\n            //Released to Public Domain\r\n            function Resampler(fromSampleRate, toSampleRate, channels, inputBufferLength) {\r\n                this.fromSampleRate = +fromSampleRate;\r\n                this.toSampleRate = +toSampleRate;\r\n                this.channels = channels | 0;\r\n                this.inputBufferLength = inputBufferLength;\r\n                this.initialize();\r\n            }\r\n    \r\n            Resampler.prototype.initialize = function () {\r\n                //Perform some checks:\r\n                if (this.fromSampleRate > 0 && this.toSampleRate > 0 && this.channels > 0) {\r\n                    if (this.fromSampleRate == this.toSampleRate) {\r\n                        //Setup a resampler bypass:\r\n                        this.resampler = this.bypassResampler;    //Resampler just returns what was passed through.\r\n                        this.ratioWeight = 1;\r\n                    } else {\r\n                        this.ratioWeight = this.fromSampleRate / this.toSampleRate;\r\n                        if (this.fromSampleRate < this.toSampleRate) {\r\n                            /*\r\n                              Use generic linear interpolation if upsampling,\r\n                              as linear interpolation produces a gradient that we want\r\n                              and works fine with two input sample points per output in this case.\r\n                            */\r\n                            this.compileLinearInterpolationFunction();\r\n                            this.lastWeight = 1;\r\n                        } else {\r\n                            /*\r\n                              Custom resampler I wrote that doesn't skip samples\r\n                              like standard linear interpolation in high downsampling.\r\n                              This is more accurate than linear interpolation on downsampling.\r\n                            */\r\n                            this.compileMultiTapFunction();\r\n                            this.tailExists = false;\r\n                            this.lastWeight = 0;\r\n                        }\r\n    \r\n                        var outputBufferSize = (Math.ceil(this.inputBufferLength * this.toSampleRate / this.fromSampleRate / this.channels * 1.01) * this.channels) + this.channels;\r\n                        this.outputBuffer = new Float32Array(outputBufferSize);\r\n                        this.lastOutput = new Float32Array(this.channels);\r\n                    }\r\n                } else {\r\n                    throw(new Error(\"Invalid settings specified for the resampler.\"));\r\n                }\r\n            };\r\n    \r\n            Resampler.prototype.compileLinearInterpolationFunction = function () {\r\n                var toCompile = \"var outputOffset = 0;\\\r\n        var bufferLength = buffer.length;\\\r\n        if (bufferLength > 0) {\\\r\n          var weight = this.lastWeight;\\\r\n          var firstWeight = 0;\\\r\n          var secondWeight = 0;\\\r\n          var sourceOffset = 0;\\\r\n          var outputOffset = 0;\\\r\n          var outputBuffer = this.outputBuffer;\\\r\n          for (; weight < 1; weight += \" + this.ratioWeight + \") {\\\r\n            secondWeight = weight % 1;\\\r\n            firstWeight = 1 - secondWeight;\";\r\n                for (var channel = 0; channel < this.channels; ++channel) {\r\n                    toCompile += \"outputBuffer[outputOffset++] = (this.lastOutput[\" + channel + \"] * firstWeight) + (buffer[\" + channel + \"] * secondWeight);\";\r\n                }\r\n                toCompile += \"}\\\r\n          weight -= 1;\\\r\n          for (bufferLength -= \" + this.channels + \", sourceOffset = Math.floor(weight) * \" + this.channels + \"; sourceOffset < bufferLength;) {\\\r\n            secondWeight = weight % 1;\\\r\n            firstWeight = 1 - secondWeight;\";\r\n                for (var channel = 0; channel < this.channels; ++channel) {\r\n                    toCompile += \"outputBuffer[outputOffset++] = (buffer[sourceOffset\" + ((channel > 0) ? (\" + \" + channel) : \"\") + \"] * firstWeight) + (buffer[sourceOffset + \" + (this.channels + channel) + \"] * secondWeight);\";\r\n                }\r\n                toCompile += \"weight += \" + this.ratioWeight + \";\\\r\n            sourceOffset = Math.floor(weight) * \" + this.channels + \";\\\r\n          }\";\r\n                for (var channel = 0; channel < this.channels; ++channel) {\r\n                    toCompile += \"this.lastOutput[\" + channel + \"] = buffer[sourceOffset++];\";\r\n                }\r\n                toCompile += \"this.lastWeight = weight % 1;\\\r\n        }\\\r\n        return this.outputBuffer;\";\r\n    \r\n                this.resampler = Function(\"buffer\", toCompile);\r\n            };\r\n    \r\n            Resampler.prototype.compileMultiTapFunction = function () {\r\n                var toCompile = \"var outputOffset = 0;\\\r\n        var bufferLength = buffer.length;\\\r\n        if (bufferLength > 0) {\\\r\n          var weight = 0;\";\r\n                for (var channel = 0; channel < this.channels; ++channel) {\r\n                    toCompile += \"var output\" + channel + \" = 0;\"\r\n                }\r\n                toCompile += \"var actualPosition = 0;\\\r\n          var amountToNext = 0;\\\r\n          var alreadyProcessedTail = !this.tailExists;\\\r\n          this.tailExists = false;\\\r\n          var outputBuffer = this.outputBuffer;\\\r\n          var currentPosition = 0;\\\r\n          do {\\\r\n            if (alreadyProcessedTail) {\\\r\n              weight = \" + this.ratioWeight + \";\";\r\n                for (channel = 0; channel < this.channels; ++channel) {\r\n                    toCompile += \"output\" + channel + \" = 0;\"\r\n                }\r\n                toCompile += \"}\\\r\n            else {\\\r\n              weight = this.lastWeight;\";\r\n                for (channel = 0; channel < this.channels; ++channel) {\r\n                    toCompile += \"output\" + channel + \" = this.lastOutput[\" + channel + \"];\"\r\n                }\r\n                toCompile += \"alreadyProcessedTail = true;\\\r\n            }\\\r\n            while (weight > 0 && actualPosition < bufferLength) {\\\r\n              amountToNext = 1 + actualPosition - currentPosition;\\\r\n              if (weight >= amountToNext) {\";\r\n                for (channel = 0; channel < this.channels; ++channel) {\r\n                    toCompile += \"output\" + channel + \" += buffer[actualPosition++] * amountToNext;\"\r\n                }\r\n                toCompile += \"currentPosition = actualPosition;\\\r\n                weight -= amountToNext;\\\r\n              }\\\r\n              else {\";\r\n                for (channel = 0; channel < this.channels; ++channel) {\r\n                    toCompile += \"output\" + channel + \" += buffer[actualPosition\" + ((channel > 0) ? (\" + \" + channel) : \"\") + \"] * weight;\"\r\n                }\r\n                toCompile += \"currentPosition += weight;\\\r\n                weight = 0;\\\r\n                break;\\\r\n              }\\\r\n            }\\\r\n            if (weight <= 0) {\";\r\n                for (channel = 0; channel < this.channels; ++channel) {\r\n                    toCompile += \"outputBuffer[outputOffset++] = output\" + channel + \" / \" + this.ratioWeight + \";\"\r\n                }\r\n                toCompile += \"}\\\r\n            else {\\\r\n              this.lastWeight = weight;\";\r\n                for (channel = 0; channel < this.channels; ++channel) {\r\n                    toCompile += \"this.lastOutput[\" + channel + \"] = output\" + channel + \";\"\r\n                }\r\n                toCompile += \"this.tailExists = true;\\\r\n              break;\\\r\n            }\\\r\n          } while (actualPosition < bufferLength);\\\r\n        }\\\r\n        return this.outputBuffer;\";\r\n    \r\n                this.resampler = Function(\"buffer\", toCompile);\r\n            };\r\n    \r\n            Resampler.prototype.bypassResampler = function (inputBuffer) {\r\n                return inputBuffer;\r\n            };\r\n            return Resampler;\r\n        })();\r\n    \r\n        var WebAudioDevice = AV.WebAudioDevice = (function (_super) {\r\n            var createProcessor, sharedContext = null, AudioContext = global.AudioContext || global.webkitAudioContext;\r\n    \r\n            __extends(WebAudioDevice, _super);\r\n    \r\n            AudioDevice.register(WebAudioDevice);\r\n    \r\n            WebAudioDevice.supported = AudioContext && (typeof AudioContext.prototype[createProcessor = 'createScriptProcessor'] === 'function' || typeof AudioContext.prototype[createProcessor = 'createJavaScriptNode'] === 'function');\r\n    \r\n            WebAudioDevice.init = function(){\r\n                if(WebAudioDevice.supported){\r\n                    if(!sharedContext) {\r\n                        sharedContext = new AudioContext();\r\n                        var node = sharedContext[createProcessor](4096, 1, 1);\r\n                        node.connect(sharedContext.destination);\r\n                    } else {\r\n                        if(sharedContext.state === \"suspended\") {\r\n                            sharedContext.close();\r\n                            sharedContext = new AudioContext();\r\n                            var node = sharedContext[createProcessor](4096, 1, 1);\r\n                            node.connect(sharedContext.destination);\r\n                        }\r\n                    }\r\n                }\r\n            };\r\n    \r\n            function WebAudioDevice(sampleRate, channels) {\r\n                var buffSize = 4096; //default is 4096\r\n                this.sampleRate = sampleRate;\r\n                this.channels = channels;\r\n                this.refill = __bind(this.refill, this);\r\n                this.context = sharedContext != null ? sharedContext : sharedContext = new AudioContext;\r\n                this.deviceSampleRate = this.context.sampleRate;\r\n                this.bufferSize = Math.ceil(buffSize / (this.deviceSampleRate / this.sampleRate) * this.channels);\r\n                this.bufferSize += this.bufferSize % this.channels;\r\n                if (this.deviceSampleRate !== this.sampleRate) {\r\n                    this.resampler = new Resampler(this.sampleRate, this.deviceSampleRate, this.channels, this.bufferSize);\r\n                }\r\n                this.node = this.context[createProcessor](buffSize, this.channels, this.channels);\r\n                this.node.onaudioprocess = this.refill;\r\n                this.node.connect(this.context.destination);\r\n            }\r\n    \r\n            WebAudioDevice.prototype.refill = function (event) {\r\n                var channelCount, channels, data, i, n, outputBuffer, _i, _j, _k, _ref;\r\n                outputBuffer = event.outputBuffer;\r\n                channelCount = outputBuffer.numberOfChannels;\r\n                channels = new Array(channelCount);\r\n                for (i = _i = 0; _i < channelCount; i = _i += 1) {\r\n                    channels[i] = outputBuffer.getChannelData(i);\r\n                }\r\n                data = new Float32Array(this.bufferSize);\r\n                this.emit('refill', data);\r\n                if (this.resampler) {\r\n                    data = this.resampler.resampler(data);\r\n                }\r\n                for (i = _j = 0, _ref = outputBuffer.length; _j < _ref; i = _j += 1) {\r\n                    for (n = _k = 0; _k < channelCount; n = _k += 1) {\r\n                        channels[n][i] = data[i * channelCount + n];\r\n                    }\r\n                }\r\n            };\r\n    \r\n            WebAudioDevice.prototype.destroy = function () {\r\n                return this.node.disconnect(0);\r\n            };\r\n    \r\n            WebAudioDevice.prototype.getDeviceTime = function () {\r\n                return this.context.currentTime * this.sampleRate;\r\n            };\r\n    \r\n            return WebAudioDevice;\r\n    \r\n        })(EventEmitter);\r\n    \r\n        var Filter = AV.Filter = (function () {\r\n            function Filter(context, key) {\r\n                if (context && key) {\r\n                    Object.defineProperty(this, 'value', {\r\n                        get: function () {\r\n                            return context[key];\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n    \r\n            Filter.prototype.process = function (buffer) {\r\n            };\r\n    \r\n            return Filter;\r\n    \r\n        })();\r\n    \r\n        var BalanceFilter = AV.BalanceFilter = (function(_super) {\r\n            __extends(BalanceFilter, _super);\r\n    \r\n            function BalanceFilter() {\r\n                return BalanceFilter.__super__.constructor.apply(this, arguments);\r\n            }\r\n    \r\n            BalanceFilter.prototype.process = function(buffer) {\r\n                var i, pan, _i, _ref;\r\n                if (this.value === 0) {\r\n                    return;\r\n                }\r\n                pan = Math.max(-50, Math.min(50, this.value));\r\n                for (i = _i = 0, _ref = buffer.length; _i < _ref; i = _i += 2) {\r\n                    buffer[i] *= Math.min(1, (50 - pan) / 50);\r\n                    buffer[i + 1] *= Math.min(1, (50 + pan) / 50);\r\n                }\r\n            };\r\n    \r\n            return BalanceFilter;\r\n    \r\n        })(Filter);\r\n    \r\n        var VolumeFilter = AV.VolumeFilter = (function(_super) {\r\n            __extends(VolumeFilter, _super);\r\n    \r\n            function VolumeFilter() {\r\n                return VolumeFilter.__super__.constructor.apply(this, arguments);\r\n            }\r\n    \r\n            VolumeFilter.prototype.process = function(buffer) {\r\n                var i, vol, _i, _ref;\r\n                if (this.value >= 100) {\r\n                    return;\r\n                }\r\n                vol = Math.max(0, Math.min(100, this.value)) / 100;\r\n                for (i = _i = 0, _ref = buffer.length; _i < _ref; i = _i += 1) {\r\n                    buffer[i] *= vol;\r\n                }\r\n            };\r\n    \r\n            return VolumeFilter;\r\n    \r\n        })(Filter);\r\n    \r\n        AV.Player = (function(_super) {\r\n            __extends(Player, _super);\r\n    \r\n            function Player(asset) {\r\n                this.asset = asset;\r\n                this.startPlaying = __bind(this.startPlaying, this);\r\n                this.playing = false;\r\n                this.buffered = 0;\r\n                this.currentTime = 0;\r\n                this.duration = 0;\r\n                this.volume = 100;\r\n                this.pan = 0;\r\n                this.metadata = {};\r\n                this.filters = [new VolumeFilter(this, 'volume'), new BalanceFilter(this, 'pan')];\r\n                this.asset.on('buffer', (function(_this) {\r\n                    return function(buffered) {\r\n                        _this.buffered = buffered;\r\n                        return _this.emit('buffer', _this.buffered);\r\n                    };\r\n                })(this));\r\n                this.asset.on('decodeStart', (function(_this) {\r\n                    return function() {\r\n                        _this.queue = new Queue(_this.asset);\r\n                        return _this.queue.once('ready', _this.startPlaying);\r\n                    };\r\n                })(this));\r\n                this.asset.on('format', (function(_this) {\r\n                    return function(format) {\r\n                        _this.format = format;\r\n                        return _this.emit('format', _this.format);\r\n                    };\r\n                })(this));\r\n                this.asset.on('metadata', (function(_this) {\r\n                    return function(metadata) {\r\n                        _this.metadata = metadata;\r\n                        return _this.emit('metadata', _this.metadata);\r\n                    };\r\n                })(this));\r\n                this.asset.on('duration', (function(_this) {\r\n                    return function(duration) {\r\n                        _this.duration = duration;\r\n                        return _this.emit('duration', _this.duration);\r\n                    };\r\n                })(this));\r\n                this.asset.on('error', (function(_this) {\r\n                    return function(error) {\r\n                        return _this.emit('error', error);\r\n                    };\r\n                })(this));\r\n            }\r\n    \r\n            Player.fromBuffer = function(buffer) {\r\n                return new Player(Asset.fromBuffer(buffer));\r\n            };\r\n            Player.fromBufferSource = function () {\r\n                return new AV.Player(AV.Asset.fromBufferSource());\r\n            };\r\n            Player.prototype.preload = function() {\r\n                if (!this.asset) {\r\n                    return;\r\n                }\r\n                this.startedPreloading = true;\r\n                return this.asset.start(false);\r\n            };\r\n    \r\n            Player.prototype.play = function() {\r\n                var _ref;\r\n                if (this.playing) {\r\n                    return;\r\n                }\r\n                if (!this.startedPreloading) {\r\n                    this.preload();\r\n                }\r\n                this.playing = true;\r\n                return (_ref = this.device) != null ? _ref.start() : void 0;\r\n            };\r\n    \r\n            Player.prototype.pause = function() {\r\n                var _ref;\r\n                if (!this.playing) {\r\n                    return;\r\n                }\r\n                this.playing = false;\r\n                return (_ref = this.device) != null ? _ref.stop() : void 0;\r\n            };\r\n    \r\n            Player.prototype.togglePlayback = function() {\r\n                if (this.playing) {\r\n                    return this.pause();\r\n                } else {\r\n                    return this.play();\r\n                }\r\n            };\r\n    \r\n            Player.prototype.stop = function() {\r\n                var _ref;\r\n                this.pause();\r\n                this.asset.stop();\r\n                return (_ref = this.device) != null ? _ref.destroy() : void 0;\r\n            };\r\n    \r\n            Player.prototype.seek = function(timestamp) {\r\n                var _ref;\r\n                if ((_ref = this.device) != null) {\r\n                    _ref.stop();\r\n                }\r\n                this.queue.once('ready', (function(_this) {\r\n                    return function() {\r\n                        var _ref1, _ref2;\r\n                        if ((_ref1 = _this.device) != null) {\r\n                            _ref1.seek(_this.currentTime);\r\n                        }\r\n                        if (_this.playing) {\r\n                            return (_ref2 = _this.device) != null ? _ref2.start() : void 0;\r\n                        }\r\n                    };\r\n                })(this));\r\n                timestamp = (timestamp / 1000) * this.format.sampleRate;\r\n                timestamp = this.asset.decoder.seek(timestamp);\r\n                this.currentTime = timestamp / this.format.sampleRate * 1000 | 0;\r\n                this.queue.reset();\r\n                return this.currentTime;\r\n            };\r\n    \r\n            Player.prototype.startPlaying = function() {\r\n                var frame, frameOffset;\r\n                frame = this.queue.read();\r\n                frameOffset = 0;\r\n                this.device = new AudioDevice(this.format.sampleRate, this.format.channelsPerFrame);\r\n                this.device.on('timeUpdate', (function(_this) {\r\n                    return function(currentTime) {\r\n                        _this.currentTime = currentTime;\r\n                        return _this.emit('progress', _this.currentTime);\r\n                    };\r\n                })(this));\r\n                this.refill = (function(_this) {\r\n                    return function(buffer) {\r\n                        var bufferOffset, filter, i, max, _i, _j, _len, _ref;\r\n                        if (!_this.playing) {\r\n                            return;\r\n                        }\r\n                        if (!frame) {\r\n                            frame = _this.queue.read();\r\n                            frameOffset = 0;\r\n                        }\r\n                        bufferOffset = 0;\r\n                        while (frame && bufferOffset < buffer.length) {\r\n                            max = Math.min(frame.length - frameOffset, buffer.length - bufferOffset);\r\n                            for (i = _i = 0; _i < max; i = _i += 1) {\r\n                                buffer[bufferOffset++] = frame[frameOffset++];\r\n                            }\r\n                            if (frameOffset === frame.length) {\r\n                                frame = _this.queue.read();\r\n                                frameOffset = 0;\r\n                            }\r\n                        }\r\n                        _ref = _this.filters;\r\n                        for (_j = 0, _len = _ref.length; _j < _len; _j++) {\r\n                            filter = _ref[_j];\r\n                            filter.process(buffer);\r\n                        }\r\n                        if (!frame) {\r\n                            //David: live audio. don't stop.\r\n                            /**\r\n                             if (_this.queue.ended) {\r\n                _this.currentTime = _this.duration;\r\n                _this.emit('progress', _this.currentTime);\r\n                _this.emit('end');\r\n                _this.stop();\r\n              } else {\r\n                _this.device.stop();\r\n              }\r\n                             **/\r\n                        }\r\n                    };\r\n                })(this);\r\n                this.device.on('refill', this.refill);\r\n                if (this.playing) {\r\n                    this.device.start();\r\n                }\r\n                return this.emit('ready');\r\n            };\r\n    \r\n            Player.prototype.destroy = function() {\r\n                var _ref, _ref1;\r\n                this.stop();\r\n                if ((_ref = this.device) != null) {\r\n                    _ref.off();\r\n                }\r\n                if ((_ref1 = this.asset) != null) {\r\n                    _ref1.destroy();\r\n                }\r\n                return this.off();\r\n            };\r\n    \r\n            return Player;\r\n    \r\n        })(EventEmitter);\r\n    \r\n        var Queue = AV.Queue = (function(_super) {\r\n            __extends(Queue, _super);\r\n    \r\n            function Queue(asset) {\r\n                this.asset = asset;\r\n                this.write = __bind(this.write, this);\r\n                this.readyMark = 2;  //David: buffer size. default = 64\r\n                this.finished = false;\r\n                this.buffering = true;\r\n                this.ended = false;\r\n                this.buffers = [];\r\n                this.asset.on('data', this.write);\r\n                this.asset.on('end', (function(_this) {\r\n                    return function() {\r\n                        return _this.ended = true;\r\n                    };\r\n                })(this));\r\n                this.asset.decodePacket();\r\n            }\r\n    \r\n            Queue.prototype.write = function(buffer) {\r\n                if (buffer) {\r\n                    this.buffers.push(buffer);\r\n                }\r\n                if (this.buffering) {\r\n                    if (this.buffers.length >= this.readyMark || this.ended) {\r\n                        this.buffering = false;\r\n                        return this.emit('ready');\r\n                    } else {\r\n                        return this.asset.decodePacket();\r\n                    }\r\n                }\r\n            };\r\n    \r\n            Queue.prototype.read = function() {\r\n                if (this.buffers.length === 0) {\r\n                    return null;\r\n                }\r\n                this.asset.decodePacket();\r\n                return this.buffers.shift();\r\n            };\r\n    \r\n            Queue.prototype.reset = function() {\r\n                this.buffers.length = 0;\r\n                this.buffering = true;\r\n                return this.asset.decodePacket();\r\n            };\r\n    \r\n            return Queue;\r\n    \r\n        })(EventEmitter);\r\n    \r\n        var BufferSource = AV.BufferSource = (function(_super) {\r\n            var clearImmediate, setImmediate;\r\n    \r\n            __extends(BufferSource, _super);\r\n    \r\n            function BufferSource(input) {\r\n                this.loop = __bind(this.loop, this);\r\n                if (input instanceof BufferList) {\r\n                    this.list = input;\r\n                } else {\r\n                    this.list = new BufferList;\r\n                    if (input != null) //David's modify\r\n                        this.list.append(new AVBuffer(input));\r\n                }\r\n                this.paused = true;\r\n            }\r\n    \r\n            setImmediate = global.setImmediate || function (fn) {\r\n                return global.setTimeout(fn, 0);\r\n            };\r\n    \r\n            clearImmediate = global.clearImmediate || function (timer) {\r\n                return global.clearTimeout(timer);\r\n            };\r\n    \r\n            BufferSource.prototype.start = function () {\r\n                this.paused = false;\r\n                return null;  //David's modify.\r\n                //return this._timer = setImmediate(this.loop);\r\n            };\r\n    \r\n            BufferSource.prototype.add = function (data) {  //David's added.\r\n                this.bytesLoaded += data.length;\r\n                //console.log(\"bytesLoaded:\", this.bytesLoaded);\r\n                this.list.append(new AVBuffer(data));\r\n                this.emit('data', this.list.first);\r\n                this.list.advance()\r\n            };\r\n    \r\n            BufferSource.prototype.loop = function () {\r\n                this.emit('progress', (this.list.numBuffers - this.list.availableBuffers + 1) / this.list.numBuffers * 100 | 0);\r\n                this.emit('data', this.list.first);\r\n                if (this.list.advance()) {\r\n                    return setImmediate(this.loop);\r\n                } else {\r\n                    return this.emit('end');\r\n                }\r\n            };\r\n    \r\n            BufferSource.prototype.pause = function () {\r\n                clearImmediate(this._timer);\r\n                return this.paused = true;\r\n            };\r\n    \r\n            BufferSource.prototype.reset = function () {\r\n                this.pause();\r\n                return this.list.rewind();\r\n            };\r\n    \r\n            return BufferSource;\r\n    \r\n        })(EventEmitter);\r\n    })(gwin);\r\n    /*\r\n     * AAC.js - Advanced Audio Coding decoder in JavaScript\r\n     * Created by Devon Govett\r\n     * Copyright (c) 2012, Official.fm Labs\r\n     *\r\n     * AAC.js is free software; you can redistribute it and/or modify it\r\n     * under the terms of the GNU Lesser General Public License as\r\n     * published by the Free Software Foundation; either version 3 of the\r\n     * License, or (at your option) any later version.\r\n     *\r\n     * AAC.js is distributed in the hope that it will be useful, but WITHOUT\r\n     * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\r\n     * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General\r\n     * Public License for more details.\r\n     *\r\n     * You should have received a copy of the GNU Lesser General Public\r\n     * License along with this library.\r\n     * If not, see <http://www.gnu.org/licenses/>.\r\n     */\r\n    (function (global) {\r\n        var AV = global.AV;\r\n    \r\n        var ADTSDemuxer = AV.Demuxer.extend(function () {\r\n            AV.Demuxer.register(this);\r\n    \r\n            this.probe = function (stream) {\r\n                var offset = stream.offset;\r\n    \r\n                // attempt to find ADTS syncword\r\n                while (stream.available(2)) {\r\n                    if ((stream.readUInt16() & 0xfff6) === 0xfff0) {\r\n                        stream.seek(offset);\r\n                        return true;\r\n                    }\r\n                }\r\n    \r\n                stream.seek(offset);\r\n                return false;\r\n            };\r\n    \r\n            this.prototype.init = function () {\r\n                this.bitstream = new AV.Bitstream(this.stream);\r\n            };\r\n    \r\n            // Reads an ADTS header\r\n            // See http://wiki.multimedia.cx/index.php?title=ADTS\r\n            this.readHeader = function (stream) {\r\n                if (stream.read(12) !== 0xfff)\r\n                    throw new Error('Invalid ADTS header.');\r\n    \r\n                var ret = {};\r\n                stream.advance(3); // mpeg version and layer\r\n                var protectionAbsent = !!stream.read(1);\r\n    \r\n                ret.profile = stream.read(2) + 1;\r\n                ret.samplingIndex = stream.read(4);\r\n    \r\n                stream.advance(1); // private\r\n                ret.chanConfig = stream.read(3);\r\n                stream.advance(4); // original/copy, home, copywrite, and copywrite start\r\n    \r\n                ret.frameLength = stream.read(13);\r\n                stream.advance(11); // fullness\r\n    \r\n                ret.numFrames = stream.read(2) + 1;\r\n    \r\n                if (!protectionAbsent)\r\n                    stream.advance(16);\r\n    \r\n                return ret;\r\n            };\r\n    \r\n            this.prototype.readChunk = function () {\r\n                if (!this.sentHeader) {\r\n                    var offset = this.stream.offset;\r\n                    var header = ADTSDemuxer.readHeader(this.bitstream);\r\n    \r\n                    this.emit('format', {\r\n                        formatID: 'aac ',\r\n                        sampleRate: SAMPLE_RATES[header.samplingIndex],\r\n                        channelsPerFrame: header.chanConfig,\r\n                        bitsPerChannel: 16\r\n                    });\r\n    \r\n                    // generate a magic cookie from the ADTS header\r\n                    var cookie = new Uint8Array(2);\r\n                    cookie[0] = (header.profile << 3) | ((header.samplingIndex >> 1) & 7);\r\n                    cookie[1] = ((header.samplingIndex & 1) << 7) | (header.chanConfig << 3);\r\n                    this.emit('cookie', new AV.Buffer(cookie));\r\n    \r\n                    this.stream.seek(offset);\r\n                    this.sentHeader = true;\r\n                }\r\n    \r\n                while (this.stream.available(1)) {\r\n                    var buffer = this.stream.readSingleBuffer(this.stream.remainingBytes());\r\n                    this.emit('data', buffer);\r\n                }\r\n            };\r\n        });\r\n    \r\n        // Channel Coupling Element\r\n        var CCEElement = (function () {\r\n            function CCEElement(config) {\r\n                this.ics = new ICStream(config);\r\n                this.channelPair = new Array(8);\r\n                this.idSelect = new Int32Array(8);\r\n                this.chSelect = new Int32Array(8);\r\n                this.gain = new Array(16);\r\n            }\r\n    \r\n            CCEElement.BEFORE_TNS = 0;\r\n            CCEElement.AFTER_TNS = 1;\r\n            CCEElement.AFTER_IMDCT = 2;\r\n    \r\n            var CCE_SCALE = new Float32Array([\r\n                1.09050773266525765921,\r\n                1.18920711500272106672,\r\n                1.4142135623730950488016887,\r\n                2.0\r\n            ]);\r\n    \r\n            CCEElement.prototype = {\r\n                decode: function (stream, config) {\r\n                    var channelPair = this.channelPair,\r\n                        idSelect = this.idSelect,\r\n                        chSelect = this.chSelect;\r\n    \r\n                    this.couplingPoint = 2 * stream.read(1);\r\n                    this.coupledCount = stream.read(3);\r\n    \r\n                    var gainCount = 0;\r\n                    for (var i = 0; i <= this.coupledCount; i++) {\r\n                        gainCount++;\r\n                        channelPair[i] = stream.read(1);\r\n                        idSelect[i] = stream.read(4);\r\n    \r\n                        if (channelPair[i]) {\r\n                            chSelect[i] = stream.read(2);\r\n                            if (chSelect[i] === 3)\r\n                                gainCount++;\r\n    \r\n                        } else {\r\n                            chSelect[i] = 2;\r\n                        }\r\n                    }\r\n    \r\n                    this.couplingPoint += stream.read(1);\r\n                    this.couplingPoint |= (this.couplingPoint >>> 1);\r\n    \r\n                    var sign = stream.read(1),\r\n                        scale = CCE_SCALE[stream.read(2)];\r\n    \r\n                    this.ics.decode(stream, config, false);\r\n    \r\n                    var groupCount = this.ics.info.groupCount,\r\n                        maxSFB = this.ics.info.maxSFB,\r\n                        bandTypes = this.ics.bandTypes;\r\n    \r\n                    for (var i = 0; i < gainCount; i++) {\r\n                        var idx = 0,\r\n                            cge = 1,\r\n                            gain = 0,\r\n                            gainCache = 1;\r\n    \r\n                        if (i > 0) {\r\n                            cge = this.couplingPoint === CCEElement.AFTER_IMDCT ? 1 : stream.read(1);\r\n                            gain = cge ? Huffman.decodeScaleFactor(stream) - 60 : 0;\r\n                            gainCache = Math.pow(scale, -gain);\r\n                        }\r\n    \r\n                        var gain_i = this.gain[i] = new Float32Array(120);\r\n    \r\n                        if (this.couplingPoint === CCEElement.AFTER_IMDCT) {\r\n                            gain_i[0] = gainCache;\r\n                        } else {\r\n                            for (var g = 0; g < groupCount; g++) {\r\n                                for (var sfb = 0; sfb < maxSFB; sfb++) {\r\n                                    if (bandTypes[idx] !== ICStream.ZERO_BT) {\r\n                                        if (cge === 0) {\r\n                                            var t = Huffman.decodeScaleFactor(stream) - 60;\r\n                                            if (t !== 0) {\r\n                                                var s = 1;\r\n                                                t = gain += t;\r\n                                                if (!sign) {\r\n                                                    s -= 2 * (t & 0x1);\r\n                                                    t >>>= 1;\r\n                                                }\r\n                                                gainCache = Math.pow(scale, -t) * s;\r\n                                            }\r\n                                        }\r\n                                        gain_i[idx++] = gainCache;\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n    \r\n                applyIndependentCoupling: function (index, data) {\r\n                    var gain = this.gain[index][0],\r\n                        iqData = this.ics.data;\r\n    \r\n                    for (var i = 0; i < data.length; i++) {\r\n                        data[i] += gain * iqData[i];\r\n                    }\r\n                },\r\n    \r\n                applyDependentCoupling: function (index, data) {\r\n                    var info = this.ics.info,\r\n                        swbOffsets = info.swbOffsets,\r\n                        groupCount = info.groupCount,\r\n                        maxSFB = info.maxSFB,\r\n                        bandTypes = this.ics.bandTypes,\r\n                        iqData = this.ics.data;\r\n    \r\n                    var idx = 0,\r\n                        offset = 0,\r\n                        gains = this.gain[index];\r\n    \r\n                    for (var g = 0; g < groupCount; g++) {\r\n                        var len = info.groupLength[g];\r\n    \r\n                        for (var sfb = 0; sfb < maxSFB; sfb++, idx++) {\r\n                            if (bandTypes[idx] !== ICStream.ZERO_BT) {\r\n                                var gain = gains[idx];\r\n                                for (var group = 0; group < len; group++) {\r\n                                    for (var k = swbOffsets[sfb]; k < swbOffsets[swb + 1]; k++) {\r\n                                        data[offset + group * 128 + k] += gain * iqData[offset + group * 128 + k];\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n    \r\n                        offset += len * 128;\r\n                    }\r\n                }\r\n            };\r\n            return CCEElement;\r\n        })();\r\n    \r\n        // Channel Pair Element\r\n        var CPEElement = (function(){\r\n            function CPEElement(config) {\r\n                this.ms_used = [];\r\n                this.left = new ICStream(config);\r\n                this.right = new ICStream(config);\r\n            }\r\n    \r\n            var MAX_MS_MASK = 128;\r\n    \r\n            var MASK_TYPE_ALL_0 = 0,\r\n                MASK_TYPE_USED = 1,\r\n                MASK_TYPE_ALL_1 = 2,\r\n                MASK_TYPE_RESERVED = 3;\r\n    \r\n            CPEElement.prototype.decode = function(stream, config) {\r\n                var left = this.left,\r\n                    right = this.right,\r\n                    ms_used = this.ms_used;\r\n    \r\n                if (this.commonWindow = !!stream.read(1)) {\r\n                    left.info.decode(stream, config, true);\r\n                    right.info = left.info;\r\n    \r\n                    var mask = stream.read(2);\r\n                    this.maskPresent = !!mask;\r\n    \r\n                    switch (mask) {\r\n                        case MASK_TYPE_USED:\r\n                            var len = left.info.groupCount * left.info.maxSFB;\r\n                            for (var i = 0; i < len; i++) {\r\n                                ms_used[i] = !!stream.read(1);\r\n                            }\r\n                            break;\r\n    \r\n                        case MASK_TYPE_ALL_0:\r\n                        case MASK_TYPE_ALL_1:\r\n                            var val = !!mask;\r\n                            for (var i = 0; i < MAX_MS_MASK; i++) {\r\n                                ms_used[i] = val;\r\n                            }\r\n                            break;\r\n    \r\n                        default:\r\n                            throw new Error(\"Reserved ms mask type: \" + mask);\r\n                    }\r\n                } else {\r\n                    for (var i = 0; i < MAX_MS_MASK; i++)\r\n                        ms_used[i] = false;\r\n                }\r\n    \r\n                left.decode(stream, config, this.commonWindow);\r\n                right.decode(stream, config, this.commonWindow);\r\n            };\r\n    \r\n            return CPEElement;\r\n        })();\r\n    \r\n        var AACDecoder = AV.Decoder.extend(function() {\r\n            AV.Decoder.register('mp4a', this);\r\n            AV.Decoder.register('aac ', this);\r\n    \r\n            // AAC profiles\r\n            var AOT_AAC_MAIN = 1, // no\r\n                AOT_AAC_LC = 2,   // yes\r\n                AOT_AAC_LTP = 4,  // no\r\n                AOT_ESCAPE = 31;\r\n    \r\n            // Channel configurations\r\n            var CHANNEL_CONFIG_NONE = 0,\r\n                CHANNEL_CONFIG_MONO = 1,\r\n                CHANNEL_CONFIG_STEREO = 2,\r\n                CHANNEL_CONFIG_STEREO_PLUS_CENTER = 3,\r\n                CHANNEL_CONFIG_STEREO_PLUS_CENTER_PLUS_REAR_MONO = 4,\r\n                CHANNEL_CONFIG_FIVE = 5,\r\n                CHANNEL_CONFIG_FIVE_PLUS_ONE = 6,\r\n                CHANNEL_CONFIG_SEVEN_PLUS_ONE = 8;\r\n    \r\n            this.prototype.init = function() {\r\n                this.format.floatingPoint = true;\r\n            }\r\n    \r\n            this.prototype.setCookie = function(buffer) {\r\n                var data = AV.Stream.fromBuffer(buffer),\r\n                    stream = new AV.Bitstream(data);\r\n    \r\n                this.config = {};\r\n    \r\n                this.config.profile = stream.read(5);\r\n                if (this.config.profile === AOT_ESCAPE)\r\n                    this.config.profile = 32 + stream.read(6);\r\n    \r\n                this.config.sampleIndex = stream.read(4);\r\n                if (this.config.sampleIndex === 0x0f) {\r\n                    this.config.sampleRate = stream.read(24);\r\n                    for (var i = 0; i < SAMPLE_RATES.length; i++) {\r\n                        if (SAMPLE_RATES[i] === this.config.sampleRate) {\r\n                            this.config.sampleIndex = i;\r\n                            break;\r\n                        }\r\n                    }\r\n                } else {\r\n                    this.config.sampleRate = SAMPLE_RATES[this.config.sampleIndex];\r\n                }\r\n    \r\n                this.config.chanConfig = stream.read(4);\r\n                this.format.channelsPerFrame = this.config.chanConfig; // sometimes m4a files encode this wrong\r\n    \r\n                switch (this.config.profile) {\r\n                    case AOT_AAC_MAIN:\r\n                    case AOT_AAC_LC:\r\n                    case AOT_AAC_LTP:\r\n                        if (stream.read(1)) // frameLengthFlag\r\n                            throw new Error('frameLengthFlag not supported');\r\n    \r\n                        this.config.frameLength = 1024;\r\n    \r\n                        if (stream.read(1)) // dependsOnCoreCoder\r\n                            stream.advance(14); // coreCoderDelay\r\n    \r\n                        if (stream.read(1)) { // extensionFlag\r\n                            if (this.config.profile > 16) { // error resiliant profile\r\n                                this.config.sectionDataResilience = stream.read(1);\r\n                                this.config.scalefactorResilience = stream.read(1);\r\n                                this.config.spectralDataResilience = stream.read(1);\r\n                            }\r\n    \r\n                            stream.advance(1);\r\n                        }\r\n    \r\n                        if (this.config.chanConfig === CHANNEL_CONFIG_NONE) {\r\n                            stream.advance(4) // element_instance_tag\r\n                            throw new Error('PCE unimplemented');\r\n                        }\r\n    \r\n                        break;\r\n    \r\n                    default:\r\n                        throw new Error('AAC profile ' + this.config.profile + ' not supported.');\r\n                }\r\n    \r\n                this.filter_bank = new FilterBank(false, this.config.chanConfig);\r\n            };\r\n    \r\n            var SCE_ELEMENT = 0,\r\n                CPE_ELEMENT = 1,\r\n                CCE_ELEMENT = 2,\r\n                LFE_ELEMENT = 3,\r\n                DSE_ELEMENT = 4,\r\n                PCE_ELEMENT = 5,\r\n                FIL_ELEMENT = 6,\r\n                END_ELEMENT = 7;\r\n    \r\n            // The main decoding function.\r\n            this.prototype.readChunk = function() {\r\n                var stream = this.bitstream;\r\n    \r\n                // check if there is an ADTS header, and read it if so\r\n                if (stream.peek(12) === 0xfff)\r\n                    ADTSDemuxer.readHeader(stream);\r\n    \r\n                this.cces = [];\r\n                var elements = [],\r\n                    config = this.config,\r\n                    frameLength = config.frameLength,\r\n                    elementType = null;\r\n    \r\n                while ((elementType = stream.read(3)) !== END_ELEMENT) {\r\n                    var id = stream.read(4);\r\n    \r\n                    switch (elementType) {\r\n                        // single channel and low frequency elements\r\n                        case SCE_ELEMENT:\r\n                        case LFE_ELEMENT:\r\n                            var ics = new ICStream(this.config);\r\n                            ics.id = id;\r\n                            elements.push(ics);\r\n                            ics.decode(stream, config, false);\r\n                            break;\r\n    \r\n                        // channel pair element\r\n                        case CPE_ELEMENT:\r\n                            var cpe = new CPEElement(this.config);\r\n                            cpe.id = id;\r\n                            elements.push(cpe);\r\n                            cpe.decode(stream, config);\r\n                            break;\r\n    \r\n                        // channel coupling element\r\n                        case CCE_ELEMENT:\r\n                            var cce = new CCEElement(this.config);\r\n                            this.cces.push(cce);\r\n                            cce.decode(stream, config);\r\n                            break;\r\n    \r\n                        // data-stream element\r\n                        case DSE_ELEMENT:\r\n                            var align = stream.read(1),\r\n                                count = stream.read(8);\r\n    \r\n                            if (count === 255)\r\n                                count += stream.read(8);\r\n    \r\n                            if (align)\r\n                                stream.align();\r\n    \r\n                            // skip for now...\r\n                            stream.advance(count * 8);\r\n                            break;\r\n    \r\n                        // program configuration element\r\n                        case PCE_ELEMENT:\r\n                            throw new Error(\"TODO: PCE_ELEMENT\")\r\n                            break;\r\n    \r\n                        // filler element\r\n                        case FIL_ELEMENT:\r\n                            if (id === 15)\r\n                                id += stream.read(8) - 1;\r\n    \r\n                            // skip for now...\r\n                            stream.advance(id * 8);\r\n                            break;\r\n    \r\n                        default:\r\n                            throw new Error('Unknown element')\r\n                    }\r\n                }\r\n    \r\n                stream.align();\r\n                this.process(elements);\r\n    \r\n                // Interleave channels\r\n                var data = this.data,\r\n                    channels = data.length,\r\n                    output = new Float32Array(frameLength * channels),\r\n                    j = 0;\r\n    \r\n                for (var k = 0; k < frameLength; k++) {\r\n                    for (var i = 0; i < channels; i++) {\r\n                        output[j++] = data[i][k] / 32768;\r\n                    }\r\n                }\r\n    \r\n                return output;\r\n            };\r\n    \r\n            this.prototype.process = function(elements) {\r\n                var channels = this.config.chanConfig;\r\n    \r\n                // if (channels === 1 &&  psPresent)\r\n                // TODO: sbrPresent (2)\r\n                var mult = 1;\r\n    \r\n                var len = mult * this.config.frameLength;\r\n                var data = this.data = [];\r\n    \r\n                // Initialize channels\r\n                for (var i = 0; i < channels; i++) {\r\n                    data[i] = new Float32Array(len);\r\n                }\r\n    \r\n                var channel = 0;\r\n                for (var i = 0; i < elements.length && channel < channels; i++) {\r\n                    var e = elements[i];\r\n    \r\n                    if (e instanceof ICStream) { // SCE or LFE element\r\n                        channel += this.processSingle(e, channel);\r\n                    } else if (e instanceof CPEElement) {\r\n                        this.processPair(e, channel);\r\n                        channel += 2;\r\n                    } else if (e instanceof CCEElement) {\r\n                        channel++;\r\n                    } else {\r\n                        throw new Error(\"Unknown element found.\")\r\n                    }\r\n                }\r\n            };\r\n    \r\n            this.prototype.processSingle = function(element, channel) {\r\n                var profile = this.config.profile,\r\n                    info = element.info,\r\n                    data = element.data;\r\n    \r\n                if (profile === AOT_AAC_MAIN)\r\n                    throw new Error(\"Main prediction unimplemented\");\r\n    \r\n                if (profile === AOT_AAC_LTP)\r\n                    throw new Error(\"LTP prediction unimplemented\");\r\n    \r\n                this.applyChannelCoupling(element, CCEElement.BEFORE_TNS, data, null);\r\n    \r\n                if (element.tnsPresent)\r\n                    element.tns.process(element, data, false);\r\n    \r\n                this.applyChannelCoupling(element, CCEElement.AFTER_TNS, data, null);\r\n    \r\n                // filterbank\r\n                this.filter_bank.process(info, data, this.data[channel], channel);\r\n    \r\n                if (profile === AOT_AAC_LTP)\r\n                    throw new Error(\"LTP prediction unimplemented\");\r\n    \r\n                this.applyChannelCoupling(element, CCEElement.AFTER_IMDCT, this.data[channel], null);\r\n    \r\n                if (element.gainPresent)\r\n                    throw new Error(\"Gain control not implemented\");\r\n    \r\n                if (this.sbrPresent)\r\n                    throw new Error(\"SBR not implemented\");\r\n    \r\n                return 1;\r\n            };\r\n    \r\n            this.prototype.processPair = function(element, channel) {\r\n                var profile = this.config.profile,\r\n                    left = element.left,\r\n                    right = element.right,\r\n                    l_info = left.info,\r\n                    r_info = right.info,\r\n                    l_data = left.data,\r\n                    r_data = right.data;\r\n    \r\n                // Mid-side stereo\r\n                if (element.commonWindow && element.maskPresent)\r\n                    this.processMS(element, l_data, r_data);\r\n    \r\n                if (profile === AOT_AAC_MAIN)\r\n                    throw new Error(\"Main prediction unimplemented\");\r\n    \r\n                // Intensity stereo\r\n                this.processIS(element, l_data, r_data);\r\n    \r\n                if (profile === AOT_AAC_LTP)\r\n                    throw new Error(\"LTP prediction unimplemented\");\r\n    \r\n                this.applyChannelCoupling(element, CCEElement.BEFORE_TNS, l_data, r_data);\r\n    \r\n                if (left.tnsPresent)\r\n                    left.tns.process(left, l_data, false);\r\n    \r\n                if (right.tnsPresent)\r\n                    right.tns.process(right, r_data, false);\r\n    \r\n                this.applyChannelCoupling(element, CCEElement.AFTER_TNS, l_data, r_data);\r\n    \r\n                // filterbank\r\n                this.filter_bank.process(l_info, l_data, this.data[channel], channel);\r\n                this.filter_bank.process(r_info, r_data, this.data[channel + 1], channel + 1);\r\n    \r\n                if (profile === AOT_AAC_LTP)\r\n                    throw new Error(\"LTP prediction unimplemented\");\r\n    \r\n                this.applyChannelCoupling(element, CCEElement.AFTER_IMDCT, this.data[channel], this.data[channel + 1]);\r\n    \r\n                if (left.gainPresent)\r\n                    throw new Error(\"Gain control not implemented\");\r\n    \r\n                if (right.gainPresent)\r\n                    throw new Error(\"Gain control not implemented\");\r\n    \r\n                if (this.sbrPresent)\r\n                    throw new Error(\"SBR not implemented\");\r\n            };\r\n    \r\n            // Intensity stereo\r\n            this.prototype.processIS = function(element, left, right) {\r\n                var ics = element.right,\r\n                    info = ics.info,\r\n                    offsets = info.swbOffsets,\r\n                    windowGroups = info.groupCount,\r\n                    maxSFB = info.maxSFB,\r\n                    bandTypes = ics.bandTypes,\r\n                    sectEnd = ics.sectEnd,\r\n                    scaleFactors = ics.scaleFactors;\r\n    \r\n                var idx = 0, groupOff = 0;\r\n                for (var g = 0; g < windowGroups; g++) {\r\n                    for (var i = 0; i < maxSFB;) {\r\n                        var end = sectEnd[idx];\r\n    \r\n                        if (bandTypes[idx] === ICStream.INTENSITY_BT || bandTypes[idx] === ICStream.INTENSITY_BT2) {\r\n                            for (; i < end; i++, idx++) {\r\n                                var c = bandTypes[idx] === ICStream.INTENSITY_BT ? 1 : -1;\r\n                                if (element.maskPresent)\r\n                                    c *= element.ms_used[idx] ? -1 : 1;\r\n    \r\n                                var scale = c * scaleFactors[idx];\r\n                                for (var w = 0; w < info.groupLength[g]; w++) {\r\n                                    var off = groupOff + w * 128 + offsets[i],\r\n                                        len = offsets[i + 1] - offsets[i];\r\n    \r\n                                    for (var j = 0; j < len; j++) {\r\n                                        right[off + j] = left[off + j] * scale;\r\n                                    }\r\n                                }\r\n                            }\r\n                        } else  {\r\n                            idx += end - i;\r\n                            i = end;\r\n                        }\r\n                    }\r\n    \r\n                    groupOff += info.groupLength[g] * 128;\r\n                }\r\n            };\r\n    \r\n            // Mid-side stereo\r\n            this.prototype.processMS = function(element, left, right) {\r\n                var ics = element.left,\r\n                    info = ics.info,\r\n                    offsets = info.swbOffsets,\r\n                    windowGroups = info.groupCount,\r\n                    maxSFB = info.maxSFB,\r\n                    sfbCBl = ics.bandTypes,\r\n                    sfbCBr = element.right.bandTypes;\r\n    \r\n                var groupOff = 0, idx = 0;\r\n                for (var g = 0; g < windowGroups; g++) {\r\n                    for (var i = 0; i < maxSFB; i++, idx++) {\r\n                        if (element.ms_used[idx] && sfbCBl[idx] < ICStream.NOISE_BT && sfbCBr[idx] < ICStream.NOISE_BT) {\r\n                            for (var w = 0; w < info.groupLength[g]; w++) {\r\n                                var off = groupOff + w * 128 + offsets[i];\r\n                                for (var j = 0; j < offsets[i + 1] - offsets[i]; j++) {\r\n                                    var t = left[off + j] - right[off + j];\r\n                                    left[off + j] += right[off + j];\r\n                                    right[off + j] = t;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    groupOff += info.groupLength[g] * 128;\r\n                }\r\n            };\r\n    \r\n            this.prototype.applyChannelCoupling = function(element, couplingPoint, data1, data2) {\r\n                var cces = this.cces,\r\n                    isChannelPair = element instanceof CPEElement,\r\n                    applyCoupling = couplingPoint === CCEElement.AFTER_IMDCT ? 'applyIndependentCoupling' : 'applyDependentCoupling';\r\n    \r\n                for (var i = 0; i < cces.length; i++) {\r\n                    var cce = cces[i],\r\n                        index = 0;\r\n    \r\n                    if (cce.couplingPoint === couplingPoint) {\r\n                        for (var c = 0; c < cce.coupledCount; c++) {\r\n                            var chSelect = cce.chSelect[c];\r\n                            if (cce.channelPair[c] === isChannelPair && cce.idSelect[c] === element.id) {\r\n                                if (chSelect !== 1) {\r\n                                    cce[applyCoupling](index, data1);\r\n                                    if (chSelect) index++;\r\n                                }\r\n    \r\n                                if (chSelect !== 2)\r\n                                    cce[applyCoupling](index++, data2);\r\n    \r\n                            } else {\r\n                                index += 1 + (chSelect === 3 ? 1 : 0);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            };\r\n    \r\n        });\r\n    \r\n        var FFT = (function(){\r\n            function FFT(length) {\r\n                this.length = length;\r\n    \r\n                switch (length) {\r\n                    case 64:\r\n                        this.roots = generateFFTTableShort(64);\r\n                        break;\r\n    \r\n                    case 512:\r\n                        this.roots = generateFFTTableLong(512);\r\n                        break;\r\n    \r\n                    case 60:\r\n                        this.roots = generateFFTTableShort(60);\r\n                        break;\r\n    \r\n                    case 480:\r\n                        this.roots = generateFFTTableLong(480);\r\n                        break;\r\n    \r\n                    default:\r\n                        throw new Error(\"unexpected FFT length: \" + length);\r\n                }\r\n    \r\n                // processing buffers\r\n                this.rev = new Array(length);\r\n                for (var i = 0; i < length; i++) {\r\n                    this.rev[i] = new Float32Array(2);\r\n                }\r\n    \r\n                this.a = new Float32Array(2);\r\n                this.b = new Float32Array(2);\r\n                this.c = new Float32Array(2);\r\n                this.d = new Float32Array(2);\r\n                this.e1 = new Float32Array(2);\r\n                this.e2 = new Float32Array(2);\r\n            }\r\n    \r\n            function generateFFTTableShort(len) {\r\n                var t = 2 * Math.PI / len,\r\n                    cosT = Math.cos(t),\r\n                    sinT = Math.sin(t),\r\n                    f = new Array(len);\r\n    \r\n                for (var i = 0; i < len; i++) {\r\n                    f[i] = new Float32Array(2);\r\n                }\r\n    \r\n                f[0][0] = 1;\r\n                f[0][1] = 0;\r\n                var lastImag = 0;\r\n    \r\n                for (var i = 1; i < len; i++) {\r\n                    f[i][0] = f[i - 1][0] * cosT + lastImag * sinT;\r\n                    lastImag = lastImag * cosT - f[i - 1][0] * sinT;\r\n                    f[i][1] = -lastImag;\r\n                }\r\n    \r\n                return f;\r\n            }\r\n    \r\n            function generateFFTTableLong(len) {\r\n                var t = 2 * Math.PI / len,\r\n                    cosT = Math.cos(t),\r\n                    sinT = Math.sin(t),\r\n                    f = new Array(len);\r\n    \r\n                for (var i = 0; i < len; i++) {\r\n                    f[i] = new Float32Array(3);\r\n                }\r\n    \r\n                f[0][0] = 1;\r\n                f[0][1] = 0;\r\n                f[0][2] = 0;\r\n    \r\n                for (var i = 1; i < len; i++) {\r\n                    f[i][0] = f[i - 1][0] * cosT + f[i - 1][2] * sinT;\r\n                    f[i][2] = f[i - 1][2] * cosT - f[i - 1][0] * sinT;\r\n                    f[i][1] = -f[i][2];\r\n                }\r\n    \r\n                return f;\r\n            }\r\n    \r\n            FFT.prototype.process = function(input, forward) {\r\n                var length = this.length,\r\n                    imOffset = (forward ? 2 : 1),\r\n                    scale = (forward ? length : 1),\r\n                    rev = this.rev,\r\n                    roots = this.roots;\r\n    \r\n                // bit-reversal\r\n                var ii = 0;\r\n                for (var i = 0; i < length; i++) {\r\n                    rev[i][0] = input[ii][0];\r\n                    rev[i][1] = input[ii][1];\r\n    \r\n                    var k = length >>> 1;\r\n                    while (ii >= k && k > 0) {\r\n                        ii -= k;\r\n                        k >>= 1;\r\n                    }\r\n    \r\n                    ii += k;\r\n                }\r\n    \r\n                var a = this.a,\r\n                    b = this.b,\r\n                    c = this.c,\r\n                    d = this.d,\r\n                    e1 = this.e1,\r\n                    e2 = this.e2,\r\n                    tmpInputI;\r\n    \r\n                for (var i = 0; i < length; i++) {\r\n                    input[i][0] = rev[i][0];\r\n                    input[i][1] = rev[i][1];\r\n                }\r\n    \r\n                // bottom base-4 round\r\n                for (var i = 0; i < length; i += 4) {\r\n                    tmpInputI = input[i];\r\n                    a[0] = tmpInputI[0] + input[i + 1][0];\r\n                    a[1] = tmpInputI[1] + input[i + 1][1];\r\n                    b[0] = input[i + 2][0] + input[i + 3][0];\r\n                    b[1] = input[i + 2][1] + input[i + 3][1];\r\n                    c[0] = tmpInputI[0] - input[i + 1][0];\r\n                    c[1] = tmpInputI[1] - input[i + 1][1];\r\n                    d[0] = input[i + 2][0] - input[i + 3][0];\r\n                    d[1] = input[i + 2][1] - input[i + 3][1];\r\n                    tmpInputI[0] = a[0] + b[0];\r\n                    tmpInputI[1] = a[1] + b[1];\r\n                    input[i + 2][0] = a[0] - b[0];\r\n                    input[i + 2][1] = a[1] - b[1];\r\n    \r\n                    e1[0] = c[0] - d[1];\r\n                    e1[1] = c[1] + d[0];\r\n                    e2[0] = c[0] + d[1];\r\n                    e2[1] = c[1] - d[0];\r\n    \r\n                    if (forward) {\r\n                        input[i + 1][0] = e2[0];\r\n                        input[i + 1][1] = e2[1];\r\n                        input[i + 3][0] = e1[0];\r\n                        input[i + 3][1] = e1[1];\r\n                    } else {\r\n                        input[i + 1][0] = e1[0];\r\n                        input[i + 1][1] = e1[1];\r\n                        input[i + 3][0] = e2[0];\r\n                        input[i + 3][1] = e2[1];\r\n                    }\r\n                }\r\n    \r\n                // iterations from bottom to top\r\n                for (var i = 4; i < length; i <<= 1) {\r\n                    var shift = i << 1,\r\n                        m = length / shift;\r\n    \r\n                    for(var j = 0; j < length; j += shift) {\r\n                        for(var k = 0; k < i; k++) {\r\n                            var km = k * m, tmpI = input[i + j + k], tmpJK = input[j + k],\r\n                                rootRe = roots[km][0],\r\n                                rootIm = roots[km][imOffset],\r\n                                zRe = tmpI[0] * rootRe - tmpI[1] * rootIm,\r\n                                zIm = tmpI[0] * rootIm + tmpI[1] * rootRe;\r\n    \r\n                            tmpI[0] = (tmpJK[0] - zRe) * scale;\r\n                            tmpI[1] = (tmpJK[1] - zIm) * scale;\r\n                            tmpJK[0] = (tmpJK[0] + zRe) * scale;\r\n                            tmpJK[1] = (tmpJK[1] + zIm) * scale;\r\n                        }\r\n                    }\r\n                }\r\n            };\r\n    \r\n            return FFT;\r\n        })();\r\n    \r\n        var FilterBank= (function() {\r\n            function FilterBank(smallFrames, channels) {\r\n                if (smallFrames) {\r\n                    throw new Error(\"WHA?? No small frames allowed.\");\r\n                }\r\n    \r\n                this.length = 1024;\r\n                this.shortLength = 128;\r\n    \r\n                this.mid = (this.length - this.shortLength) / 2;\r\n                this.trans = this.shortLength / 2;\r\n    \r\n                this.mdctShort = new MDCT(this.shortLength * 2);\r\n                this.mdctLong = new MDCT(this.length * 2);\r\n    \r\n                this.overlaps = new Array(channels);\r\n                for (var i = 0; i < channels; i++) {\r\n                    this.overlaps[i] = new Float32Array(this.length);\r\n                }\r\n    \r\n                this.buf = new Float32Array(2 * this.length);\r\n            }\r\n    \r\n            function generateSineWindow(len) {\r\n                var d = new Float32Array(len);\r\n                for (var i = 0; i < len; i++) {\r\n                    d[i] = Math.sin((i + 0.5) * (Math.PI / (2.0 * len)))\r\n                }\r\n                return d;\r\n            }\r\n    \r\n            function generateKBDWindow(alpha, len) {\r\n                var PIN = Math.PI / len,\r\n                    out = new Float32Array(len),\r\n                    sum = 0,\r\n                    f = new Float32Array(len),\r\n                    alpha2 = (alpha * PIN) * (alpha * PIN);\r\n    \r\n                for (var n = 0; n < len; n++) {\r\n                    var tmp = n * (len - n) * alpha2,\r\n                        bessel = 1;\r\n    \r\n                    for (var j = 50; j > 0; j--) {\r\n                        bessel = bessel * tmp / (j * j) + 1;\r\n                    }\r\n    \r\n                    sum += bessel;\r\n                    f[n] = sum;\r\n                }\r\n    \r\n                sum++;\r\n                for (var n = 0; n < len; n++) {\r\n                    out[n] = Math.sqrt(f[n] / sum);\r\n                }\r\n    \r\n                return out;\r\n            }\r\n    \r\n            var SINE_1024 = generateSineWindow(1024),\r\n                SINE_128 = generateSineWindow(128),\r\n                KBD_1024 = generateKBDWindow(4, 1024),\r\n                KBD_128 = generateKBDWindow(6, 128),\r\n                LONG_WINDOWS = [SINE_1024, KBD_1024],\r\n                SHORT_WINDOWS = [SINE_128, KBD_128];\r\n    \r\n            FilterBank.prototype.process = function (info, input, output, channel) {\r\n                var overlap = this.overlaps[channel],\r\n                    windowShape = info.windowShape[1],\r\n                    windowShapePrev = info.windowShape[0],\r\n                    longWindows = LONG_WINDOWS[windowShape],\r\n                    shortWindows = SHORT_WINDOWS[windowShape],\r\n                    longWindowsPrev = LONG_WINDOWS[windowShapePrev],\r\n                    shortWindowsPrev = SHORT_WINDOWS[windowShapePrev],\r\n                    length = this.length,\r\n                    shortLen = this.shortLength,\r\n                    mid = this.mid,\r\n                    trans = this.trans,\r\n                    buf = this.buf,\r\n                    mdctLong = this.mdctLong,\r\n                    mdctShort = this.mdctShort;\r\n    \r\n                switch (info.windowSequence) {\r\n                    case ICStream.ONLY_LONG_SEQUENCE:\r\n                        mdctLong.process(input, 0, buf, 0);\r\n    \r\n                        // add second half output of previous frame to windowed output of current frame\r\n                        for (var i = 0; i < length; i++) {\r\n                            output[i] = overlap[i] + (buf[i] * longWindowsPrev[i]);\r\n                        }\r\n    \r\n                        // window the second half and save as overlap for next frame\r\n                        for (var i = 0; i < length; i++) {\r\n                            overlap[i] = buf[length + i] * longWindows[length - 1 - i];\r\n                        }\r\n    \r\n                        break;\r\n    \r\n                    case ICStream.LONG_START_SEQUENCE:\r\n                        mdctLong.process(input, 0, buf, 0);\r\n    \r\n                        // add second half output of previous frame to windowed output of current frame\r\n                        for (var i = 0; i < length; i++) {\r\n                            output[i] = overlap[i] + (buf[i] * longWindowsPrev[i]);\r\n                        }\r\n    \r\n                        // window the second half and save as overlap for next frame\r\n                        for (var i = 0; i < mid; i++) {\r\n                            overlap[i] = buf[length + i];\r\n                        }\r\n    \r\n                        for (var i = 0; i < shortLen; i++) {\r\n                            overlap[mid + i] = buf[length + mid + i] * shortWindows[shortLen - i - 1];\r\n                        }\r\n    \r\n                        for (var i = 0; i < mid; i++) {\r\n                            overlap[mid + shortLen + i] = 0;\r\n                        }\r\n    \r\n                        break;\r\n    \r\n                    case ICStream.EIGHT_SHORT_SEQUENCE:\r\n                        for (var i = 0; i < 8; i++) {\r\n                            mdctShort.process(input, i * shortLen, buf, 2 * i * shortLen);\r\n                        }\r\n    \r\n                        // add second half output of previous frame to windowed output of current frame\r\n                        for (var i = 0; i < mid; i++) {\r\n                            output[i] = overlap[i];\r\n                        }\r\n    \r\n                        for (var i = 0; i < shortLen; i++) {\r\n                            output[mid + i] = overlap[mid + i] + buf[i] * shortWindowsPrev[i];\r\n                            output[mid + 1 * shortLen + i] = overlap[mid + shortLen * 1 + i] + (buf[shortLen * 1 + i] * shortWindows[shortLen - 1 - i]) + (buf[shortLen * 2 + i] * shortWindows[i]);\r\n                            output[mid + 2 * shortLen + i] = overlap[mid + shortLen * 2 + i] + (buf[shortLen * 3 + i] * shortWindows[shortLen - 1 - i]) + (buf[shortLen * 4 + i] * shortWindows[i]);\r\n                            output[mid + 3 * shortLen + i] = overlap[mid + shortLen * 3 + i] + (buf[shortLen * 5 + i] * shortWindows[shortLen - 1 - i]) + (buf[shortLen * 6 + i] * shortWindows[i]);\r\n    \r\n                            if (i < trans)\r\n                                output[mid + 4 * shortLen + i] = overlap[mid + shortLen * 4 + i] + (buf[shortLen * 7 + i] * shortWindows[shortLen - 1 - i]) + (buf[shortLen * 8 + i] * shortWindows[i]);\r\n                        }\r\n    \r\n                        // window the second half and save as overlap for next frame\r\n                        for (var i = 0; i < shortLen; i++) {\r\n                            if (i >= trans)\r\n                                overlap[mid + 4 * shortLen + i - length] = (buf[shortLen * 7 + i] * shortWindows[shortLen - 1 - i]) + (buf[shortLen * 8 + i] * shortWindows[i]);\r\n    \r\n                            overlap[mid + 5 * shortLen + i - length] = (buf[shortLen * 9 + i] * shortWindows[shortLen - 1 - i]) + (buf[shortLen * 10 + i] * shortWindows[i]);\r\n                            overlap[mid + 6 * shortLen + i - length] = (buf[shortLen * 11 + i] * shortWindows[shortLen - 1 - i]) + (buf[shortLen * 12 + i] * shortWindows[i]);\r\n                            overlap[mid + 7 * shortLen + i - length] = (buf[shortLen * 13 + i] * shortWindows[shortLen - 1 - i]) + (buf[shortLen * 14 + i] * shortWindows[i]);\r\n                            overlap[mid + 8 * shortLen + i - length] = (buf[shortLen * 15 + i] * shortWindows[shortLen - 1 - i]);\r\n                        }\r\n    \r\n                        for (var i = 0; i < mid; i++) {\r\n                            overlap[mid + shortLen + i] = 0;\r\n                        }\r\n    \r\n                        break;\r\n    \r\n                    case ICStream.LONG_STOP_SEQUENCE:\r\n                        mdctLong.process(input, 0, buf, 0);\r\n    \r\n                        // add second half output of previous frame to windowed output of current frame\r\n                        // construct first half window using padding with 1's and 0's\r\n                        for (var i = 0; i < mid; i++) {\r\n                            output[i] = overlap[i];\r\n                        }\r\n    \r\n                        for (var i = 0; i < shortLen; i++) {\r\n                            output[mid + i] = overlap[mid + i] + (buf[mid + i] * shortWindowsPrev[i]);\r\n                        }\r\n    \r\n                        for (var i = 0; i < mid; i++) {\r\n                            output[mid + shortLen + i] = overlap[mid + shortLen + i] + buf[mid + shortLen + i];\r\n                        }\r\n    \r\n                        // window the second half and save as overlap for next frame\r\n                        for (var i = 0; i < length; i++) {\r\n                            overlap[i] = buf[length + i] * longWindows[length - 1 - i];\r\n                        }\r\n    \r\n                        break;\r\n                }\r\n            };\r\n    \r\n            return FilterBank;\r\n        })();\r\n    \r\n        var Huffman = (function(){\r\n            var HCB1 = [\r\n                [1, 0, 0, 0, 0, 0],\r\n                [5, 16, 1, 0, 0, 0],\r\n                [5, 17, -1, 0, 0, 0],\r\n                [5, 18, 0, 0, 0, -1],\r\n                [5, 19, 0, 1, 0, 0],\r\n                [5, 20, 0, 0, 0, 1],\r\n                [5, 21, 0, 0, -1, 0],\r\n                [5, 22, 0, 0, 1, 0],\r\n                [5, 23, 0, -1, 0, 0],\r\n                [7, 96, 1, -1, 0, 0],\r\n                [7, 97, -1, 1, 0, 0],\r\n                [7, 98, 0, 0, -1, 1],\r\n                [7, 99, 0, 1, -1, 0],\r\n                [7, 100, 0, -1, 1, 0],\r\n                [7, 101, 0, 0, 1, -1],\r\n                [7, 102, 1, 1, 0, 0],\r\n                [7, 103, 0, 0, -1, -1],\r\n                [7, 104, -1, -1, 0, 0],\r\n                [7, 105, 0, -1, -1, 0],\r\n                [7, 106, 1, 0, -1, 0],\r\n                [7, 107, 0, 1, 0, -1],\r\n                [7, 108, -1, 0, 1, 0],\r\n                [7, 109, 0, 0, 1, 1],\r\n                [7, 110, 1, 0, 1, 0],\r\n                [7, 111, 0, -1, 0, 1],\r\n                [7, 112, 0, 1, 1, 0],\r\n                [7, 113, 0, 1, 0, 1],\r\n                [7, 114, -1, 0, -1, 0],\r\n                [7, 115, 1, 0, 0, 1],\r\n                [7, 116, -1, 0, 0, -1],\r\n                [7, 117, 1, 0, 0, -1],\r\n                [7, 118, -1, 0, 0, 1],\r\n                [7, 119, 0, -1, 0, -1],\r\n                [9, 480, 1, 1, -1, 0],\r\n                [9, 481, -1, 1, -1, 0],\r\n                [9, 482, 1, -1, 1, 0],\r\n                [9, 483, 0, 1, 1, -1],\r\n                [9, 484, 0, 1, -1, 1],\r\n                [9, 485, 0, -1, 1, 1],\r\n                [9, 486, 0, -1, 1, -1],\r\n                [9, 487, 1, -1, -1, 0],\r\n                [9, 488, 1, 0, -1, 1],\r\n                [9, 489, 0, 1, -1, -1],\r\n                [9, 490, -1, 1, 1, 0],\r\n                [9, 491, -1, 0, 1, -1],\r\n                [9, 492, -1, -1, 1, 0],\r\n                [9, 493, 0, -1, -1, 1],\r\n                [9, 494, 1, -1, 0, 1],\r\n                [9, 495, 1, -1, 0, -1],\r\n                [9, 496, -1, 1, 0, -1],\r\n                [9, 497, -1, -1, -1, 0],\r\n                [9, 498, 0, -1, -1, -1],\r\n                [9, 499, 0, 1, 1, 1],\r\n                [9, 500, 1, 0, 1, -1],\r\n                [9, 501, 1, 1, 0, 1],\r\n                [9, 502, -1, 1, 0, 1],\r\n                [9, 503, 1, 1, 1, 0],\r\n                [10, 1008, -1, -1, 0, 1],\r\n                [10, 1009, -1, 0, -1, -1],\r\n                [10, 1010, 1, 1, 0, -1],\r\n                [10, 1011, 1, 0, -1, -1],\r\n                [10, 1012, -1, 0, -1, 1],\r\n                [10, 1013, -1, -1, 0, -1],\r\n                [10, 1014, -1, 0, 1, 1],\r\n                [10, 1015, 1, 0, 1, 1],\r\n                [11, 2032, 1, -1, 1, -1],\r\n                [11, 2033, -1, 1, -1, 1],\r\n                [11, 2034, -1, 1, 1, -1],\r\n                [11, 2035, 1, -1, -1, 1],\r\n                [11, 2036, 1, 1, 1, 1],\r\n                [11, 2037, -1, -1, 1, 1],\r\n                [11, 2038, 1, 1, -1, -1],\r\n                [11, 2039, -1, -1, 1, -1],\r\n                [11, 2040, -1, -1, -1, -1],\r\n                [11, 2041, 1, 1, -1, 1],\r\n                [11, 2042, 1, -1, 1, 1],\r\n                [11, 2043, -1, 1, 1, 1],\r\n                [11, 2044, -1, 1, -1, -1],\r\n                [11, 2045, -1, -1, -1, 1],\r\n                [11, 2046, 1, -1, -1, -1],\r\n                [11, 2047, 1, 1, 1, -1]\r\n            ];\r\n    \r\n            var HCB2 = [\r\n                [3, 0, 0, 0, 0, 0],\r\n                [4, 2, 1, 0, 0, 0],\r\n                [5, 6, -1, 0, 0, 0],\r\n                [5, 7, 0, 0, 0, 1],\r\n                [5, 8, 0, 0, -1, 0],\r\n                [5, 9, 0, 0, 0, -1],\r\n                [5, 10, 0, -1, 0, 0],\r\n                [5, 11, 0, 0, 1, 0],\r\n                [5, 12, 0, 1, 0, 0],\r\n                [6, 26, 0, -1, 1, 0],\r\n                [6, 27, -1, 1, 0, 0],\r\n                [6, 28, 0, 1, -1, 0],\r\n                [6, 29, 0, 0, 1, -1],\r\n                [6, 30, 0, 1, 0, -1],\r\n                [6, 31, 0, 0, -1, 1],\r\n                [6, 32, -1, 0, 0, -1],\r\n                [6, 33, 1, -1, 0, 0],\r\n                [6, 34, 1, 0, -1, 0],\r\n                [6, 35, -1, -1, 0, 0],\r\n                [6, 36, 0, 0, -1, -1],\r\n                [6, 37, 1, 0, 1, 0],\r\n                [6, 38, 1, 0, 0, 1],\r\n                [6, 39, 0, -1, 0, 1],\r\n                [6, 40, -1, 0, 1, 0],\r\n                [6, 41, 0, 1, 0, 1],\r\n                [6, 42, 0, -1, -1, 0],\r\n                [6, 43, -1, 0, 0, 1],\r\n                [6, 44, 0, -1, 0, -1],\r\n                [6, 45, -1, 0, -1, 0],\r\n                [6, 46, 1, 1, 0, 0],\r\n                [6, 47, 0, 1, 1, 0],\r\n                [6, 48, 0, 0, 1, 1],\r\n                [6, 49, 1, 0, 0, -1],\r\n                [7, 100, 0, 1, -1, 1],\r\n                [7, 101, 1, 0, -1, 1],\r\n                [7, 102, -1, 1, -1, 0],\r\n                [7, 103, 0, -1, 1, -1],\r\n                [7, 104, 1, -1, 1, 0],\r\n                [7, 105, 1, 1, 0, -1],\r\n                [7, 106, 1, 0, 1, 1],\r\n                [7, 107, -1, 1, 1, 0],\r\n                [7, 108, 0, -1, -1, 1],\r\n                [7, 109, 1, 1, 1, 0],\r\n                [7, 110, -1, 0, 1, -1],\r\n                [7, 111, -1, -1, -1, 0],\r\n                [7, 112, -1, 0, -1, 1],\r\n                [7, 113, 1, -1, -1, 0],\r\n                [7, 114, 1, 1, -1, 0],\r\n                [8, 230, 1, -1, 0, 1],\r\n                [8, 231, -1, 1, 0, -1],\r\n                [8, 232, -1, -1, 1, 0],\r\n                [8, 233, -1, 0, 1, 1],\r\n                [8, 234, -1, -1, 0, 1],\r\n                [8, 235, -1, -1, 0, -1],\r\n                [8, 236, 0, -1, -1, -1],\r\n                [8, 237, 1, 0, 1, -1],\r\n                [8, 238, 1, 0, -1, -1],\r\n                [8, 239, 0, 1, -1, -1],\r\n                [8, 240, 0, 1, 1, 1],\r\n                [8, 241, -1, 1, 0, 1],\r\n                [8, 242, -1, 0, -1, -1],\r\n                [8, 243, 0, 1, 1, -1],\r\n                [8, 244, 1, -1, 0, -1],\r\n                [8, 245, 0, -1, 1, 1],\r\n                [8, 246, 1, 1, 0, 1],\r\n                [8, 247, 1, -1, 1, -1],\r\n                [8, 248, -1, 1, -1, 1],\r\n                [9, 498, 1, -1, -1, 1],\r\n                [9, 499, -1, -1, -1, -1],\r\n                [9, 500, -1, 1, 1, -1],\r\n                [9, 501, -1, 1, 1, 1],\r\n                [9, 502, 1, 1, 1, 1],\r\n                [9, 503, -1, -1, 1, -1],\r\n                [9, 504, 1, -1, 1, 1],\r\n                [9, 505, -1, 1, -1, -1],\r\n                [9, 506, -1, -1, 1, 1],\r\n                [9, 507, 1, 1, -1, -1],\r\n                [9, 508, 1, -1, -1, -1],\r\n                [9, 509, -1, -1, -1, 1],\r\n                [9, 510, 1, 1, -1, 1],\r\n                [9, 511, 1, 1, 1, -1]\r\n            ];\r\n    \r\n            var HCB3 = [\r\n                [1, 0, 0, 0, 0, 0],\r\n                [4, 8, 1, 0, 0, 0],\r\n                [4, 9, 0, 0, 0, 1],\r\n                [4, 10, 0, 1, 0, 0],\r\n                [4, 11, 0, 0, 1, 0],\r\n                [5, 24, 1, 1, 0, 0],\r\n                [5, 25, 0, 0, 1, 1],\r\n                [6, 52, 0, 1, 1, 0],\r\n                [6, 53, 0, 1, 0, 1],\r\n                [6, 54, 1, 0, 1, 0],\r\n                [6, 55, 0, 1, 1, 1],\r\n                [6, 56, 1, 0, 0, 1],\r\n                [6, 57, 1, 1, 1, 0],\r\n                [7, 116, 1, 1, 1, 1],\r\n                [7, 117, 1, 0, 1, 1],\r\n                [7, 118, 1, 1, 0, 1],\r\n                [8, 238, 2, 0, 0, 0],\r\n                [8, 239, 0, 0, 0, 2],\r\n                [8, 240, 0, 0, 1, 2],\r\n                [8, 241, 2, 1, 0, 0],\r\n                [8, 242, 1, 2, 1, 0],\r\n                [9, 486, 0, 0, 2, 1],\r\n                [9, 487, 0, 1, 2, 1],\r\n                [9, 488, 1, 2, 0, 0],\r\n                [9, 489, 0, 1, 1, 2],\r\n                [9, 490, 2, 1, 1, 0],\r\n                [9, 491, 0, 0, 2, 0],\r\n                [9, 492, 0, 2, 1, 0],\r\n                [9, 493, 0, 1, 2, 0],\r\n                [9, 494, 0, 2, 0, 0],\r\n                [9, 495, 0, 1, 0, 2],\r\n                [9, 496, 2, 0, 1, 0],\r\n                [9, 497, 1, 2, 1, 1],\r\n                [9, 498, 0, 2, 1, 1],\r\n                [9, 499, 1, 1, 2, 0],\r\n                [9, 500, 1, 1, 2, 1],\r\n                [10, 1002, 1, 2, 0, 1],\r\n                [10, 1003, 1, 0, 2, 0],\r\n                [10, 1004, 1, 0, 2, 1],\r\n                [10, 1005, 0, 2, 0, 1],\r\n                [10, 1006, 2, 1, 1, 1],\r\n                [10, 1007, 1, 1, 1, 2],\r\n                [10, 1008, 2, 1, 0, 1],\r\n                [10, 1009, 1, 0, 1, 2],\r\n                [10, 1010, 0, 0, 2, 2],\r\n                [10, 1011, 0, 1, 2, 2],\r\n                [10, 1012, 2, 2, 1, 0],\r\n                [10, 1013, 1, 2, 2, 0],\r\n                [10, 1014, 1, 0, 0, 2],\r\n                [10, 1015, 2, 0, 0, 1],\r\n                [10, 1016, 0, 2, 2, 1],\r\n                [11, 2034, 2, 2, 0, 0],\r\n                [11, 2035, 1, 2, 2, 1],\r\n                [11, 2036, 1, 1, 0, 2],\r\n                [11, 2037, 2, 0, 1, 1],\r\n                [11, 2038, 1, 1, 2, 2],\r\n                [11, 2039, 2, 2, 1, 1],\r\n                [11, 2040, 0, 2, 2, 0],\r\n                [11, 2041, 0, 2, 1, 2],\r\n                [12, 4084, 1, 0, 2, 2],\r\n                [12, 4085, 2, 2, 0, 1],\r\n                [12, 4086, 2, 1, 2, 0],\r\n                [12, 4087, 2, 2, 2, 0],\r\n                [12, 4088, 0, 2, 2, 2],\r\n                [12, 4089, 2, 2, 2, 1],\r\n                [12, 4090, 2, 1, 2, 1],\r\n                [12, 4091, 1, 2, 1, 2],\r\n                [12, 4092, 1, 2, 2, 2],\r\n                [13, 8186, 0, 2, 0, 2],\r\n                [13, 8187, 2, 0, 2, 0],\r\n                [13, 8188, 1, 2, 0, 2],\r\n                [14, 16378, 2, 0, 2, 1],\r\n                [14, 16379, 2, 1, 1, 2],\r\n                [14, 16380, 2, 1, 0, 2],\r\n                [15, 32762, 2, 2, 2, 2],\r\n                [15, 32763, 2, 2, 1, 2],\r\n                [15, 32764, 2, 1, 2, 2],\r\n                [15, 32765, 2, 0, 1, 2],\r\n                [15, 32766, 2, 0, 0, 2],\r\n                [16, 65534, 2, 2, 0, 2],\r\n                [16, 65535, 2, 0, 2, 2]\r\n            ];\r\n    \r\n            var HCB4 = [\r\n                [4, 0, 1, 1, 1, 1],\r\n                [4, 1, 0, 1, 1, 1],\r\n                [4, 2, 1, 1, 0, 1],\r\n                [4, 3, 1, 1, 1, 0],\r\n                [4, 4, 1, 0, 1, 1],\r\n                [4, 5, 1, 0, 0, 0],\r\n                [4, 6, 1, 1, 0, 0],\r\n                [4, 7, 0, 0, 0, 0],\r\n                [4, 8, 0, 0, 1, 1],\r\n                [4, 9, 1, 0, 1, 0],\r\n                [5, 20, 1, 0, 0, 1],\r\n                [5, 21, 0, 1, 1, 0],\r\n                [5, 22, 0, 0, 0, 1],\r\n                [5, 23, 0, 1, 0, 1],\r\n                [5, 24, 0, 0, 1, 0],\r\n                [5, 25, 0, 1, 0, 0],\r\n                [7, 104, 2, 1, 1, 1],\r\n                [7, 105, 1, 1, 2, 1],\r\n                [7, 106, 1, 2, 1, 1],\r\n                [7, 107, 1, 1, 1, 2],\r\n                [7, 108, 2, 1, 1, 0],\r\n                [7, 109, 2, 1, 0, 1],\r\n                [7, 110, 1, 2, 1, 0],\r\n                [7, 111, 2, 0, 1, 1],\r\n                [7, 112, 0, 1, 2, 1],\r\n                [8, 226, 0, 1, 1, 2],\r\n                [8, 227, 1, 1, 2, 0],\r\n                [8, 228, 0, 2, 1, 1],\r\n                [8, 229, 1, 0, 1, 2],\r\n                [8, 230, 1, 2, 0, 1],\r\n                [8, 231, 1, 1, 0, 2],\r\n                [8, 232, 1, 0, 2, 1],\r\n                [8, 233, 2, 1, 0, 0],\r\n                [8, 234, 2, 0, 1, 0],\r\n                [8, 235, 1, 2, 0, 0],\r\n                [8, 236, 2, 0, 0, 1],\r\n                [8, 237, 0, 1, 0, 2],\r\n                [8, 238, 0, 2, 1, 0],\r\n                [8, 239, 0, 0, 1, 2],\r\n                [8, 240, 0, 1, 2, 0],\r\n                [8, 241, 0, 2, 0, 1],\r\n                [8, 242, 1, 0, 0, 2],\r\n                [8, 243, 0, 0, 2, 1],\r\n                [8, 244, 1, 0, 2, 0],\r\n                [8, 245, 2, 0, 0, 0],\r\n                [8, 246, 0, 0, 0, 2],\r\n                [9, 494, 0, 2, 0, 0],\r\n                [9, 495, 0, 0, 2, 0],\r\n                [9, 496, 1, 2, 2, 1],\r\n                [9, 497, 2, 2, 1, 1],\r\n                [9, 498, 2, 1, 2, 1],\r\n                [9, 499, 1, 1, 2, 2],\r\n                [9, 500, 1, 2, 1, 2],\r\n                [9, 501, 2, 1, 1, 2],\r\n                [10, 1004, 1, 2, 2, 0],\r\n                [10, 1005, 2, 2, 1, 0],\r\n                [10, 1006, 2, 1, 2, 0],\r\n                [10, 1007, 0, 2, 2, 1],\r\n                [10, 1008, 0, 1, 2, 2],\r\n                [10, 1009, 2, 2, 0, 1],\r\n                [10, 1010, 0, 2, 1, 2],\r\n                [10, 1011, 2, 0, 2, 1],\r\n                [10, 1012, 1, 0, 2, 2],\r\n                [10, 1013, 2, 2, 2, 1],\r\n                [10, 1014, 1, 2, 0, 2],\r\n                [10, 1015, 2, 0, 1, 2],\r\n                [10, 1016, 2, 1, 0, 2],\r\n                [10, 1017, 1, 2, 2, 2],\r\n                [11, 2036, 2, 1, 2, 2],\r\n                [11, 2037, 2, 2, 1, 2],\r\n                [11, 2038, 0, 2, 2, 0],\r\n                [11, 2039, 2, 2, 0, 0],\r\n                [11, 2040, 0, 0, 2, 2],\r\n                [11, 2041, 2, 0, 2, 0],\r\n                [11, 2042, 0, 2, 0, 2],\r\n                [11, 2043, 2, 0, 0, 2],\r\n                [11, 2044, 2, 2, 2, 2],\r\n                [11, 2045, 0, 2, 2, 2],\r\n                [11, 2046, 2, 2, 2, 0],\r\n                [12, 4094, 2, 2, 0, 2],\r\n                [12, 4095, 2, 0, 2, 2]\r\n            ];\r\n    \r\n            var HCB5 = [\r\n                [1, 0, 0, 0],\r\n                [4, 8, -1, 0],\r\n                [4, 9, 1, 0],\r\n                [4, 10, 0, 1],\r\n                [4, 11, 0, -1],\r\n                [5, 24, 1, -1],\r\n                [5, 25, -1, 1],\r\n                [5, 26, -1, -1],\r\n                [5, 27, 1, 1],\r\n                [7, 112, -2, 0],\r\n                [7, 113, 0, 2],\r\n                [7, 114, 2, 0],\r\n                [7, 115, 0, -2],\r\n                [8, 232, -2, -1],\r\n                [8, 233, 2, 1],\r\n                [8, 234, -1, -2],\r\n                [8, 235, 1, 2],\r\n                [8, 236, -2, 1],\r\n                [8, 237, 2, -1],\r\n                [8, 238, -1, 2],\r\n                [8, 239, 1, -2],\r\n                [8, 240, -3, 0],\r\n                [8, 241, 3, 0],\r\n                [8, 242, 0, -3],\r\n                [8, 243, 0, 3],\r\n                [9, 488, -3, -1],\r\n                [9, 489, 1, 3],\r\n                [9, 490, 3, 1],\r\n                [9, 491, -1, -3],\r\n                [9, 492, -3, 1],\r\n                [9, 493, 3, -1],\r\n                [9, 494, 1, -3],\r\n                [9, 495, -1, 3],\r\n                [9, 496, -2, 2],\r\n                [9, 497, 2, 2],\r\n                [9, 498, -2, -2],\r\n                [9, 499, 2, -2],\r\n                [10, 1000, -3, -2],\r\n                [10, 1001, 3, -2],\r\n                [10, 1002, -2, 3],\r\n                [10, 1003, 2, -3],\r\n                [10, 1004, 3, 2],\r\n                [10, 1005, 2, 3],\r\n                [10, 1006, -3, 2],\r\n                [10, 1007, -2, -3],\r\n                [10, 1008, 0, -4],\r\n                [10, 1009, -4, 0],\r\n                [10, 1010, 4, 1],\r\n                [10, 1011, 4, 0],\r\n                [11, 2024, -4, -1],\r\n                [11, 2025, 0, 4],\r\n                [11, 2026, 4, -1],\r\n                [11, 2027, -1, -4],\r\n                [11, 2028, 1, 4],\r\n                [11, 2029, -1, 4],\r\n                [11, 2030, -4, 1],\r\n                [11, 2031, 1, -4],\r\n                [11, 2032, 3, -3],\r\n                [11, 2033, -3, -3],\r\n                [11, 2034, -3, 3],\r\n                [11, 2035, -2, 4],\r\n                [11, 2036, -4, -2],\r\n                [11, 2037, 4, 2],\r\n                [11, 2038, 2, -4],\r\n                [11, 2039, 2, 4],\r\n                [11, 2040, 3, 3],\r\n                [11, 2041, -4, 2],\r\n                [12, 4084, -2, -4],\r\n                [12, 4085, 4, -2],\r\n                [12, 4086, 3, -4],\r\n                [12, 4087, -4, -3],\r\n                [12, 4088, -4, 3],\r\n                [12, 4089, 3, 4],\r\n                [12, 4090, -3, 4],\r\n                [12, 4091, 4, 3],\r\n                [12, 4092, 4, -3],\r\n                [12, 4093, -3, -4],\r\n                [13, 8188, 4, -4],\r\n                [13, 8189, -4, 4],\r\n                [13, 8190, 4, 4],\r\n                [13, 8191, -4, -4]\r\n            ];\r\n    \r\n            var HCB6 = [\r\n                [4, 0, 0, 0],\r\n                [4, 1, 1, 0],\r\n                [4, 2, 0, -1],\r\n                [4, 3, 0, 1],\r\n                [4, 4, -1, 0],\r\n                [4, 5, 1, 1],\r\n                [4, 6, -1, 1],\r\n                [4, 7, 1, -1],\r\n                [4, 8, -1, -1],\r\n                [6, 36, 2, -1],\r\n                [6, 37, 2, 1],\r\n                [6, 38, -2, 1],\r\n                [6, 39, -2, -1],\r\n                [6, 40, -2, 0],\r\n                [6, 41, -1, 2],\r\n                [6, 42, 2, 0],\r\n                [6, 43, 1, -2],\r\n                [6, 44, 1, 2],\r\n                [6, 45, 0, -2],\r\n                [6, 46, -1, -2],\r\n                [6, 47, 0, 2],\r\n                [6, 48, 2, -2],\r\n                [6, 49, -2, 2],\r\n                [6, 50, -2, -2],\r\n                [6, 51, 2, 2],\r\n                [7, 104, -3, 1],\r\n                [7, 105, 3, 1],\r\n                [7, 106, 3, -1],\r\n                [7, 107, -1, 3],\r\n                [7, 108, -3, -1],\r\n                [7, 109, 1, 3],\r\n                [7, 110, 1, -3],\r\n                [7, 111, -1, -3],\r\n                [7, 112, 3, 0],\r\n                [7, 113, -3, 0],\r\n                [7, 114, 0, -3],\r\n                [7, 115, 0, 3],\r\n                [7, 116, 3, 2],\r\n                [8, 234, -3, -2],\r\n                [8, 235, -2, 3],\r\n                [8, 236, 2, 3],\r\n                [8, 237, 3, -2],\r\n                [8, 238, 2, -3],\r\n                [8, 239, -2, -3],\r\n                [8, 240, -3, 2],\r\n                [8, 241, 3, 3],\r\n                [9, 484, 3, -3],\r\n                [9, 485, -3, -3],\r\n                [9, 486, -3, 3],\r\n                [9, 487, 1, -4],\r\n                [9, 488, -1, -4],\r\n                [9, 489, 4, 1],\r\n                [9, 490, -4, 1],\r\n                [9, 491, -4, -1],\r\n                [9, 492, 1, 4],\r\n                [9, 493, 4, -1],\r\n                [9, 494, -1, 4],\r\n                [9, 495, 0, -4],\r\n                [9, 496, -4, 2],\r\n                [9, 497, -4, -2],\r\n                [9, 498, 2, 4],\r\n                [9, 499, -2, -4],\r\n                [9, 500, -4, 0],\r\n                [9, 501, 4, 2],\r\n                [9, 502, 4, -2],\r\n                [9, 503, -2, 4],\r\n                [9, 504, 4, 0],\r\n                [9, 505, 2, -4],\r\n                [9, 506, 0, 4],\r\n                [10, 1014, -3, -4],\r\n                [10, 1015, -3, 4],\r\n                [10, 1016, 3, -4],\r\n                [10, 1017, 4, -3],\r\n                [10, 1018, 3, 4],\r\n                [10, 1019, 4, 3],\r\n                [10, 1020, -4, 3],\r\n                [10, 1021, -4, -3],\r\n                [11, 2044, 4, 4],\r\n                [11, 2045, -4, 4],\r\n                [11, 2046, -4, -4],\r\n                [11, 2047, 4, -4]\r\n            ];\r\n    \r\n            var HCB7 = [\r\n                [1, 0, 0, 0],\r\n                [3, 4, 1, 0],\r\n                [3, 5, 0, 1],\r\n                [4, 12, 1, 1],\r\n                [6, 52, 2, 1],\r\n                [6, 53, 1, 2],\r\n                [6, 54, 2, 0],\r\n                [6, 55, 0, 2],\r\n                [7, 112, 3, 1],\r\n                [7, 113, 1, 3],\r\n                [7, 114, 2, 2],\r\n                [7, 115, 3, 0],\r\n                [7, 116, 0, 3],\r\n                [8, 234, 2, 3],\r\n                [8, 235, 3, 2],\r\n                [8, 236, 1, 4],\r\n                [8, 237, 4, 1],\r\n                [8, 238, 1, 5],\r\n                [8, 239, 5, 1],\r\n                [8, 240, 3, 3],\r\n                [8, 241, 2, 4],\r\n                [8, 242, 0, 4],\r\n                [8, 243, 4, 0],\r\n                [9, 488, 4, 2],\r\n                [9, 489, 2, 5],\r\n                [9, 490, 5, 2],\r\n                [9, 491, 0, 5],\r\n                [9, 492, 6, 1],\r\n                [9, 493, 5, 0],\r\n                [9, 494, 1, 6],\r\n                [9, 495, 4, 3],\r\n                [9, 496, 3, 5],\r\n                [9, 497, 3, 4],\r\n                [9, 498, 5, 3],\r\n                [9, 499, 2, 6],\r\n                [9, 500, 6, 2],\r\n                [9, 501, 1, 7],\r\n                [10, 1004, 3, 6],\r\n                [10, 1005, 0, 6],\r\n                [10, 1006, 6, 0],\r\n                [10, 1007, 4, 4],\r\n                [10, 1008, 7, 1],\r\n                [10, 1009, 4, 5],\r\n                [10, 1010, 7, 2],\r\n                [10, 1011, 5, 4],\r\n                [10, 1012, 6, 3],\r\n                [10, 1013, 2, 7],\r\n                [10, 1014, 7, 3],\r\n                [10, 1015, 6, 4],\r\n                [10, 1016, 5, 5],\r\n                [10, 1017, 4, 6],\r\n                [10, 1018, 3, 7],\r\n                [11, 2038, 7, 0],\r\n                [11, 2039, 0, 7],\r\n                [11, 2040, 6, 5],\r\n                [11, 2041, 5, 6],\r\n                [11, 2042, 7, 4],\r\n                [11, 2043, 4, 7],\r\n                [11, 2044, 5, 7],\r\n                [11, 2045, 7, 5],\r\n                [12, 4092, 7, 6],\r\n                [12, 4093, 6, 6],\r\n                [12, 4094, 6, 7],\r\n                [12, 4095, 7, 7]\r\n            ];\r\n    \r\n            var HCB8 = [\r\n                [3, 0, 1, 1],\r\n                [4, 2, 2, 1],\r\n                [4, 3, 1, 0],\r\n                [4, 4, 1, 2],\r\n                [4, 5, 0, 1],\r\n                [4, 6, 2, 2],\r\n                [5, 14, 0, 0],\r\n                [5, 15, 2, 0],\r\n                [5, 16, 0, 2],\r\n                [5, 17, 3, 1],\r\n                [5, 18, 1, 3],\r\n                [5, 19, 3, 2],\r\n                [5, 20, 2, 3],\r\n                [6, 42, 3, 3],\r\n                [6, 43, 4, 1],\r\n                [6, 44, 1, 4],\r\n                [6, 45, 4, 2],\r\n                [6, 46, 2, 4],\r\n                [6, 47, 3, 0],\r\n                [6, 48, 0, 3],\r\n                [6, 49, 4, 3],\r\n                [6, 50, 3, 4],\r\n                [6, 51, 5, 2],\r\n                [7, 104, 5, 1],\r\n                [7, 105, 2, 5],\r\n                [7, 106, 1, 5],\r\n                [7, 107, 5, 3],\r\n                [7, 108, 3, 5],\r\n                [7, 109, 4, 4],\r\n                [7, 110, 5, 4],\r\n                [7, 111, 0, 4],\r\n                [7, 112, 4, 5],\r\n                [7, 113, 4, 0],\r\n                [7, 114, 2, 6],\r\n                [7, 115, 6, 2],\r\n                [7, 116, 6, 1],\r\n                [7, 117, 1, 6],\r\n                [8, 236, 3, 6],\r\n                [8, 237, 6, 3],\r\n                [8, 238, 5, 5],\r\n                [8, 239, 5, 0],\r\n                [8, 240, 6, 4],\r\n                [8, 241, 0, 5],\r\n                [8, 242, 4, 6],\r\n                [8, 243, 7, 1],\r\n                [8, 244, 7, 2],\r\n                [8, 245, 2, 7],\r\n                [8, 246, 6, 5],\r\n                [8, 247, 7, 3],\r\n                [8, 248, 1, 7],\r\n                [8, 249, 5, 6],\r\n                [8, 250, 3, 7],\r\n                [9, 502, 6, 6],\r\n                [9, 503, 7, 4],\r\n                [9, 504, 6, 0],\r\n                [9, 505, 4, 7],\r\n                [9, 506, 0, 6],\r\n                [9, 507, 7, 5],\r\n                [9, 508, 7, 6],\r\n                [9, 509, 6, 7],\r\n                [10, 1020, 5, 7],\r\n                [10, 1021, 7, 0],\r\n                [10, 1022, 0, 7],\r\n                [10, 1023, 7, 7]\r\n            ];\r\n    \r\n            var HCB9 = [\r\n                [1, 0, 0, 0],\r\n                [3, 4, 1, 0],\r\n                [3, 5, 0, 1],\r\n                [4, 12, 1, 1],\r\n                [6, 52, 2, 1],\r\n                [6, 53, 1, 2],\r\n                [6, 54, 2, 0],\r\n                [6, 55, 0, 2],\r\n                [7, 112, 3, 1],\r\n                [7, 113, 2, 2],\r\n                [7, 114, 1, 3],\r\n                [8, 230, 3, 0],\r\n                [8, 231, 0, 3],\r\n                [8, 232, 2, 3],\r\n                [8, 233, 3, 2],\r\n                [8, 234, 1, 4],\r\n                [8, 235, 4, 1],\r\n                [8, 236, 2, 4],\r\n                [8, 237, 1, 5],\r\n                [9, 476, 4, 2],\r\n                [9, 477, 3, 3],\r\n                [9, 478, 0, 4],\r\n                [9, 479, 4, 0],\r\n                [9, 480, 5, 1],\r\n                [9, 481, 2, 5],\r\n                [9, 482, 1, 6],\r\n                [9, 483, 3, 4],\r\n                [9, 484, 5, 2],\r\n                [9, 485, 6, 1],\r\n                [9, 486, 4, 3],\r\n                [10, 974, 0, 5],\r\n                [10, 975, 2, 6],\r\n                [10, 976, 5, 0],\r\n                [10, 977, 1, 7],\r\n                [10, 978, 3, 5],\r\n                [10, 979, 1, 8],\r\n                [10, 980, 8, 1],\r\n                [10, 981, 4, 4],\r\n                [10, 982, 5, 3],\r\n                [10, 983, 6, 2],\r\n                [10, 984, 7, 1],\r\n                [10, 985, 0, 6],\r\n                [10, 986, 8, 2],\r\n                [10, 987, 2, 8],\r\n                [10, 988, 3, 6],\r\n                [10, 989, 2, 7],\r\n                [10, 990, 4, 5],\r\n                [10, 991, 9, 1],\r\n                [10, 992, 1, 9],\r\n                [10, 993, 7, 2],\r\n                [11, 1988, 6, 0],\r\n                [11, 1989, 5, 4],\r\n                [11, 1990, 6, 3],\r\n                [11, 1991, 8, 3],\r\n                [11, 1992, 0, 7],\r\n                [11, 1993, 9, 2],\r\n                [11, 1994, 3, 8],\r\n                [11, 1995, 4, 6],\r\n                [11, 1996, 3, 7],\r\n                [11, 1997, 0, 8],\r\n                [11, 1998, 10, 1],\r\n                [11, 1999, 6, 4],\r\n                [11, 2000, 2, 9],\r\n                [11, 2001, 5, 5],\r\n                [11, 2002, 8, 0],\r\n                [11, 2003, 7, 0],\r\n                [11, 2004, 7, 3],\r\n                [11, 2005, 10, 2],\r\n                [11, 2006, 9, 3],\r\n                [11, 2007, 8, 4],\r\n                [11, 2008, 1, 10],\r\n                [11, 2009, 7, 4],\r\n                [11, 2010, 6, 5],\r\n                [11, 2011, 5, 6],\r\n                [11, 2012, 4, 8],\r\n                [11, 2013, 4, 7],\r\n                [11, 2014, 3, 9],\r\n                [11, 2015, 11, 1],\r\n                [11, 2016, 5, 8],\r\n                [11, 2017, 9, 0],\r\n                [11, 2018, 8, 5],\r\n                [12, 4038, 10, 3],\r\n                [12, 4039, 2, 10],\r\n                [12, 4040, 0, 9],\r\n                [12, 4041, 11, 2],\r\n                [12, 4042, 9, 4],\r\n                [12, 4043, 6, 6],\r\n                [12, 4044, 12, 1],\r\n                [12, 4045, 4, 9],\r\n                [12, 4046, 8, 6],\r\n                [12, 4047, 1, 11],\r\n                [12, 4048, 9, 5],\r\n                [12, 4049, 10, 4],\r\n                [12, 4050, 5, 7],\r\n                [12, 4051, 7, 5],\r\n                [12, 4052, 2, 11],\r\n                [12, 4053, 1, 12],\r\n                [12, 4054, 12, 2],\r\n                [12, 4055, 11, 3],\r\n                [12, 4056, 3, 10],\r\n                [12, 4057, 5, 9],\r\n                [12, 4058, 6, 7],\r\n                [12, 4059, 8, 7],\r\n                [12, 4060, 11, 4],\r\n                [12, 4061, 0, 10],\r\n                [12, 4062, 7, 6],\r\n                [12, 4063, 12, 3],\r\n                [12, 4064, 10, 0],\r\n                [12, 4065, 10, 5],\r\n                [12, 4066, 4, 10],\r\n                [12, 4067, 6, 8],\r\n                [12, 4068, 2, 12],\r\n                [12, 4069, 9, 6],\r\n                [12, 4070, 9, 7],\r\n                [12, 4071, 4, 11],\r\n                [12, 4072, 11, 0],\r\n                [12, 4073, 6, 9],\r\n                [12, 4074, 3, 11],\r\n                [12, 4075, 5, 10],\r\n                [13, 8152, 8, 8],\r\n                [13, 8153, 7, 8],\r\n                [13, 8154, 12, 5],\r\n                [13, 8155, 3, 12],\r\n                [13, 8156, 11, 5],\r\n                [13, 8157, 7, 7],\r\n                [13, 8158, 12, 4],\r\n                [13, 8159, 11, 6],\r\n                [13, 8160, 10, 6],\r\n                [13, 8161, 4, 12],\r\n                [13, 8162, 7, 9],\r\n                [13, 8163, 5, 11],\r\n                [13, 8164, 0, 11],\r\n                [13, 8165, 12, 6],\r\n                [13, 8166, 6, 10],\r\n                [13, 8167, 12, 0],\r\n                [13, 8168, 10, 7],\r\n                [13, 8169, 5, 12],\r\n                [13, 8170, 7, 10],\r\n                [13, 8171, 9, 8],\r\n                [13, 8172, 0, 12],\r\n                [13, 8173, 11, 7],\r\n                [13, 8174, 8, 9],\r\n                [13, 8175, 9, 9],\r\n                [13, 8176, 10, 8],\r\n                [13, 8177, 7, 11],\r\n                [13, 8178, 12, 7],\r\n                [13, 8179, 6, 11],\r\n                [13, 8180, 8, 11],\r\n                [13, 8181, 11, 8],\r\n                [13, 8182, 7, 12],\r\n                [13, 8183, 6, 12],\r\n                [14, 16368, 8, 10],\r\n                [14, 16369, 10, 9],\r\n                [14, 16370, 8, 12],\r\n                [14, 16371, 9, 10],\r\n                [14, 16372, 9, 11],\r\n                [14, 16373, 9, 12],\r\n                [14, 16374, 10, 11],\r\n                [14, 16375, 12, 9],\r\n                [14, 16376, 10, 10],\r\n                [14, 16377, 11, 9],\r\n                [14, 16378, 12, 8],\r\n                [14, 16379, 11, 10],\r\n                [14, 16380, 12, 10],\r\n                [14, 16381, 12, 11],\r\n                [15, 32764, 10, 12],\r\n                [15, 32765, 11, 11],\r\n                [15, 32766, 11, 12],\r\n                [15, 32767, 12, 12]\r\n            ];\r\n    \r\n            var HCB10 = [\r\n                [4, 0, 1, 1],\r\n                [4, 1, 1, 2],\r\n                [4, 2, 2, 1],\r\n                [5, 6, 2, 2],\r\n                [5, 7, 1, 0],\r\n                [5, 8, 0, 1],\r\n                [5, 9, 1, 3],\r\n                [5, 10, 3, 2],\r\n                [5, 11, 3, 1],\r\n                [5, 12, 2, 3],\r\n                [5, 13, 3, 3],\r\n                [6, 28, 2, 0],\r\n                [6, 29, 0, 2],\r\n                [6, 30, 2, 4],\r\n                [6, 31, 4, 2],\r\n                [6, 32, 1, 4],\r\n                [6, 33, 4, 1],\r\n                [6, 34, 0, 0],\r\n                [6, 35, 4, 3],\r\n                [6, 36, 3, 4],\r\n                [6, 37, 3, 0],\r\n                [6, 38, 0, 3],\r\n                [6, 39, 4, 4],\r\n                [6, 40, 2, 5],\r\n                [6, 41, 5, 2],\r\n                [7, 84, 1, 5],\r\n                [7, 85, 5, 1],\r\n                [7, 86, 5, 3],\r\n                [7, 87, 3, 5],\r\n                [7, 88, 5, 4],\r\n                [7, 89, 4, 5],\r\n                [7, 90, 6, 2],\r\n                [7, 91, 2, 6],\r\n                [7, 92, 6, 3],\r\n                [7, 93, 4, 0],\r\n                [7, 94, 6, 1],\r\n                [7, 95, 0, 4],\r\n                [7, 96, 1, 6],\r\n                [7, 97, 3, 6],\r\n                [7, 98, 5, 5],\r\n                [7, 99, 6, 4],\r\n                [7, 100, 4, 6],\r\n                [8, 202, 6, 5],\r\n                [8, 203, 7, 2],\r\n                [8, 204, 3, 7],\r\n                [8, 205, 2, 7],\r\n                [8, 206, 5, 6],\r\n                [8, 207, 8, 2],\r\n                [8, 208, 7, 3],\r\n                [8, 209, 5, 0],\r\n                [8, 210, 7, 1],\r\n                [8, 211, 0, 5],\r\n                [8, 212, 8, 1],\r\n                [8, 213, 1, 7],\r\n                [8, 214, 8, 3],\r\n                [8, 215, 7, 4],\r\n                [8, 216, 4, 7],\r\n                [8, 217, 2, 8],\r\n                [8, 218, 6, 6],\r\n                [8, 219, 7, 5],\r\n                [8, 220, 1, 8],\r\n                [8, 221, 3, 8],\r\n                [8, 222, 8, 4],\r\n                [8, 223, 4, 8],\r\n                [8, 224, 5, 7],\r\n                [8, 225, 8, 5],\r\n                [8, 226, 5, 8],\r\n                [9, 454, 7, 6],\r\n                [9, 455, 6, 7],\r\n                [9, 456, 9, 2],\r\n                [9, 457, 6, 0],\r\n                [9, 458, 6, 8],\r\n                [9, 459, 9, 3],\r\n                [9, 460, 3, 9],\r\n                [9, 461, 9, 1],\r\n                [9, 462, 2, 9],\r\n                [9, 463, 0, 6],\r\n                [9, 464, 8, 6],\r\n                [9, 465, 9, 4],\r\n                [9, 466, 4, 9],\r\n                [9, 467, 10, 2],\r\n                [9, 468, 1, 9],\r\n                [9, 469, 7, 7],\r\n                [9, 470, 8, 7],\r\n                [9, 471, 9, 5],\r\n                [9, 472, 7, 8],\r\n                [9, 473, 10, 3],\r\n                [9, 474, 5, 9],\r\n                [9, 475, 10, 4],\r\n                [9, 476, 2, 10],\r\n                [9, 477, 10, 1],\r\n                [9, 478, 3, 10],\r\n                [9, 479, 9, 6],\r\n                [9, 480, 6, 9],\r\n                [9, 481, 8, 0],\r\n                [9, 482, 4, 10],\r\n                [9, 483, 7, 0],\r\n                [9, 484, 11, 2],\r\n                [10, 970, 7, 9],\r\n                [10, 971, 11, 3],\r\n                [10, 972, 10, 6],\r\n                [10, 973, 1, 10],\r\n                [10, 974, 11, 1],\r\n                [10, 975, 9, 7],\r\n                [10, 976, 0, 7],\r\n                [10, 977, 8, 8],\r\n                [10, 978, 10, 5],\r\n                [10, 979, 3, 11],\r\n                [10, 980, 5, 10],\r\n                [10, 981, 8, 9],\r\n                [10, 982, 11, 5],\r\n                [10, 983, 0, 8],\r\n                [10, 984, 11, 4],\r\n                [10, 985, 2, 11],\r\n                [10, 986, 7, 10],\r\n                [10, 987, 6, 10],\r\n                [10, 988, 10, 7],\r\n                [10, 989, 4, 11],\r\n                [10, 990, 1, 11],\r\n                [10, 991, 12, 2],\r\n                [10, 992, 9, 8],\r\n                [10, 993, 12, 3],\r\n                [10, 994, 11, 6],\r\n                [10, 995, 5, 11],\r\n                [10, 996, 12, 4],\r\n                [10, 997, 11, 7],\r\n                [10, 998, 12, 5],\r\n                [10, 999, 3, 12],\r\n                [10, 1000, 6, 11],\r\n                [10, 1001, 9, 0],\r\n                [10, 1002, 10, 8],\r\n                [10, 1003, 10, 0],\r\n                [10, 1004, 12, 1],\r\n                [10, 1005, 0, 9],\r\n                [10, 1006, 4, 12],\r\n                [10, 1007, 9, 9],\r\n                [10, 1008, 12, 6],\r\n                [10, 1009, 2, 12],\r\n                [10, 1010, 8, 10],\r\n                [11, 2022, 9, 10],\r\n                [11, 2023, 1, 12],\r\n                [11, 2024, 11, 8],\r\n                [11, 2025, 12, 7],\r\n                [11, 2026, 7, 11],\r\n                [11, 2027, 5, 12],\r\n                [11, 2028, 6, 12],\r\n                [11, 2029, 10, 9],\r\n                [11, 2030, 8, 11],\r\n                [11, 2031, 12, 8],\r\n                [11, 2032, 0, 10],\r\n                [11, 2033, 7, 12],\r\n                [11, 2034, 11, 0],\r\n                [11, 2035, 10, 10],\r\n                [11, 2036, 11, 9],\r\n                [11, 2037, 11, 10],\r\n                [11, 2038, 0, 11],\r\n                [11, 2039, 11, 11],\r\n                [11, 2040, 9, 11],\r\n                [11, 2041, 10, 11],\r\n                [11, 2042, 12, 0],\r\n                [11, 2043, 8, 12],\r\n                [12, 4088, 12, 9],\r\n                [12, 4089, 10, 12],\r\n                [12, 4090, 9, 12],\r\n                [12, 4091, 11, 12],\r\n                [12, 4092, 12, 11],\r\n                [12, 4093, 0, 12],\r\n                [12, 4094, 12, 10],\r\n                [12, 4095, 12, 12]\r\n            ];\r\n    \r\n            var HCB11 = [\r\n                [4, 0, 0, 0],\r\n                [4, 1, 1, 1],\r\n                [5, 4, 16, 16],\r\n                [5, 5, 1, 0],\r\n                [5, 6, 0, 1],\r\n                [5, 7, 2, 1],\r\n                [5, 8, 1, 2],\r\n                [5, 9, 2, 2],\r\n                [6, 20, 1, 3],\r\n                [6, 21, 3, 1],\r\n                [6, 22, 3, 2],\r\n                [6, 23, 2, 0],\r\n                [6, 24, 2, 3],\r\n                [6, 25, 0, 2],\r\n                [6, 26, 3, 3],\r\n                [7, 54, 4, 1],\r\n                [7, 55, 1, 4],\r\n                [7, 56, 4, 2],\r\n                [7, 57, 2, 4],\r\n                [7, 58, 4, 3],\r\n                [7, 59, 3, 4],\r\n                [7, 60, 3, 0],\r\n                [7, 61, 0, 3],\r\n                [7, 62, 5, 1],\r\n                [7, 63, 5, 2],\r\n                [7, 64, 2, 5],\r\n                [7, 65, 4, 4],\r\n                [7, 66, 1, 5],\r\n                [7, 67, 5, 3],\r\n                [7, 68, 3, 5],\r\n                [7, 69, 5, 4],\r\n                [8, 140, 4, 5],\r\n                [8, 141, 6, 2],\r\n                [8, 142, 2, 6],\r\n                [8, 143, 6, 1],\r\n                [8, 144, 6, 3],\r\n                [8, 145, 3, 6],\r\n                [8, 146, 1, 6],\r\n                [8, 147, 4, 16],\r\n                [8, 148, 3, 16],\r\n                [8, 149, 16, 5],\r\n                [8, 150, 16, 3],\r\n                [8, 151, 16, 4],\r\n                [8, 152, 6, 4],\r\n                [8, 153, 16, 6],\r\n                [8, 154, 4, 0],\r\n                [8, 155, 4, 6],\r\n                [8, 156, 0, 4],\r\n                [8, 157, 2, 16],\r\n                [8, 158, 5, 5],\r\n                [8, 159, 5, 16],\r\n                [8, 160, 16, 7],\r\n                [8, 161, 16, 2],\r\n                [8, 162, 16, 8],\r\n                [8, 163, 2, 7],\r\n                [8, 164, 7, 2],\r\n                [8, 165, 3, 7],\r\n                [8, 166, 6, 5],\r\n                [8, 167, 5, 6],\r\n                [8, 168, 6, 16],\r\n                [8, 169, 16, 10],\r\n                [8, 170, 7, 3],\r\n                [8, 171, 7, 1],\r\n                [8, 172, 16, 9],\r\n                [8, 173, 7, 16],\r\n                [8, 174, 1, 16],\r\n                [8, 175, 1, 7],\r\n                [8, 176, 4, 7],\r\n                [8, 177, 16, 11],\r\n                [8, 178, 7, 4],\r\n                [8, 179, 16, 12],\r\n                [8, 180, 8, 16],\r\n                [8, 181, 16, 1],\r\n                [8, 182, 6, 6],\r\n                [8, 183, 9, 16],\r\n                [8, 184, 2, 8],\r\n                [8, 185, 5, 7],\r\n                [8, 186, 10, 16],\r\n                [8, 187, 16, 13],\r\n                [8, 188, 8, 3],\r\n                [8, 189, 8, 2],\r\n                [8, 190, 3, 8],\r\n                [8, 191, 5, 0],\r\n                [8, 192, 16, 14],\r\n                [8, 193, 11, 16],\r\n                [8, 194, 7, 5],\r\n                [8, 195, 4, 8],\r\n                [8, 196, 6, 7],\r\n                [8, 197, 7, 6],\r\n                [8, 198, 0, 5],\r\n                [9, 398, 8, 4],\r\n                [9, 399, 16, 15],\r\n                [9, 400, 12, 16],\r\n                [9, 401, 1, 8],\r\n                [9, 402, 8, 1],\r\n                [9, 403, 14, 16],\r\n                [9, 404, 5, 8],\r\n                [9, 405, 13, 16],\r\n                [9, 406, 3, 9],\r\n                [9, 407, 8, 5],\r\n                [9, 408, 7, 7],\r\n                [9, 409, 2, 9],\r\n                [9, 410, 8, 6],\r\n                [9, 411, 9, 2],\r\n                [9, 412, 9, 3],\r\n                [9, 413, 15, 16],\r\n                [9, 414, 4, 9],\r\n                [9, 415, 6, 8],\r\n                [9, 416, 6, 0],\r\n                [9, 417, 9, 4],\r\n                [9, 418, 5, 9],\r\n                [9, 419, 8, 7],\r\n                [9, 420, 7, 8],\r\n                [9, 421, 1, 9],\r\n                [9, 422, 10, 3],\r\n                [9, 423, 0, 6],\r\n                [9, 424, 10, 2],\r\n                [9, 425, 9, 1],\r\n                [9, 426, 9, 5],\r\n                [9, 427, 4, 10],\r\n                [9, 428, 2, 10],\r\n                [9, 429, 9, 6],\r\n                [9, 430, 3, 10],\r\n                [9, 431, 6, 9],\r\n                [9, 432, 10, 4],\r\n                [9, 433, 8, 8],\r\n                [9, 434, 10, 5],\r\n                [9, 435, 9, 7],\r\n                [9, 436, 11, 3],\r\n                [9, 437, 1, 10],\r\n                [9, 438, 7, 0],\r\n                [9, 439, 10, 6],\r\n                [9, 440, 7, 9],\r\n                [9, 441, 3, 11],\r\n                [9, 442, 5, 10],\r\n                [9, 443, 10, 1],\r\n                [9, 444, 4, 11],\r\n                [9, 445, 11, 2],\r\n                [9, 446, 13, 2],\r\n                [9, 447, 6, 10],\r\n                [9, 448, 13, 3],\r\n                [9, 449, 2, 11],\r\n                [9, 450, 16, 0],\r\n                [9, 451, 5, 11],\r\n                [9, 452, 11, 5],\r\n                [10, 906, 11, 4],\r\n                [10, 907, 9, 8],\r\n                [10, 908, 7, 10],\r\n                [10, 909, 8, 9],\r\n                [10, 910, 0, 16],\r\n                [10, 911, 4, 13],\r\n                [10, 912, 0, 7],\r\n                [10, 913, 3, 13],\r\n                [10, 914, 11, 6],\r\n                [10, 915, 13, 1],\r\n                [10, 916, 13, 4],\r\n                [10, 917, 12, 3],\r\n                [10, 918, 2, 13],\r\n                [10, 919, 13, 5],\r\n                [10, 920, 8, 10],\r\n                [10, 921, 6, 11],\r\n                [10, 922, 10, 8],\r\n                [10, 923, 10, 7],\r\n                [10, 924, 14, 2],\r\n                [10, 925, 12, 4],\r\n                [10, 926, 1, 11],\r\n                [10, 927, 4, 12],\r\n                [10, 928, 11, 1],\r\n                [10, 929, 3, 12],\r\n                [10, 930, 1, 13],\r\n                [10, 931, 12, 2],\r\n                [10, 932, 7, 11],\r\n                [10, 933, 3, 14],\r\n                [10, 934, 5, 12],\r\n                [10, 935, 5, 13],\r\n                [10, 936, 14, 4],\r\n                [10, 937, 4, 14],\r\n                [10, 938, 11, 7],\r\n                [10, 939, 14, 3],\r\n                [10, 940, 12, 5],\r\n                [10, 941, 13, 6],\r\n                [10, 942, 12, 6],\r\n                [10, 943, 8, 0],\r\n                [10, 944, 11, 8],\r\n                [10, 945, 2, 12],\r\n                [10, 946, 9, 9],\r\n                [10, 947, 14, 5],\r\n                [10, 948, 6, 13],\r\n                [10, 949, 10, 10],\r\n                [10, 950, 15, 2],\r\n                [10, 951, 8, 11],\r\n                [10, 952, 9, 10],\r\n                [10, 953, 14, 6],\r\n                [10, 954, 10, 9],\r\n                [10, 955, 5, 14],\r\n                [10, 956, 11, 9],\r\n                [10, 957, 14, 1],\r\n                [10, 958, 2, 14],\r\n                [10, 959, 6, 12],\r\n                [10, 960, 1, 12],\r\n                [10, 961, 13, 8],\r\n                [10, 962, 0, 8],\r\n                [10, 963, 13, 7],\r\n                [10, 964, 7, 12],\r\n                [10, 965, 12, 7],\r\n                [10, 966, 7, 13],\r\n                [10, 967, 15, 3],\r\n                [10, 968, 12, 1],\r\n                [10, 969, 6, 14],\r\n                [10, 970, 2, 15],\r\n                [10, 971, 15, 5],\r\n                [10, 972, 15, 4],\r\n                [10, 973, 1, 14],\r\n                [10, 974, 9, 11],\r\n                [10, 975, 4, 15],\r\n                [10, 976, 14, 7],\r\n                [10, 977, 8, 13],\r\n                [10, 978, 13, 9],\r\n                [10, 979, 8, 12],\r\n                [10, 980, 5, 15],\r\n                [10, 981, 3, 15],\r\n                [10, 982, 10, 11],\r\n                [10, 983, 11, 10],\r\n                [10, 984, 12, 8],\r\n                [10, 985, 15, 6],\r\n                [10, 986, 15, 7],\r\n                [10, 987, 8, 14],\r\n                [10, 988, 15, 1],\r\n                [10, 989, 7, 14],\r\n                [10, 990, 9, 0],\r\n                [10, 991, 0, 9],\r\n                [10, 992, 9, 13],\r\n                [10, 993, 9, 12],\r\n                [10, 994, 12, 9],\r\n                [10, 995, 14, 8],\r\n                [10, 996, 10, 13],\r\n                [10, 997, 14, 9],\r\n                [10, 998, 12, 10],\r\n                [10, 999, 6, 15],\r\n                [10, 1000, 7, 15],\r\n                [11, 2002, 9, 14],\r\n                [11, 2003, 15, 8],\r\n                [11, 2004, 11, 11],\r\n                [11, 2005, 11, 14],\r\n                [11, 2006, 1, 15],\r\n                [11, 2007, 10, 12],\r\n                [11, 2008, 10, 14],\r\n                [11, 2009, 13, 11],\r\n                [11, 2010, 13, 10],\r\n                [11, 2011, 11, 13],\r\n                [11, 2012, 11, 12],\r\n                [11, 2013, 8, 15],\r\n                [11, 2014, 14, 11],\r\n                [11, 2015, 13, 12],\r\n                [11, 2016, 12, 13],\r\n                [11, 2017, 15, 9],\r\n                [11, 2018, 14, 10],\r\n                [11, 2019, 10, 0],\r\n                [11, 2020, 12, 11],\r\n                [11, 2021, 9, 15],\r\n                [11, 2022, 0, 10],\r\n                [11, 2023, 12, 12],\r\n                [11, 2024, 11, 0],\r\n                [11, 2025, 12, 14],\r\n                [11, 2026, 10, 15],\r\n                [11, 2027, 13, 13],\r\n                [11, 2028, 0, 13],\r\n                [11, 2029, 14, 12],\r\n                [11, 2030, 15, 10],\r\n                [11, 2031, 15, 11],\r\n                [11, 2032, 11, 15],\r\n                [11, 2033, 14, 13],\r\n                [11, 2034, 13, 0],\r\n                [11, 2035, 0, 11],\r\n                [11, 2036, 13, 14],\r\n                [11, 2037, 15, 12],\r\n                [11, 2038, 15, 13],\r\n                [11, 2039, 12, 15],\r\n                [11, 2040, 14, 0],\r\n                [11, 2041, 14, 14],\r\n                [11, 2042, 13, 15],\r\n                [11, 2043, 12, 0],\r\n                [11, 2044, 14, 15],\r\n                [12, 4090, 0, 14],\r\n                [12, 4091, 0, 12],\r\n                [12, 4092, 15, 14],\r\n                [12, 4093, 15, 0],\r\n                [12, 4094, 0, 15],\r\n                [12, 4095, 15, 15]\r\n            ];\r\n    \r\n            var HCB_SF = [\r\n                [1, 0, 60],\r\n                [3, 4, 59],\r\n                [4, 10, 61],\r\n                [4, 11, 58],\r\n                [4, 12, 62],\r\n                [5, 26, 57],\r\n                [5, 27, 63],\r\n                [6, 56, 56],\r\n                [6, 57, 64],\r\n                [6, 58, 55],\r\n                [6, 59, 65],\r\n                [7, 120, 66],\r\n                [7, 121, 54],\r\n                [7, 122, 67],\r\n                [8, 246, 53],\r\n                [8, 247, 68],\r\n                [8, 248, 52],\r\n                [8, 249, 69],\r\n                [8, 250, 51],\r\n                [9, 502, 70],\r\n                [9, 503, 50],\r\n                [9, 504, 49],\r\n                [9, 505, 71],\r\n                [10, 1012, 72],\r\n                [10, 1013, 48],\r\n                [10, 1014, 73],\r\n                [10, 1015, 47],\r\n                [10, 1016, 74],\r\n                [10, 1017, 46],\r\n                [11, 2036, 76],\r\n                [11, 2037, 75],\r\n                [11, 2038, 77],\r\n                [11, 2039, 78],\r\n                [11, 2040, 45],\r\n                [11, 2041, 43],\r\n                [12, 4084, 44],\r\n                [12, 4085, 79],\r\n                [12, 4086, 42],\r\n                [12, 4087, 41],\r\n                [12, 4088, 80],\r\n                [12, 4089, 40],\r\n                [13, 8180, 81],\r\n                [13, 8181, 39],\r\n                [13, 8182, 82],\r\n                [13, 8183, 38],\r\n                [13, 8184, 83],\r\n                [14, 16370, 37],\r\n                [14, 16371, 35],\r\n                [14, 16372, 85],\r\n                [14, 16373, 33],\r\n                [14, 16374, 36],\r\n                [14, 16375, 34],\r\n                [14, 16376, 84],\r\n                [14, 16377, 32],\r\n                [15, 32756, 87],\r\n                [15, 32757, 89],\r\n                [15, 32758, 30],\r\n                [15, 32759, 31],\r\n                [16, 65520, 86],\r\n                [16, 65521, 29],\r\n                [16, 65522, 26],\r\n                [16, 65523, 27],\r\n                [16, 65524, 28],\r\n                [16, 65525, 24],\r\n                [16, 65526, 88],\r\n                [17, 131054, 25],\r\n                [17, 131055, 22],\r\n                [17, 131056, 23],\r\n                [18, 262114, 90],\r\n                [18, 262115, 21],\r\n                [18, 262116, 19],\r\n                [18, 262117, 3],\r\n                [18, 262118, 1],\r\n                [18, 262119, 2],\r\n                [18, 262120, 0],\r\n                [19, 524242, 98],\r\n                [19, 524243, 99],\r\n                [19, 524244, 100],\r\n                [19, 524245, 101],\r\n                [19, 524246, 102],\r\n                [19, 524247, 117],\r\n                [19, 524248, 97],\r\n                [19, 524249, 91],\r\n                [19, 524250, 92],\r\n                [19, 524251, 93],\r\n                [19, 524252, 94],\r\n                [19, 524253, 95],\r\n                [19, 524254, 96],\r\n                [19, 524255, 104],\r\n                [19, 524256, 111],\r\n                [19, 524257, 112],\r\n                [19, 524258, 113],\r\n                [19, 524259, 114],\r\n                [19, 524260, 115],\r\n                [19, 524261, 116],\r\n                [19, 524262, 110],\r\n                [19, 524263, 105],\r\n                [19, 524264, 106],\r\n                [19, 524265, 107],\r\n                [19, 524266, 108],\r\n                [19, 524267, 109],\r\n                [19, 524268, 118],\r\n                [19, 524269, 6],\r\n                [19, 524270, 8],\r\n                [19, 524271, 9],\r\n                [19, 524272, 10],\r\n                [19, 524273, 5],\r\n                [19, 524274, 103],\r\n                [19, 524275, 120],\r\n                [19, 524276, 119],\r\n                [19, 524277, 4],\r\n                [19, 524278, 7],\r\n                [19, 524279, 15],\r\n                [19, 524280, 16],\r\n                [19, 524281, 18],\r\n                [19, 524282, 20],\r\n                [19, 524283, 17],\r\n                [19, 524284, 11],\r\n                [19, 524285, 12],\r\n                [19, 524286, 14],\r\n                [19, 524287, 13]\r\n            ];\r\n    \r\n            var CODEBOOKS = [HCB1, HCB2, HCB3, HCB4, HCB5, HCB6, HCB7, HCB8, HCB9, HCB10, HCB11];\r\n            var UNSIGNED = [false, false, true, true, false, false, true, true, true, true, true],\r\n                QUAD_LEN = 4,\r\n                PAIR_LEN = 2;\r\n    \r\n            return {\r\n                findOffset: function(stream, table) {\r\n                    var off = 0,\r\n                        len = table[off][0],\r\n                        cw = stream.read(len);\r\n    \r\n                    while (cw !== table[off][1]) {\r\n                        var j = table[++off][0] - len;\r\n                        len = table[off][0];\r\n                        cw <<= j;\r\n                        cw |= stream.read(j);\r\n                    }\r\n    \r\n                    return off;\r\n                },\r\n    \r\n                signValues: function(stream, data, off, len) {\r\n                    for (var i = off; i < off + len; i++) {\r\n                        if (data[i] && stream.read(1))\r\n                            data[i] = -data[i];\r\n                    }\r\n                },\r\n    \r\n                getEscape: function(stream, s) {\r\n                    var i = 4;\r\n                    while (stream.read(1))\r\n                        i++;\r\n    \r\n                    var j = stream.read(i) | (1 << i);\r\n                    return s < 0 ? -j : j;\r\n                },\r\n    \r\n                decodeScaleFactor: function(stream) {\r\n                    var offset = this.findOffset(stream, HCB_SF);\r\n                    return HCB_SF[offset][2];\r\n                },\r\n    \r\n                decodeSpectralData: function(stream, cb, data, off) {\r\n                    var HCB = CODEBOOKS[cb - 1],\r\n                        offset = this.findOffset(stream, HCB);\r\n    \r\n                    data[off] = HCB[offset][2];\r\n                    data[off + 1] = HCB[offset][3];\r\n    \r\n                    if (cb < 5) {\r\n                        data[off + 2] = HCB[offset][4];\r\n                        data[off + 3] = HCB[offset][5];\r\n                    }\r\n    \r\n                    // sign and escape\r\n                    if (cb < 11) {\r\n                        if (UNSIGNED[cb - 1])\r\n                            this.signValues(stream, data, off, cb < 5 ? QUAD_LEN : PAIR_LEN);\r\n    \r\n                    } else if (cb === 11 || cb > 15) {\r\n                        this.signValues(stream, data, off, cb < 5 ? QUAD_LEN : PAIR_LEN);\r\n    \r\n                        if (Math.abs(data[off]) === 16)\r\n                            data[off] = this.getEscape(stream, data[off]);\r\n    \r\n                        if (Math.abs(data[off + 1]) === 16)\r\n                            data[off + 1] = this.getEscape(stream, data[off + 1]);\r\n                    } else {\r\n                        throw new Error(\"Huffman: unknown spectral codebook: \" + cb);\r\n                    }\r\n                }\r\n            };\r\n        })();\r\n    \r\n        // Individual Channel Stream\r\n        var ICStream = (function() {\r\n            function ICStream(config) {\r\n                this.info = new ICSInfo();\r\n                this.bandTypes = new Int32Array(MAX_SECTIONS);\r\n                this.sectEnd = new Int32Array(MAX_SECTIONS);\r\n                this.data = new Float32Array(config.frameLength);\r\n                this.scaleFactors = new Float32Array(MAX_SECTIONS);\r\n                this.randomState = 0x1F2E3D4C;\r\n                this.tns = new TNS(config);\r\n                this.specBuf = new Int32Array(4);\r\n            }\r\n    \r\n            ICStream.ZERO_BT = 0;         // Scalefactors and spectral data are all zero.\r\n            ICStream.FIRST_PAIR_BT = 5;   // This and later band types encode two values (rather than four) with one code word.\r\n            ICStream.ESC_BT = 11;         // Spectral data are coded with an escape sequence.\r\n            ICStream.NOISE_BT = 13;       // Spectral data are scaled white noise not coded in the bitstream.\r\n            ICStream.INTENSITY_BT2 = 14;  // Scalefactor data are intensity stereo positions.\r\n            ICStream.INTENSITY_BT = 15;   // Scalefactor data are intensity stereo positions.\r\n    \r\n            ICStream.ONLY_LONG_SEQUENCE = 0;\r\n            ICStream.LONG_START_SEQUENCE = 1;\r\n            ICStream.EIGHT_SHORT_SEQUENCE = 2;\r\n            ICStream.LONG_STOP_SEQUENCE = 3;\r\n    \r\n            var MAX_SECTIONS = 120,\r\n                MAX_WINDOW_GROUP_COUNT = 8;\r\n    \r\n            var SF_DELTA = 60,\r\n                SF_OFFSET = 200;\r\n    \r\n            ICStream.prototype = {\r\n                decode: function (stream, config, commonWindow) {\r\n                    this.globalGain = stream.read(8);\r\n    \r\n                    if (!commonWindow)\r\n                        this.info.decode(stream, config, commonWindow);\r\n    \r\n                    this.decodeBandTypes(stream, config);\r\n                    this.decodeScaleFactors(stream);\r\n    \r\n                    if (this.pulsePresent = stream.read(1)) {\r\n                        if (this.info.windowSequence === ICStream.EIGHT_SHORT_SEQUENCE)\r\n                            throw new Error(\"Pulse tool not allowed in eight short sequence.\");\r\n    \r\n                        this.decodePulseData(stream);\r\n                    }\r\n    \r\n                    if (this.tnsPresent = stream.read(1)) {\r\n                        this.tns.decode(stream, this.info);\r\n                    }\r\n    \r\n                    if (this.gainPresent = stream.read(1)) {\r\n                        throw new Error(\"TODO: decode gain control/SSR\");\r\n                    }\r\n    \r\n                    this.decodeSpectralData(stream);\r\n                },\r\n    \r\n                decodeBandTypes: function (stream, config) {\r\n                    var bits = this.info.windowSequence === ICStream.EIGHT_SHORT_SEQUENCE ? 3 : 5,\r\n                        groupCount = this.info.groupCount,\r\n                        maxSFB = this.info.maxSFB,\r\n                        bandTypes = this.bandTypes,\r\n                        sectEnd = this.sectEnd,\r\n                        idx = 0,\r\n                        escape = (1 << bits) - 1;\r\n    \r\n                    for (var g = 0; g < groupCount; g++) {\r\n                        var k = 0;\r\n                        while (k < maxSFB) {\r\n                            var end = k,\r\n                                bandType = stream.read(4);\r\n    \r\n                            if (bandType === 12)\r\n                                throw new Error(\"Invalid band type: 12\");\r\n    \r\n                            var incr;\r\n                            while ((incr = stream.read(bits)) === escape)\r\n                                end += incr;\r\n    \r\n                            end += incr;\r\n    \r\n                            if (end > maxSFB)\r\n                                throw new Error(\"Too many bands (\" + end + \" > \" + maxSFB + \")\");\r\n    \r\n                            for (; k < end; k++) {\r\n                                bandTypes[idx] = bandType;\r\n                                sectEnd[idx++] = end;\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n    \r\n                decodeScaleFactors: function (stream) {\r\n                    var groupCount = this.info.groupCount,\r\n                        maxSFB = this.info.maxSFB,\r\n                        offset = [this.globalGain, this.globalGain - 90, 0], // spectrum, noise, intensity\r\n                        idx = 0,\r\n                        noiseFlag = true,\r\n                        scaleFactors = this.scaleFactors,\r\n                        sectEnd = this.sectEnd,\r\n                        bandTypes = this.bandTypes;\r\n    \r\n                    for (var g = 0; g < groupCount; g++) {\r\n                        for (var i = 0; i < maxSFB;) {\r\n                            var runEnd = sectEnd[idx];\r\n    \r\n                            switch (bandTypes[idx]) {\r\n                                case ICStream.ZERO_BT:\r\n                                    for (; i < runEnd; i++, idx++) {\r\n                                        scaleFactors[idx] = 0;\r\n                                    }\r\n                                    break;\r\n    \r\n                                case ICStream.INTENSITY_BT:\r\n                                case ICStream.INTENSITY_BT2:\r\n                                    for (; i < runEnd; i++, idx++) {\r\n                                        offset[2] += Huffman.decodeScaleFactor(stream) - SF_DELTA;\r\n                                        var tmp = Math.min(Math.max(offset[2], -155), 100);\r\n                                        scaleFactors[idx] = SCALEFACTOR_TABLE[-tmp + SF_OFFSET];\r\n                                    }\r\n                                    break;\r\n    \r\n                                case ICStream.NOISE_BT:\r\n                                    for (; i < runEnd; i++, idx++) {\r\n                                        if (noiseFlag) {\r\n                                            offset[1] += stream.read(9) - 256;\r\n                                            noiseFlag = false;\r\n                                        } else {\r\n                                            offset[1] += Huffman.decodeScaleFactor(stream) - SF_DELTA;\r\n                                        }\r\n                                        var tmp = Math.min(Math.max(offset[1], -100), 155);\r\n                                        scaleFactors[idx] = -SCALEFACTOR_TABLE[tmp + SF_OFFSET];\r\n                                    }\r\n                                    break;\r\n    \r\n                                default:\r\n                                    for (; i < runEnd; i++, idx++) {\r\n                                        offset[0] += Huffman.decodeScaleFactor(stream) - SF_DELTA;\r\n                                        if (offset[0] > 255)\r\n                                            throw new Error(\"Scalefactor out of range: \" + offset[0]);\r\n    \r\n                                        scaleFactors[idx] = SCALEFACTOR_TABLE[offset[0] - 100 + SF_OFFSET];\r\n                                    }\r\n                                    break;\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n    \r\n                decodePulseData: function (stream) {\r\n                    var pulseCount = stream.read(2) + 1,\r\n                        pulseSWB = stream.read(6);\r\n    \r\n                    if (pulseSWB >= this.info.swbCount)\r\n                        throw new Error(\"Pulse SWB out of range: \" + pulseSWB);\r\n    \r\n                    if (!this.pulseOffset || this.pulseOffset.length !== pulseCount) {\r\n                        // only reallocate if needed\r\n                        this.pulseOffset = new Int32Array(pulseCount);\r\n                        this.pulseAmp = new Int32Array(pulseCount);\r\n                    }\r\n    \r\n                    this.pulseOffset[0] = this.info.swbOffsets[pulseSWB] + stream.read(5);\r\n                    this.pulseAmp[0] = stream.read(4);\r\n    \r\n                    if (this.pulseOffset[0] > 1023)\r\n                        throw new Error(\"Pulse offset out of range: \" + this.pulseOffset[0]);\r\n    \r\n                    for (var i = 1; i < pulseCount; i++) {\r\n                        this.pulseOffset[i] = stream.read(5) + this.pulseOffset[i - 1];\r\n                        if (this.pulseOffset[i] > 1023)\r\n                            throw new Error(\"Pulse offset out of range: \" + this.pulseOffset[i]);\r\n    \r\n                        this.pulseAmp[i] = stream.read(4);\r\n                    }\r\n                },\r\n    \r\n                decodeSpectralData: function (stream) {\r\n                    var data = this.data,\r\n                        info = this.info,\r\n                        maxSFB = info.maxSFB,\r\n                        windowGroups = info.groupCount,\r\n                        offsets = info.swbOffsets,\r\n                        bandTypes = this.bandTypes,\r\n                        scaleFactors = this.scaleFactors,\r\n                        buf = this.specBuf;\r\n    \r\n                    var groupOff = 0, idx = 0;\r\n                    for (var g = 0; g < windowGroups; g++) {\r\n                        var groupLen = info.groupLength[g];\r\n    \r\n                        for (var sfb = 0; sfb < maxSFB; sfb++, idx++) {\r\n                            var hcb = bandTypes[idx],\r\n                                off = groupOff + offsets[sfb],\r\n                                width = offsets[sfb + 1] - offsets[sfb];\r\n    \r\n                            if (hcb === ICStream.ZERO_BT || hcb === ICStream.INTENSITY_BT || hcb === ICStream.INTENSITY_BT2) {\r\n                                for (var group = 0; group < groupLen; group++, off += 128) {\r\n                                    for (var i = off; i < off + width; i++) {\r\n                                        data[i] = 0;\r\n                                    }\r\n                                }\r\n                            } else if (hcb === ICStream.NOISE_BT) {\r\n                                // fill with random values\r\n                                for (var group = 0; group < groupLen; group++, off += 128) {\r\n                                    var energy = 0;\r\n    \r\n                                    for (var k = 0; k < width; k++) {\r\n                                        this.randomState = (this.randomState * (1664525 + 1013904223)) | 0;\r\n                                        data[off + k] = this.randomState;\r\n                                        energy += data[off + k] * data[off + k];\r\n                                    }\r\n    \r\n                                    var scale = scaleFactors[idx] / Math.sqrt(energy);\r\n                                    for (var k = 0; k < width; k++) {\r\n                                        data[off + k] *= scale;\r\n                                    }\r\n                                }\r\n                            } else {\r\n                                for (var group = 0; group < groupLen; group++, off += 128) {\r\n                                    var num = (hcb >= ICStream.FIRST_PAIR_BT) ? 2 : 4;\r\n                                    for (var k = 0; k < width; k += num) {\r\n                                        Huffman.decodeSpectralData(stream, hcb, buf, 0);\r\n    \r\n                                        // inverse quantization & scaling\r\n                                        for (var j = 0; j < num; j++) {\r\n                                            data[off + k + j] = (buf[j] > 0) ? IQ_TABLE[buf[j]] : -IQ_TABLE[-buf[j]];\r\n                                            data[off + k + j] *= scaleFactors[idx];\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        groupOff += groupLen << 7;\r\n                    }\r\n    \r\n                    // add pulse data, if present\r\n                    if (this.pulsePresent) {\r\n                        throw new Error('TODO: add pulse data');\r\n                    }\r\n                }\r\n            }\r\n    \r\n            // Individual Channel Stream Info\r\n            function ICSInfo() {\r\n                this.windowShape = new Int32Array(2);\r\n                this.windowSequence = ICStream.ONLY_LONG_SEQUENCE;\r\n                this.groupLength = new Int32Array(MAX_WINDOW_GROUP_COUNT);\r\n                this.ltpData1Present = false;\r\n                this.ltpData2Present = false;\r\n            }\r\n    \r\n            ICSInfo.prototype = {\r\n                decode: function (stream, config, commonWindow) {\r\n                    stream.advance(1); // reserved\r\n    \r\n                    this.windowSequence = stream.read(2);\r\n                    this.windowShape[0] = this.windowShape[1];\r\n                    this.windowShape[1] = stream.read(1);\r\n    \r\n                    this.groupCount = 1;\r\n                    this.groupLength[0] = 1;\r\n    \r\n                    if (this.windowSequence === ICStream.EIGHT_SHORT_SEQUENCE) {\r\n                        this.maxSFB = stream.read(4);\r\n                        for (var i = 0; i < 7; i++) {\r\n                            if (stream.read(1)) {\r\n                                this.groupLength[this.groupCount - 1]++;\r\n                            } else {\r\n                                this.groupCount++;\r\n                                this.groupLength[this.groupCount - 1] = 1;\r\n                            }\r\n                        }\r\n    \r\n                        this.windowCount = 8;\r\n                        this.swbOffsets = SWB_OFFSET_128[config.sampleIndex];\r\n                        this.swbCount = SWB_SHORT_WINDOW_COUNT[config.sampleIndex];\r\n                        this.predictorPresent = false;\r\n                    } else {\r\n                        this.maxSFB = stream.read(6);\r\n                        this.windowCount = 1;\r\n                        this.swbOffsets = SWB_OFFSET_1024[config.sampleIndex];\r\n                        this.swbCount = SWB_LONG_WINDOW_COUNT[config.sampleIndex];\r\n                        this.predictorPresent = !!stream.read(1);\r\n    \r\n                        if (this.predictorPresent)\r\n                            this.decodePrediction(stream, config, commonWindow);\r\n                    }\r\n                },\r\n    \r\n                decodePrediction: function (stream, config, commonWindow) {\r\n                    throw new Error('Prediction not implemented.');\r\n    \r\n                    switch (config.profile) {\r\n                        case AOT_AAC_MAIN:\r\n                            throw new Error('Prediction not implemented.');\r\n                            break;\r\n    \r\n                        case AOT_AAC_LTP:\r\n                            throw new Error('LTP prediction not implemented.');\r\n                            break;\r\n    \r\n                        default:\r\n                            throw new Error('Unsupported profile for prediction ' + config.profile);\r\n                    }\r\n                }\r\n            };\r\n    \r\n            return ICStream;\r\n        })();\r\n    \r\n        // Modified Discrete Cosine Transform\r\n        var MDCT = (function(){\r\n            function MDCT(length) {\r\n                this.N = length;\r\n                this.N2 = length >>> 1;\r\n                this.N4 = length >>> 2;\r\n                this.N8 = length >>> 3;\r\n    \r\n                switch (length) {\r\n                    case 2048:\r\n                        this.sincos = MDCT_TABLE_2048;\r\n                        break;\r\n    \r\n                    case 256:\r\n                        this.sincos = MDCT_TABLE_256;\r\n                        break;\r\n    \r\n                    case 1920:\r\n                        this.sincos = MDCT_TABLE_1920;\r\n                        break;\r\n    \r\n                    case 240:\r\n                        this.sincos = MDCT_TABLE_240;\r\n                        break;\r\n    \r\n                    default:\r\n                        throw new Error(\"unsupported MDCT length: \" + length);\r\n                }\r\n    \r\n                this.fft = new FFT(this.N4);\r\n    \r\n                this.buf = new Array(this.N4);\r\n                for (var i = 0; i < this.N4; i++) {\r\n                    this.buf[i] = new Float32Array(2);\r\n                }\r\n    \r\n                this.tmp = new Float32Array(2);\r\n            }\r\n    \r\n            MDCT.prototype.process = function(input, inOffset, output, outOffset) {\r\n                // local access\r\n                var N2 = this.N2,\r\n                    N4 = this.N4,\r\n                    N8 = this.N8,\r\n                    buf = this.buf,\r\n                    tmp = this.tmp,\r\n                    sincos = this.sincos,\r\n                    fft = this.fft;\r\n    \r\n                // pre-IFFT complex multiplication\r\n                for (var k = 0; k < N4; k++) {\r\n                    buf[k][1] = (input[inOffset + 2 * k] * sincos[k][0]) + (input[inOffset + N2 - 1 - 2 * k] * sincos[k][1]);\r\n                    buf[k][0] = (input[inOffset + N2 - 1 - 2 * k] * sincos[k][0]) - (input[inOffset + 2 * k] * sincos[k][1]);\r\n                }\r\n    \r\n                // complex IFFT, non-scaling\r\n                fft.process(buf, false);\r\n    \r\n                // post-IFFT complex multiplication\r\n                for (var k = 0; k < N4; k++) {\r\n                    tmp[0] = buf[k][0];\r\n                    tmp[1] = buf[k][1];\r\n                    buf[k][1] = (tmp[1] * sincos[k][0]) + (tmp[0] * sincos[k][1]);\r\n                    buf[k][0] = (tmp[0] * sincos[k][0]) - (tmp[1] * sincos[k][1]);\r\n                }\r\n    \r\n                // reordering\r\n                for (var k = 0; k < N8; k += 2) {\r\n                    output[outOffset + 2 * k] = buf[N8 + k][1];\r\n                    output[outOffset + 2 + 2 * k] = buf[N8 + 1 + k][1];\r\n    \r\n                    output[outOffset + 1 + 2 * k] = -buf[N8 - 1 - k][0];\r\n                    output[outOffset + 3 + 2 * k] = -buf[N8 - 2 - k][0];\r\n    \r\n                    output[outOffset + N4 + 2 * k] = buf[k][0];\r\n                    output[outOffset + N4 + 2 + 2 * k] = buf[1 + k][0];\r\n    \r\n                    output[outOffset + N4 + 1 + 2 * k] = -buf[N4 - 1 - k][1];\r\n                    output[outOffset + N4 + 3 + 2 * k] = -buf[N4 - 2 - k][1];\r\n    \r\n                    output[outOffset + N2 + 2 * k] = buf[N8 + k][0];\r\n                    output[outOffset + N2 + 2 + 2 * k] = buf[N8 + 1 + k][0];\r\n    \r\n                    output[outOffset + N2 + 1 + 2 * k] = -buf[N8 - 1 - k][1];\r\n                    output[outOffset + N2 + 3 + 2 * k] = -buf[N8 - 2 - k][1];\r\n    \r\n                    output[outOffset + N2 + N4 + 2 * k] = -buf[k][1];\r\n                    output[outOffset + N2 + N4 + 2 + 2 * k] = -buf[1 + k][1];\r\n    \r\n                    output[outOffset + N2 + N4 + 1 + 2 * k] = buf[N4 - 1 - k][0];\r\n                    output[outOffset + N2 + N4 + 3 + 2 * k] = buf[N4 - 2 - k][0];\r\n                }\r\n            };\r\n            return MDCT;\r\n        })();\r\n    \r\n        var MDCT_TABLE_2048 = [\r\n            [0.031249997702054, 0.000011984224612],\r\n            [0.031249813866531, 0.000107857810004],\r\n            [0.031249335895858, 0.000203730380198],\r\n            [0.031248563794535, 0.000299601032804],\r\n            [0.031247497569829, 0.000395468865451],\r\n            [0.031246137231775, 0.000491332975794],\r\n            [0.031244482793177, 0.000587192461525],\r\n            [0.031242534269608, 0.000683046420376],\r\n            [0.031240291679407, 0.000778893950134],\r\n            [0.031237755043684, 0.000874734148645],\r\n            [0.031234924386313, 0.000970566113826],\r\n            [0.031231799733938, 0.001066388943669],\r\n            [0.031228381115970, 0.001162201736253],\r\n            [0.031224668564585, 0.001258003589751],\r\n            [0.031220662114728, 0.001353793602441],\r\n            [0.031216361804108, 0.001449570872710],\r\n            [0.031211767673203, 0.001545334499065],\r\n            [0.031206879765253, 0.001641083580144],\r\n            [0.031201698126266, 0.001736817214719],\r\n            [0.031196222805014, 0.001832534501709],\r\n            [0.031190453853031, 0.001928234540186],\r\n            [0.031184391324617, 0.002023916429386],\r\n            [0.031178035276836, 0.002119579268713],\r\n            [0.031171385769513, 0.002215222157753],\r\n            [0.031164442865236, 0.002310844196278],\r\n            [0.031157206629353, 0.002406444484258],\r\n            [0.031149677129975, 0.002502022121865],\r\n            [0.031141854437973, 0.002597576209488],\r\n            [0.031133738626977, 0.002693105847734],\r\n            [0.031125329773375, 0.002788610137442],\r\n            [0.031116627956316, 0.002884088179689],\r\n            [0.031107633257703, 0.002979539075801],\r\n            [0.031098345762200, 0.003074961927355],\r\n            [0.031088765557222, 0.003170355836197],\r\n            [0.031078892732942, 0.003265719904442],\r\n            [0.031068727382288, 0.003361053234488],\r\n            [0.031058269600939, 0.003456354929021],\r\n            [0.031047519487329, 0.003551624091024],\r\n            [0.031036477142640, 0.003646859823790],\r\n            [0.031025142670809, 0.003742061230921],\r\n            [0.031013516178519, 0.003837227416347],\r\n            [0.031001597775203, 0.003932357484328],\r\n            [0.030989387573042, 0.004027450539462],\r\n            [0.030976885686963, 0.004122505686697],\r\n            [0.030964092234638, 0.004217522031340],\r\n            [0.030951007336485, 0.004312498679058],\r\n            [0.030937631115663, 0.004407434735897],\r\n            [0.030923963698074, 0.004502329308281],\r\n            [0.030910005212362, 0.004597181503027],\r\n            [0.030895755789908, 0.004691990427350],\r\n            [0.030881215564835, 0.004786755188872],\r\n            [0.030866384674000, 0.004881474895632],\r\n            [0.030851263256996, 0.004976148656090],\r\n            [0.030835851456154, 0.005070775579142],\r\n            [0.030820149416533, 0.005165354774124],\r\n            [0.030804157285929, 0.005259885350819],\r\n            [0.030787875214864, 0.005354366419469],\r\n            [0.030771303356593, 0.005448797090784],\r\n            [0.030754441867095, 0.005543176475946],\r\n            [0.030737290905077, 0.005637503686619],\r\n            [0.030719850631972, 0.005731777834961],\r\n            [0.030702121211932, 0.005825998033626],\r\n            [0.030684102811835, 0.005920163395780],\r\n            [0.030665795601276, 0.006014273035101],\r\n            [0.030647199752570, 0.006108326065793],\r\n            [0.030628315440748, 0.006202321602594],\r\n            [0.030609142843557, 0.006296258760782],\r\n            [0.030589682141455, 0.006390136656185],\r\n            [0.030569933517616, 0.006483954405188],\r\n            [0.030549897157919, 0.006577711124743],\r\n            [0.030529573250956, 0.006671405932375],\r\n            [0.030508961988022, 0.006765037946194],\r\n            [0.030488063563118, 0.006858606284900],\r\n            [0.030466878172949, 0.006952110067791],\r\n            [0.030445406016919, 0.007045548414774],\r\n            [0.030423647297133, 0.007138920446372],\r\n            [0.030401602218392, 0.007232225283733],\r\n            [0.030379270988192, 0.007325462048634],\r\n            [0.030356653816724, 0.007418629863497],\r\n            [0.030333750916869, 0.007511727851390],\r\n            [0.030310562504198, 0.007604755136040],\r\n            [0.030287088796968, 0.007697710841838],\r\n            [0.030263330016124, 0.007790594093851],\r\n            [0.030239286385293, 0.007883404017824],\r\n            [0.030214958130781, 0.007976139740197],\r\n            [0.030190345481576, 0.008068800388104],\r\n            [0.030165448669342, 0.008161385089390],\r\n            [0.030140267928416, 0.008253892972610],\r\n            [0.030114803495809, 0.008346323167047],\r\n            [0.030089055611203, 0.008438674802711],\r\n            [0.030063024516947, 0.008530947010354],\r\n            [0.030036710458054, 0.008623138921475],\r\n            [0.030010113682202, 0.008715249668328],\r\n            [0.029983234439732, 0.008807278383932],\r\n            [0.029956072983640, 0.008899224202078],\r\n            [0.029928629569580, 0.008991086257336],\r\n            [0.029900904455860, 0.009082863685067],\r\n            [0.029872897903441, 0.009174555621425],\r\n            [0.029844610175929, 0.009266161203371],\r\n            [0.029816041539579, 0.009357679568679],\r\n            [0.029787192263292, 0.009449109855944],\r\n            [0.029758062618606, 0.009540451204587],\r\n            [0.029728652879702, 0.009631702754871],\r\n            [0.029698963323395, 0.009722863647900],\r\n            [0.029668994229134, 0.009813933025633],\r\n            [0.029638745879000, 0.009904910030891],\r\n            [0.029608218557702, 0.009995793807363],\r\n            [0.029577412552575, 0.010086583499618],\r\n            [0.029546328153577, 0.010177278253107],\r\n            [0.029514965653285, 0.010267877214177],\r\n            [0.029483325346896, 0.010358379530076],\r\n            [0.029451407532220, 0.010448784348962],\r\n            [0.029419212509679, 0.010539090819911],\r\n            [0.029386740582307, 0.010629298092923],\r\n            [0.029353992055740, 0.010719405318933],\r\n            [0.029320967238220, 0.010809411649818],\r\n            [0.029287666440590, 0.010899316238403],\r\n            [0.029254089976290, 0.010989118238474],\r\n            [0.029220238161353, 0.011078816804778],\r\n            [0.029186111314406, 0.011168411093039],\r\n            [0.029151709756664, 0.011257900259961],\r\n            [0.029117033811927, 0.011347283463239],\r\n            [0.029082083806579, 0.011436559861563],\r\n            [0.029046860069582, 0.011525728614630],\r\n            [0.029011362932476, 0.011614788883150],\r\n            [0.028975592729373, 0.011703739828853],\r\n            [0.028939549796957, 0.011792580614500],\r\n            [0.028903234474475, 0.011881310403886],\r\n            [0.028866647103744, 0.011969928361855],\r\n            [0.028829788029135, 0.012058433654299],\r\n            [0.028792657597583, 0.012146825448172],\r\n            [0.028755256158571, 0.012235102911499],\r\n            [0.028717584064137, 0.012323265213377],\r\n            [0.028679641668864, 0.012411311523990],\r\n            [0.028641429329882, 0.012499241014612],\r\n            [0.028602947406859, 0.012587052857618],\r\n            [0.028564196262001, 0.012674746226488],\r\n            [0.028525176260050, 0.012762320295819],\r\n            [0.028485887768276, 0.012849774241331],\r\n            [0.028446331156478, 0.012937107239875],\r\n            [0.028406506796976, 0.013024318469437],\r\n            [0.028366415064615, 0.013111407109155],\r\n            [0.028326056336751, 0.013198372339315],\r\n            [0.028285430993258, 0.013285213341368],\r\n            [0.028244539416515, 0.013371929297933],\r\n            [0.028203381991411, 0.013458519392807],\r\n            [0.028161959105334, 0.013544982810971],\r\n            [0.028120271148172, 0.013631318738598],\r\n            [0.028078318512309, 0.013717526363062],\r\n            [0.028036101592619, 0.013803604872943],\r\n            [0.027993620786463, 0.013889553458039],\r\n            [0.027950876493687, 0.013975371309367],\r\n            [0.027907869116616, 0.014061057619178],\r\n            [0.027864599060052, 0.014146611580959],\r\n            [0.027821066731270, 0.014232032389445],\r\n            [0.027777272540012, 0.014317319240622],\r\n            [0.027733216898487, 0.014402471331737],\r\n            [0.027688900221361, 0.014487487861307],\r\n            [0.027644322925762, 0.014572368029123],\r\n            [0.027599485431266, 0.014657111036262],\r\n            [0.027554388159903, 0.014741716085090],\r\n            [0.027509031536144, 0.014826182379271],\r\n            [0.027463415986904, 0.014910509123778],\r\n            [0.027417541941533, 0.014994695524894],\r\n            [0.027371409831816, 0.015078740790225],\r\n            [0.027325020091965, 0.015162644128704],\r\n            [0.027278373158618, 0.015246404750603],\r\n            [0.027231469470833, 0.015330021867534],\r\n            [0.027184309470088, 0.015413494692460],\r\n            [0.027136893600268, 0.015496822439704],\r\n            [0.027089222307671, 0.015580004324954],\r\n            [0.027041296040997, 0.015663039565269],\r\n            [0.026993115251345, 0.015745927379091],\r\n            [0.026944680392213, 0.015828666986247],\r\n            [0.026895991919487, 0.015911257607961],\r\n            [0.026847050291442, 0.015993698466859],\r\n            [0.026797855968734, 0.016075988786976],\r\n            [0.026748409414401, 0.016158127793763],\r\n            [0.026698711093851, 0.016240114714099],\r\n            [0.026648761474864, 0.016321948776289],\r\n            [0.026598561027585, 0.016403629210082],\r\n            [0.026548110224519, 0.016485155246669],\r\n            [0.026497409540530, 0.016566526118696],\r\n            [0.026446459452830, 0.016647741060271],\r\n            [0.026395260440982, 0.016728799306966],\r\n            [0.026343812986890, 0.016809700095831],\r\n            [0.026292117574797, 0.016890442665397],\r\n            [0.026240174691280, 0.016971026255683],\r\n            [0.026187984825246, 0.017051450108208],\r\n            [0.026135548467924, 0.017131713465990],\r\n            [0.026082866112867, 0.017211815573560],\r\n            [0.026029938255941, 0.017291755676967],\r\n            [0.025976765395322, 0.017371533023784],\r\n            [0.025923348031494, 0.017451146863116],\r\n            [0.025869686667242, 0.017530596445607],\r\n            [0.025815781807646, 0.017609881023449],\r\n            [0.025761633960080, 0.017688999850383],\r\n            [0.025707243634204, 0.017767952181715],\r\n            [0.025652611341960, 0.017846737274313],\r\n            [0.025597737597568, 0.017925354386623],\r\n            [0.025542622917522, 0.018003802778671],\r\n            [0.025487267820581, 0.018082081712071],\r\n            [0.025431672827768, 0.018160190450031],\r\n            [0.025375838462365, 0.018238128257362],\r\n            [0.025319765249906, 0.018315894400484],\r\n            [0.025263453718173, 0.018393488147432],\r\n            [0.025206904397193, 0.018470908767865],\r\n            [0.025150117819228, 0.018548155533070],\r\n            [0.025093094518776, 0.018625227715971],\r\n            [0.025035835032562, 0.018702124591135],\r\n            [0.024978339899534, 0.018778845434780],\r\n            [0.024920609660858, 0.018855389524780],\r\n            [0.024862644859912, 0.018931756140672],\r\n            [0.024804446042284, 0.019007944563666],\r\n            [0.024746013755764, 0.019083954076646],\r\n            [0.024687348550337, 0.019159783964183],\r\n            [0.024628450978184, 0.019235433512536],\r\n            [0.024569321593670, 0.019310902009663],\r\n            [0.024509960953345, 0.019386188745225],\r\n            [0.024450369615932, 0.019461293010596],\r\n            [0.024390548142329, 0.019536214098866],\r\n            [0.024330497095598, 0.019610951304848],\r\n            [0.024270217040961, 0.019685503925087],\r\n            [0.024209708545799, 0.019759871257867],\r\n            [0.024148972179639, 0.019834052603212],\r\n            [0.024088008514157, 0.019908047262901],\r\n            [0.024026818123164, 0.019981854540467],\r\n            [0.023965401582609, 0.020055473741208],\r\n            [0.023903759470567, 0.020128904172192],\r\n            [0.023841892367236, 0.020202145142264],\r\n            [0.023779800854935, 0.020275195962052],\r\n            [0.023717485518092, 0.020348055943974],\r\n            [0.023654946943242, 0.020420724402244],\r\n            [0.023592185719023, 0.020493200652878],\r\n            [0.023529202436167, 0.020565484013703],\r\n            [0.023465997687496, 0.020637573804361],\r\n            [0.023402572067918, 0.020709469346314],\r\n            [0.023338926174419, 0.020781169962854],\r\n            [0.023275060606058, 0.020852674979108],\r\n            [0.023210975963963, 0.020923983722044],\r\n            [0.023146672851322, 0.020995095520475],\r\n            [0.023082151873380, 0.021066009705072],\r\n            [0.023017413637435, 0.021136725608363],\r\n            [0.022952458752826, 0.021207242564742],\r\n            [0.022887287830934, 0.021277559910478],\r\n            [0.022821901485173, 0.021347676983716],\r\n            [0.022756300330983, 0.021417593124488],\r\n            [0.022690484985827, 0.021487307674717],\r\n            [0.022624456069185, 0.021556819978223],\r\n            [0.022558214202547, 0.021626129380729],\r\n            [0.022491760009405, 0.021695235229869],\r\n            [0.022425094115252, 0.021764136875192],\r\n            [0.022358217147572, 0.021832833668171],\r\n            [0.022291129735838, 0.021901324962204],\r\n            [0.022223832511501, 0.021969610112625],\r\n            [0.022156326107988, 0.022037688476709],\r\n            [0.022088611160696, 0.022105559413676],\r\n            [0.022020688306983, 0.022173222284699],\r\n            [0.021952558186166, 0.022240676452909],\r\n            [0.021884221439510, 0.022307921283403],\r\n            [0.021815678710228, 0.022374956143245],\r\n            [0.021746930643469, 0.022441780401478],\r\n            [0.021677977886316, 0.022508393429127],\r\n            [0.021608821087780, 0.022574794599206],\r\n            [0.021539460898790, 0.022640983286719],\r\n            [0.021469897972190, 0.022706958868676],\r\n            [0.021400132962735, 0.022772720724087],\r\n            [0.021330166527077, 0.022838268233979],\r\n            [0.021259999323769, 0.022903600781391],\r\n            [0.021189632013250, 0.022968717751391],\r\n            [0.021119065257845, 0.023033618531071],\r\n            [0.021048299721754, 0.023098302509561],\r\n            [0.020977336071050, 0.023162769078031],\r\n            [0.020906174973670, 0.023227017629698],\r\n            [0.020834817099409, 0.023291047559828],\r\n            [0.020763263119915, 0.023354858265748],\r\n            [0.020691513708680, 0.023418449146848],\r\n            [0.020619569541038, 0.023481819604585],\r\n            [0.020547431294155, 0.023544969042494],\r\n            [0.020475099647023, 0.023607896866186],\r\n            [0.020402575280455, 0.023670602483363],\r\n            [0.020329858877078, 0.023733085303813],\r\n            [0.020256951121327, 0.023795344739427],\r\n            [0.020183852699437, 0.023857380204193],\r\n            [0.020110564299439, 0.023919191114211],\r\n            [0.020037086611150, 0.023980776887692],\r\n            [0.019963420326171, 0.024042136944968],\r\n            [0.019889566137877, 0.024103270708495],\r\n            [0.019815524741412, 0.024164177602859],\r\n            [0.019741296833681, 0.024224857054779],\r\n            [0.019666883113346, 0.024285308493120],\r\n            [0.019592284280817, 0.024345531348888],\r\n            [0.019517501038246, 0.024405525055242],\r\n            [0.019442534089523, 0.024465289047500],\r\n            [0.019367384140264, 0.024524822763141],\r\n            [0.019292051897809, 0.024584125641809],\r\n            [0.019216538071215, 0.024643197125323],\r\n            [0.019140843371246, 0.024702036657681],\r\n            [0.019064968510369, 0.024760643685063],\r\n            [0.018988914202748, 0.024819017655836],\r\n            [0.018912681164234, 0.024877158020562],\r\n            [0.018836270112363, 0.024935064232003],\r\n            [0.018759681766343, 0.024992735745123],\r\n            [0.018682916847054, 0.025050172017095],\r\n            [0.018605976077037, 0.025107372507308],\r\n            [0.018528860180486, 0.025164336677369],\r\n            [0.018451569883247, 0.025221063991110],\r\n            [0.018374105912805, 0.025277553914591],\r\n            [0.018296468998280, 0.025333805916107],\r\n            [0.018218659870421, 0.025389819466194],\r\n            [0.018140679261596, 0.025445594037630],\r\n            [0.018062527905790, 0.025501129105445],\r\n            [0.017984206538592, 0.025556424146920],\r\n            [0.017905715897192, 0.025611478641598],\r\n            [0.017827056720375, 0.025666292071285],\r\n            [0.017748229748511, 0.025720863920056],\r\n            [0.017669235723550, 0.025775193674260],\r\n            [0.017590075389012, 0.025829280822525],\r\n            [0.017510749489986, 0.025883124855762],\r\n            [0.017431258773116, 0.025936725267170],\r\n            [0.017351603986600, 0.025990081552242],\r\n            [0.017271785880180, 0.026043193208768],\r\n            [0.017191805205132, 0.026096059736841],\r\n            [0.017111662714267, 0.026148680638861],\r\n            [0.017031359161915, 0.026201055419541],\r\n            [0.016950895303924, 0.026253183585908],\r\n            [0.016870271897651, 0.026305064647313],\r\n            [0.016789489701954, 0.026356698115431],\r\n            [0.016708549477186, 0.026408083504269],\r\n            [0.016627451985187, 0.026459220330167],\r\n            [0.016546197989277, 0.026510108111806],\r\n            [0.016464788254250, 0.026560746370212],\r\n            [0.016383223546365, 0.026611134628757],\r\n            [0.016301504633341, 0.026661272413168],\r\n            [0.016219632284346, 0.026711159251530],\r\n            [0.016137607269996, 0.026760794674288],\r\n            [0.016055430362340, 0.026810178214254],\r\n            [0.015973102334858, 0.026859309406613],\r\n            [0.015890623962454, 0.026908187788922],\r\n            [0.015807996021446, 0.026956812901119],\r\n            [0.015725219289558, 0.027005184285527],\r\n            [0.015642294545918, 0.027053301486856],\r\n            [0.015559222571044, 0.027101164052208],\r\n            [0.015476004146842, 0.027148771531083],\r\n            [0.015392640056594, 0.027196123475380],\r\n            [0.015309131084956, 0.027243219439406],\r\n            [0.015225478017946, 0.027290058979875],\r\n            [0.015141681642938, 0.027336641655915],\r\n            [0.015057742748656, 0.027382967029073],\r\n            [0.014973662125164, 0.027429034663317],\r\n            [0.014889440563862, 0.027474844125040],\r\n            [0.014805078857474, 0.027520394983066],\r\n            [0.014720577800046, 0.027565686808654],\r\n            [0.014635938186934, 0.027610719175499],\r\n            [0.014551160814797, 0.027655491659740],\r\n            [0.014466246481592, 0.027700003839960],\r\n            [0.014381195986567, 0.027744255297195],\r\n            [0.014296010130247, 0.027788245614933],\r\n            [0.014210689714436, 0.027831974379120],\r\n            [0.014125235542201, 0.027875441178165],\r\n            [0.014039648417870, 0.027918645602941],\r\n            [0.013953929147020, 0.027961587246792],\r\n            [0.013868078536476, 0.028004265705534],\r\n            [0.013782097394294, 0.028046680577462],\r\n            [0.013695986529763, 0.028088831463351],\r\n            [0.013609746753390, 0.028130717966461],\r\n            [0.013523378876898, 0.028172339692540],\r\n            [0.013436883713214, 0.028213696249828],\r\n            [0.013350262076462, 0.028254787249062],\r\n            [0.013263514781960, 0.028295612303478],\r\n            [0.013176642646205, 0.028336171028814],\r\n            [0.013089646486871, 0.028376463043317],\r\n            [0.013002527122799, 0.028416487967743],\r\n            [0.012915285373990, 0.028456245425361],\r\n            [0.012827922061597, 0.028495735041960],\r\n            [0.012740438007915, 0.028534956445849],\r\n            [0.012652834036379, 0.028573909267859],\r\n            [0.012565110971550, 0.028612593141354],\r\n            [0.012477269639111, 0.028651007702224],\r\n            [0.012389310865858, 0.028689152588899],\r\n            [0.012301235479693, 0.028727027442343],\r\n            [0.012213044309615, 0.028764631906065],\r\n            [0.012124738185712, 0.028801965626115],\r\n            [0.012036317939156, 0.028839028251097],\r\n            [0.011947784402191, 0.028875819432161],\r\n            [0.011859138408130, 0.028912338823015],\r\n            [0.011770380791341, 0.028948586079925],\r\n            [0.011681512387245, 0.028984560861718],\r\n            [0.011592534032306, 0.029020262829785],\r\n            [0.011503446564022, 0.029055691648087],\r\n            [0.011414250820918, 0.029090846983152],\r\n            [0.011324947642537, 0.029125728504087],\r\n            [0.011235537869437, 0.029160335882573],\r\n            [0.011146022343175, 0.029194668792871],\r\n            [0.011056401906305, 0.029228726911828],\r\n            [0.010966677402371, 0.029262509918876],\r\n            [0.010876849675891, 0.029296017496036],\r\n            [0.010786919572361, 0.029329249327922],\r\n            [0.010696887938235, 0.029362205101743],\r\n            [0.010606755620926, 0.029394884507308],\r\n            [0.010516523468793, 0.029427287237024],\r\n            [0.010426192331137, 0.029459412985906],\r\n            [0.010335763058187, 0.029491261451573],\r\n            [0.010245236501099, 0.029522832334255],\r\n            [0.010154613511943, 0.029554125336796],\r\n            [0.010063894943698, 0.029585140164654],\r\n            [0.009973081650240, 0.029615876525905],\r\n            [0.009882174486340, 0.029646334131247],\r\n            [0.009791174307650, 0.029676512694001],\r\n            [0.009700081970699, 0.029706411930116],\r\n            [0.009608898332881, 0.029736031558168],\r\n            [0.009517624252453, 0.029765371299366],\r\n            [0.009426260588521, 0.029794430877553],\r\n            [0.009334808201034, 0.029823210019210],\r\n            [0.009243267950778, 0.029851708453456],\r\n            [0.009151640699363, 0.029879925912053],\r\n            [0.009059927309220, 0.029907862129408],\r\n            [0.008968128643591, 0.029935516842573],\r\n            [0.008876245566520, 0.029962889791254],\r\n            [0.008784278942845, 0.029989980717805],\r\n            [0.008692229638191, 0.030016789367235],\r\n            [0.008600098518961, 0.030043315487212],\r\n            [0.008507886452329, 0.030069558828062],\r\n            [0.008415594306230, 0.030095519142772],\r\n            [0.008323222949351, 0.030121196186994],\r\n            [0.008230773251129, 0.030146589719046],\r\n            [0.008138246081733, 0.030171699499915],\r\n            [0.008045642312067, 0.030196525293257],\r\n            [0.007952962813750, 0.030221066865402],\r\n            [0.007860208459119, 0.030245323985357],\r\n            [0.007767380121212, 0.030269296424803],\r\n            [0.007674478673766, 0.030292983958103],\r\n            [0.007581504991203, 0.030316386362302],\r\n            [0.007488459948628, 0.030339503417126],\r\n            [0.007395344421816, 0.030362334904989],\r\n            [0.007302159287206, 0.030384880610993],\r\n            [0.007208905421891, 0.030407140322928],\r\n            [0.007115583703613, 0.030429113831278],\r\n            [0.007022195010752, 0.030450800929220],\r\n            [0.006928740222316, 0.030472201412626],\r\n            [0.006835220217939, 0.030493315080068],\r\n            [0.006741635877866, 0.030514141732814],\r\n            [0.006647988082948, 0.030534681174838],\r\n            [0.006554277714635, 0.030554933212813],\r\n            [0.006460505654964, 0.030574897656119],\r\n            [0.006366672786553, 0.030594574316845],\r\n            [0.006272779992593, 0.030613963009786],\r\n            [0.006178828156839, 0.030633063552447],\r\n            [0.006084818163601, 0.030651875765048],\r\n            [0.005990750897737, 0.030670399470520],\r\n            [0.005896627244644, 0.030688634494512],\r\n            [0.005802448090250, 0.030706580665388],\r\n            [0.005708214321004, 0.030724237814232],\r\n            [0.005613926823871, 0.030741605774849],\r\n            [0.005519586486321, 0.030758684383764],\r\n            [0.005425194196321, 0.030775473480228],\r\n            [0.005330750842327, 0.030791972906214],\r\n            [0.005236257313276, 0.030808182506425],\r\n            [0.005141714498576, 0.030824102128288],\r\n            [0.005047123288102, 0.030839731621963],\r\n            [0.004952484572181, 0.030855070840339],\r\n            [0.004857799241589, 0.030870119639036],\r\n            [0.004763068187541, 0.030884877876411],\r\n            [0.004668292301681, 0.030899345413553],\r\n            [0.004573472476075, 0.030913522114288],\r\n            [0.004478609603205, 0.030927407845180],\r\n            [0.004383704575956, 0.030941002475530],\r\n            [0.004288758287610, 0.030954305877381],\r\n            [0.004193771631837, 0.030967317925516],\r\n            [0.004098745502689, 0.030980038497461],\r\n            [0.004003680794587, 0.030992467473486],\r\n            [0.003908578402316, 0.031004604736602],\r\n            [0.003813439221017, 0.031016450172571],\r\n            [0.003718264146176, 0.031028003669899],\r\n            [0.003623054073616, 0.031039265119839],\r\n            [0.003527809899492, 0.031050234416394],\r\n            [0.003432532520278, 0.031060911456318],\r\n            [0.003337222832760, 0.031071296139114],\r\n            [0.003241881734029, 0.031081388367037],\r\n            [0.003146510121474, 0.031091188045095],\r\n            [0.003051108892766, 0.031100695081051],\r\n            [0.002955678945860, 0.031109909385419],\r\n            [0.002860221178978, 0.031118830871473],\r\n            [0.002764736490604, 0.031127459455239],\r\n            [0.002669225779478, 0.031135795055501],\r\n            [0.002573689944583, 0.031143837593803],\r\n            [0.002478129885137, 0.031151586994444],\r\n            [0.002382546500589, 0.031159043184484],\r\n            [0.002286940690606, 0.031166206093743],\r\n            [0.002191313355067, 0.031173075654800],\r\n            [0.002095665394051, 0.031179651802998],\r\n            [0.001999997707835, 0.031185934476438],\r\n            [0.001904311196878, 0.031191923615985],\r\n            [0.001808606761820, 0.031197619165268],\r\n            [0.001712885303465, 0.031203021070678],\r\n            [0.001617147722782, 0.031208129281370],\r\n            [0.001521394920889, 0.031212943749264],\r\n            [0.001425627799047, 0.031217464429043],\r\n            [0.001329847258653, 0.031221691278159],\r\n            [0.001234054201231, 0.031225624256825],\r\n            [0.001138249528420, 0.031229263328024],\r\n            [0.001042434141971, 0.031232608457502],\r\n            [0.000946608943736, 0.031235659613775],\r\n            [0.000850774835656, 0.031238416768124],\r\n            [0.000754932719759, 0.031240879894597],\r\n            [0.000659083498149, 0.031243048970010],\r\n            [0.000563228072993, 0.031244923973948],\r\n            [0.000467367346520, 0.031246504888762],\r\n            [0.000371502221008, 0.031247791699571],\r\n            [0.000275633598775, 0.031248784394264],\r\n            [0.000179762382174, 0.031249482963498],\r\n            [0.000083889473581, 0.031249887400697]\r\n        ];\r\n    \r\n        var MDCT_TABLE_256 = [\r\n            [0.088387931675923, 0.000271171628935],\r\n            [0.088354655998507, 0.002440238387037],\r\n            [0.088268158780110, 0.004607835236780],\r\n            [0.088128492123423, 0.006772656498875],\r\n            [0.087935740158418, 0.008933398165942],\r\n            [0.087690018991670, 0.011088758687994],\r\n            [0.087391476636423, 0.013237439756448],\r\n            [0.087040292923427, 0.015378147086172],\r\n            [0.086636679392621, 0.017509591195118],\r\n            [0.086180879165703, 0.019630488181053],\r\n            [0.085673166799686, 0.021739560494940],\r\n            [0.085113848121515, 0.023835537710479],\r\n            [0.084503260043847, 0.025917157289369],\r\n            [0.083841770362110, 0.027983165341813],\r\n            [0.083129777532952, 0.030032317381813],\r\n            [0.082367710434230, 0.032063379076803],\r\n            [0.081556028106671, 0.034075126991164],\r\n            [0.080695219477356, 0.036066349323177],\r\n            [0.079785803065216, 0.038035846634965],\r\n            [0.078828326668693, 0.039982432574992],\r\n            [0.077823367035766, 0.041904934592675],\r\n            [0.076771529516540, 0.043802194644686],\r\n            [0.075673447698606, 0.045673069892513],\r\n            [0.074529783025390, 0.047516433390863],\r\n            [0.073341224397728, 0.049331174766491],\r\n            [0.072108487758894, 0.051116200887052],\r\n            [0.070832315663343, 0.052870436519557],\r\n            [0.069513476829429, 0.054592824978055],\r\n            [0.068152765676348, 0.056282328760143],\r\n            [0.066751001845620, 0.057937930171918],\r\n            [0.065309029707361, 0.059558631940996],\r\n            [0.063827717851668, 0.061143457817234],\r\n            [0.062307958565413, 0.062691453160784],\r\n            [0.060750667294763, 0.064201685517134],\r\n            [0.059156782093749, 0.065673245178784],\r\n            [0.057527263059216, 0.067105245733220],\r\n            [0.055863091752499, 0.068496824596852],\r\n            [0.054165270608165, 0.069847143534609],\r\n            [0.052434822330188, 0.071155389164853],\r\n            [0.050672789275903, 0.072420773449336],\r\n            [0.048880232828135, 0.073642534167879],\r\n            [0.047058232755862, 0.074819935377512],\r\n            [0.045207886563797, 0.075952267855771],\r\n            [0.043330308831298, 0.077038849527912],\r\n            [0.041426630540984, 0.078079025877766],\r\n            [0.039497998397473, 0.079072170341994],\r\n            [0.037545574136653, 0.080017684687506],\r\n            [0.035570533825892, 0.080914999371817],\r\n            [0.033574067155622, 0.081763573886112],\r\n            [0.031557376722714, 0.082562897080836],\r\n            [0.029521677306074, 0.083312487473584],\r\n            [0.027468195134911, 0.084011893539132],\r\n            [0.025398167150101, 0.084660693981419],\r\n            [0.023312840259098, 0.085258497987320],\r\n            [0.021213470584847, 0.085804945462053],\r\n            [0.019101322709138, 0.086299707246093],\r\n            [0.016977668910873, 0.086742485313442],\r\n            [0.014843788399692, 0.087133012951149],\r\n            [0.012700966545425, 0.087471054919968],\r\n            [0.010550494103830, 0.087756407596056],\r\n            [0.008393666439096, 0.087988899093631],\r\n            [0.006231782743558, 0.088168389368510],\r\n            [0.004066145255116, 0.088294770302461],\r\n            [0.001898058472816, 0.088367965768336]\r\n        ];\r\n    \r\n        var MDCT_TABLE_1920 = [\r\n            [0.032274858518097, 0.000013202404176],\r\n            [0.032274642494505, 0.000118821372483],\r\n            [0.032274080835421, 0.000224439068308],\r\n            [0.032273173546860, 0.000330054360572],\r\n            [0.032271920638538, 0.000435666118218],\r\n            [0.032270322123873, 0.000541273210231],\r\n            [0.032268378019984, 0.000646874505642],\r\n            [0.032266088347691, 0.000752468873546],\r\n            [0.032263453131514, 0.000858055183114],\r\n            [0.032260472399674, 0.000963632303600],\r\n            [0.032257146184092, 0.001069199104358],\r\n            [0.032253474520390, 0.001174754454853],\r\n            [0.032249457447888, 0.001280297224671],\r\n            [0.032245095009606, 0.001385826283535],\r\n            [0.032240387252262, 0.001491340501313],\r\n            [0.032235334226272, 0.001596838748031],\r\n            [0.032229935985750, 0.001702319893890],\r\n            [0.032224192588507, 0.001807782809271],\r\n            [0.032218104096050, 0.001913226364749],\r\n            [0.032211670573582, 0.002018649431111],\r\n            [0.032204892090000, 0.002124050879359],\r\n            [0.032197768717898, 0.002229429580728],\r\n            [0.032190300533560, 0.002334784406698],\r\n            [0.032182487616965, 0.002440114229003],\r\n            [0.032174330051782, 0.002545417919644],\r\n            [0.032165827925374, 0.002650694350905],\r\n            [0.032156981328790, 0.002755942395358],\r\n            [0.032147790356771, 0.002861160925883],\r\n            [0.032138255107744, 0.002966348815672],\r\n            [0.032128375683825, 0.003071504938250],\r\n            [0.032118152190814, 0.003176628167476],\r\n            [0.032107584738196, 0.003281717377568],\r\n            [0.032096673439141, 0.003386771443102],\r\n            [0.032085418410500, 0.003491789239036],\r\n            [0.032073819772804, 0.003596769640711],\r\n            [0.032061877650267, 0.003701711523874],\r\n            [0.032049592170778, 0.003806613764680],\r\n            [0.032036963465906, 0.003911475239711],\r\n            [0.032023991670893, 0.004016294825985],\r\n            [0.032010676924657, 0.004121071400967],\r\n            [0.031997019369789, 0.004225803842586],\r\n            [0.031983019152549, 0.004330491029241],\r\n            [0.031968676422869, 0.004435131839816],\r\n            [0.031953991334348, 0.004539725153692],\r\n            [0.031938964044252, 0.004644269850758],\r\n            [0.031923594713510, 0.004748764811426],\r\n            [0.031907883506716, 0.004853208916638],\r\n            [0.031891830592124, 0.004957601047881],\r\n            [0.031875436141648, 0.005061940087200],\r\n            [0.031858700330859, 0.005166224917208],\r\n            [0.031841623338985, 0.005270454421097],\r\n            [0.031824205348907, 0.005374627482653],\r\n            [0.031806446547156, 0.005478742986267],\r\n            [0.031788347123916, 0.005582799816945],\r\n            [0.031769907273017, 0.005686796860323],\r\n            [0.031751127191935, 0.005790733002674],\r\n            [0.031732007081789, 0.005894607130928],\r\n            [0.031712547147340, 0.005998418132675],\r\n            [0.031692747596989, 0.006102164896182],\r\n            [0.031672608642773, 0.006205846310406],\r\n            [0.031652130500364, 0.006309461265002],\r\n            [0.031631313389067, 0.006413008650337],\r\n            [0.031610157531816, 0.006516487357501],\r\n            [0.031588663155172, 0.006619896278321],\r\n            [0.031566830489325, 0.006723234305370],\r\n            [0.031544659768083, 0.006826500331981],\r\n            [0.031522151228878, 0.006929693252258],\r\n            [0.031499305112758, 0.007032811961088],\r\n            [0.031476121664387, 0.007135855354151],\r\n            [0.031452601132040, 0.007238822327937],\r\n            [0.031428743767604, 0.007341711779751],\r\n            [0.031404549826572, 0.007444522607730],\r\n            [0.031380019568042, 0.007547253710853],\r\n            [0.031355153254712, 0.007649903988952],\r\n            [0.031329951152882, 0.007752472342725],\r\n            [0.031304413532445, 0.007854957673748],\r\n            [0.031278540666888, 0.007957358884484],\r\n            [0.031252332833290, 0.008059674878300],\r\n            [0.031225790312316, 0.008161904559473],\r\n            [0.031198913388214, 0.008264046833205],\r\n            [0.031171702348814, 0.008366100605636],\r\n            [0.031144157485525, 0.008468064783849],\r\n            [0.031116279093331, 0.008569938275893],\r\n            [0.031088067470786, 0.008671719990782],\r\n            [0.031059522920014, 0.008773408838517],\r\n            [0.031030645746705, 0.008875003730092],\r\n            [0.031001436260110, 0.008976503577507],\r\n            [0.030971894773039, 0.009077907293780],\r\n            [0.030942021601857, 0.009179213792959],\r\n            [0.030911817066483, 0.009280421990133],\r\n            [0.030881281490382, 0.009381530801444],\r\n            [0.030850415200566, 0.009482539144097],\r\n            [0.030819218527589, 0.009583445936373],\r\n            [0.030787691805541, 0.009684250097643],\r\n            [0.030755835372048, 0.009784950548375],\r\n            [0.030723649568268, 0.009885546210147],\r\n            [0.030691134738883, 0.009986036005661],\r\n            [0.030658291232103, 0.010086418858753],\r\n            [0.030625119399655, 0.010186693694402],\r\n            [0.030591619596781, 0.010286859438745],\r\n            [0.030557792182239, 0.010386915019088],\r\n            [0.030523637518292, 0.010486859363916],\r\n            [0.030489155970710, 0.010586691402906],\r\n            [0.030454347908763, 0.010686410066936],\r\n            [0.030419213705216, 0.010786014288099],\r\n            [0.030383753736329, 0.010885502999714],\r\n            [0.030347968381849, 0.010984875136338],\r\n            [0.030311858025010, 0.011084129633775],\r\n            [0.030275423052523, 0.011183265429088],\r\n            [0.030238663854579, 0.011282281460612],\r\n            [0.030201580824838, 0.011381176667967],\r\n            [0.030164174360430, 0.011479949992062],\r\n            [0.030126444861948, 0.011578600375117],\r\n            [0.030088392733446, 0.011677126760663],\r\n            [0.030050018382430, 0.011775528093563],\r\n            [0.030011322219859, 0.011873803320018],\r\n            [0.029972304660138, 0.011971951387578],\r\n            [0.029932966121114, 0.012069971245157],\r\n            [0.029893307024070, 0.012167861843041],\r\n            [0.029853327793724, 0.012265622132901],\r\n            [0.029813028858222, 0.012363251067801],\r\n            [0.029772410649132, 0.012460747602215],\r\n            [0.029731473601443, 0.012558110692033],\r\n            [0.029690218153558, 0.012655339294575],\r\n            [0.029648644747289, 0.012752432368600],\r\n            [0.029606753827855, 0.012849388874320],\r\n            [0.029564545843872, 0.012946207773407],\r\n            [0.029522021247356, 0.013042888029011],\r\n            [0.029479180493710, 0.013139428605762],\r\n            [0.029436024041725, 0.013235828469789],\r\n            [0.029392552353570, 0.013332086588727],\r\n            [0.029348765894794, 0.013428201931728],\r\n            [0.029304665134313, 0.013524173469475],\r\n            [0.029260250544412, 0.013620000174189],\r\n            [0.029215522600735, 0.013715681019643],\r\n            [0.029170481782283, 0.013811214981173],\r\n            [0.029125128571406, 0.013906601035686],\r\n            [0.029079463453801, 0.014001838161674],\r\n            [0.029033486918505, 0.014096925339225],\r\n            [0.028987199457889, 0.014191861550031],\r\n            [0.028940601567655, 0.014286645777401],\r\n            [0.028893693746829, 0.014381277006273],\r\n            [0.028846476497755, 0.014475754223221],\r\n            [0.028798950326094, 0.014570076416472],\r\n            [0.028751115740811, 0.014664242575910],\r\n            [0.028702973254178, 0.014758251693091],\r\n            [0.028654523381760, 0.014852102761253],\r\n            [0.028605766642418, 0.014945794775326],\r\n            [0.028556703558297, 0.015039326731945],\r\n            [0.028507334654823, 0.015132697629457],\r\n            [0.028457660460698, 0.015225906467935],\r\n            [0.028407681507891, 0.015318952249187],\r\n            [0.028357398331639, 0.015411833976768],\r\n            [0.028306811470432, 0.015504550655988],\r\n            [0.028255921466016, 0.015597101293927],\r\n            [0.028204728863381, 0.015689484899442],\r\n            [0.028153234210760, 0.015781700483179],\r\n            [0.028101438059619, 0.015873747057582],\r\n            [0.028049340964652, 0.015965623636907],\r\n            [0.027996943483779, 0.016057329237229],\r\n            [0.027944246178133, 0.016148862876456],\r\n            [0.027891249612061, 0.016240223574335],\r\n            [0.027837954353113, 0.016331410352467],\r\n            [0.027784360972039, 0.016422422234315],\r\n            [0.027730470042780, 0.016513258245214],\r\n            [0.027676282142466, 0.016603917412384],\r\n            [0.027621797851405, 0.016694398764938],\r\n            [0.027567017753080, 0.016784701333894],\r\n            [0.027511942434143, 0.016874824152183],\r\n            [0.027456572484404, 0.016964766254662],\r\n            [0.027400908496833, 0.017054526678124],\r\n            [0.027344951067546, 0.017144104461307],\r\n            [0.027288700795801, 0.017233498644904],\r\n            [0.027232158283994, 0.017322708271577],\r\n            [0.027175324137651, 0.017411732385960],\r\n            [0.027118198965418, 0.017500570034678],\r\n            [0.027060783379060, 0.017589220266351],\r\n            [0.027003077993454, 0.017677682131607],\r\n            [0.026945083426576, 0.017765954683088],\r\n            [0.026886800299502, 0.017854036975468],\r\n            [0.026828229236397, 0.017941928065456],\r\n            [0.026769370864511, 0.018029627011808],\r\n            [0.026710225814170, 0.018117132875340],\r\n            [0.026650794718768, 0.018204444718934],\r\n            [0.026591078214767, 0.018291561607551],\r\n            [0.026531076941680, 0.018378482608238],\r\n            [0.026470791542075, 0.018465206790142],\r\n            [0.026410222661558, 0.018551733224515],\r\n            [0.026349370948775, 0.018638060984730],\r\n            [0.026288237055398, 0.018724189146286],\r\n            [0.026226821636121, 0.018810116786819],\r\n            [0.026165125348656, 0.018895842986112],\r\n            [0.026103148853718, 0.018981366826109],\r\n            [0.026040892815028, 0.019066687390916],\r\n            [0.025978357899296, 0.019151803766819],\r\n            [0.025915544776223, 0.019236715042290],\r\n            [0.025852454118485, 0.019321420307998],\r\n            [0.025789086601733, 0.019405918656817],\r\n            [0.025725442904582, 0.019490209183837],\r\n            [0.025661523708606, 0.019574290986376],\r\n            [0.025597329698327, 0.019658163163984],\r\n            [0.025532861561211, 0.019741824818458],\r\n            [0.025468119987662, 0.019825275053848],\r\n            [0.025403105671008, 0.019908512976470],\r\n            [0.025337819307501, 0.019991537694913],\r\n            [0.025272261596305, 0.020074348320047],\r\n            [0.025206433239491, 0.020156943965039],\r\n            [0.025140334942028, 0.020239323745355],\r\n            [0.025073967411776, 0.020321486778774],\r\n            [0.025007331359476, 0.020403432185395],\r\n            [0.024940427498748, 0.020485159087650],\r\n            [0.024873256546079, 0.020566666610309],\r\n            [0.024805819220816, 0.020647953880491],\r\n            [0.024738116245157, 0.020729020027676],\r\n            [0.024670148344147, 0.020809864183709],\r\n            [0.024601916245669, 0.020890485482816],\r\n            [0.024533420680433, 0.020970883061607],\r\n            [0.024464662381971, 0.021051056059087],\r\n            [0.024395642086630, 0.021131003616670],\r\n            [0.024326360533561, 0.021210724878181],\r\n            [0.024256818464715, 0.021290218989868],\r\n            [0.024187016624830, 0.021369485100415],\r\n            [0.024116955761430, 0.021448522360944],\r\n            [0.024046636624808, 0.021527329925030],\r\n            [0.023976059968027, 0.021605906948708],\r\n            [0.023905226546906, 0.021684252590480],\r\n            [0.023834137120014, 0.021762366011328],\r\n            [0.023762792448662, 0.021840246374720],\r\n            [0.023691193296893, 0.021917892846620],\r\n            [0.023619340431478, 0.021995304595495],\r\n            [0.023547234621902, 0.022072480792330],\r\n            [0.023474876640361, 0.022149420610628],\r\n            [0.023402267261751, 0.022226123226426],\r\n            [0.023329407263659, 0.022302587818300],\r\n            [0.023256297426359, 0.022378813567377],\r\n            [0.023182938532797, 0.022454799657339],\r\n            [0.023109331368588, 0.022530545274437],\r\n            [0.023035476722006, 0.022606049607496],\r\n            [0.022961375383975, 0.022681311847926],\r\n            [0.022887028148061, 0.022756331189727],\r\n            [0.022812435810462, 0.022831106829504],\r\n            [0.022737599170003, 0.022905637966469],\r\n            [0.022662519028125, 0.022979923802453],\r\n            [0.022587196188874, 0.023053963541915],\r\n            [0.022511631458899, 0.023127756391950],\r\n            [0.022435825647437, 0.023201301562294],\r\n            [0.022359779566306, 0.023274598265338],\r\n            [0.022283494029900, 0.023347645716133],\r\n            [0.022206969855176, 0.023420443132400],\r\n            [0.022130207861645, 0.023492989734537],\r\n            [0.022053208871367, 0.023565284745628],\r\n            [0.021975973708940, 0.023637327391451],\r\n            [0.021898503201489, 0.023709116900488],\r\n            [0.021820798178663, 0.023780652503931],\r\n            [0.021742859472618, 0.023851933435691],\r\n            [0.021664687918017, 0.023922958932406],\r\n            [0.021586284352013, 0.023993728233451],\r\n            [0.021507649614247, 0.024064240580942],\r\n            [0.021428784546832, 0.024134495219750],\r\n            [0.021349689994350, 0.024204491397504],\r\n            [0.021270366803840, 0.024274228364600],\r\n            [0.021190815824791, 0.024343705374213],\r\n            [0.021111037909128, 0.024412921682298],\r\n            [0.021031033911210, 0.024481876547605],\r\n            [0.020950804687815, 0.024550569231683],\r\n            [0.020870351098134, 0.024618998998889],\r\n            [0.020789674003759, 0.024687165116394],\r\n            [0.020708774268678, 0.024755066854194],\r\n            [0.020627652759262, 0.024822703485116],\r\n            [0.020546310344257, 0.024890074284826],\r\n            [0.020464747894775, 0.024957178531837],\r\n            [0.020382966284284, 0.025024015507516],\r\n            [0.020300966388600, 0.025090584496093],\r\n            [0.020218749085876, 0.025156884784668],\r\n            [0.020136315256592, 0.025222915663218],\r\n            [0.020053665783549, 0.025288676424605],\r\n            [0.019970801551857, 0.025354166364584],\r\n            [0.019887723448925, 0.025419384781811],\r\n            [0.019804432364452, 0.025484330977848],\r\n            [0.019720929190419, 0.025549004257175],\r\n            [0.019637214821078, 0.025613403927192],\r\n            [0.019553290152943, 0.025677529298230],\r\n            [0.019469156084779, 0.025741379683559],\r\n            [0.019384813517595, 0.025804954399392],\r\n            [0.019300263354632, 0.025868252764895],\r\n            [0.019215506501354, 0.025931274102193],\r\n            [0.019130543865439, 0.025994017736379],\r\n            [0.019045376356769, 0.026056482995518],\r\n            [0.018960004887419, 0.026118669210657],\r\n            [0.018874430371648, 0.026180575715833],\r\n            [0.018788653725892, 0.026242201848076],\r\n            [0.018702675868750, 0.026303546947421],\r\n            [0.018616497720974, 0.026364610356909],\r\n            [0.018530120205464, 0.026425391422602],\r\n            [0.018443544247254, 0.026485889493583],\r\n            [0.018356770773502, 0.026546103921965],\r\n            [0.018269800713483, 0.026606034062902],\r\n            [0.018182634998576, 0.026665679274589],\r\n            [0.018095274562256, 0.026725038918274],\r\n            [0.018007720340083, 0.026784112358263],\r\n            [0.017919973269692, 0.026842898961926],\r\n            [0.017832034290785, 0.026901398099707],\r\n            [0.017743904345116, 0.026959609145127],\r\n            [0.017655584376488, 0.027017531474792],\r\n            [0.017567075330734, 0.027075164468401],\r\n            [0.017478378155718, 0.027132507508750],\r\n            [0.017389493801313, 0.027189559981742],\r\n            [0.017300423219401, 0.027246321276391],\r\n            [0.017211167363854, 0.027302790784828],\r\n            [0.017121727190533, 0.027358967902310],\r\n            [0.017032103657269, 0.027414852027226],\r\n            [0.016942297723858, 0.027470442561102],\r\n            [0.016852310352050, 0.027525738908608],\r\n            [0.016762142505537, 0.027580740477564],\r\n            [0.016671795149944, 0.027635446678948],\r\n            [0.016581269252819, 0.027689856926900],\r\n            [0.016490565783622, 0.027743970638730],\r\n            [0.016399685713714, 0.027797787234924],\r\n            [0.016308630016347, 0.027851306139149],\r\n            [0.016217399666655, 0.027904526778260],\r\n            [0.016125995641641, 0.027957448582309],\r\n            [0.016034418920170, 0.028010070984544],\r\n            [0.015942670482954, 0.028062393421421],\r\n            [0.015850751312545, 0.028114415332610],\r\n            [0.015758662393324, 0.028166136160998],\r\n            [0.015666404711489, 0.028217555352697],\r\n            [0.015573979255046, 0.028268672357047],\r\n            [0.015481387013797, 0.028319486626627],\r\n            [0.015388628979331, 0.028369997617257],\r\n            [0.015295706145012, 0.028420204788004],\r\n            [0.015202619505968, 0.028470107601191],\r\n            [0.015109370059084, 0.028519705522399],\r\n            [0.015015958802984, 0.028568998020472],\r\n            [0.014922386738030, 0.028617984567529],\r\n            [0.014828654866302, 0.028666664638963],\r\n            [0.014734764191593, 0.028715037713449],\r\n            [0.014640715719398, 0.028763103272951],\r\n            [0.014546510456900, 0.028810860802724],\r\n            [0.014452149412962, 0.028858309791325],\r\n            [0.014357633598114, 0.028905449730613],\r\n            [0.014262964024545, 0.028952280115756],\r\n            [0.014168141706090, 0.028998800445240],\r\n            [0.014073167658220, 0.029045010220868],\r\n            [0.013978042898030, 0.029090908947771],\r\n            [0.013882768444231, 0.029136496134411],\r\n            [0.013787345317136, 0.029181771292585],\r\n            [0.013691774538648, 0.029226733937433],\r\n            [0.013596057132255, 0.029271383587441],\r\n            [0.013500194123014, 0.029315719764447],\r\n            [0.013404186537539, 0.029359741993647],\r\n            [0.013308035403995, 0.029403449803598],\r\n            [0.013211741752084, 0.029446842726223],\r\n            [0.013115306613032, 0.029489920296820],\r\n            [0.013018731019584, 0.029532682054063],\r\n            [0.012922016005985, 0.029575127540008],\r\n            [0.012825162607977, 0.029617256300097],\r\n            [0.012728171862781, 0.029659067883165],\r\n            [0.012631044809089, 0.029700561841444],\r\n            [0.012533782487056, 0.029741737730567],\r\n            [0.012436385938281, 0.029782595109573],\r\n            [0.012338856205805, 0.029823133540913],\r\n            [0.012241194334091, 0.029863352590452],\r\n            [0.012143401369021, 0.029903251827477],\r\n            [0.012045478357878, 0.029942830824699],\r\n            [0.011947426349339, 0.029982089158259],\r\n            [0.011849246393462, 0.030021026407731],\r\n            [0.011750939541676, 0.030059642156129],\r\n            [0.011652506846768, 0.030097935989909],\r\n            [0.011553949362874, 0.030135907498976],\r\n            [0.011455268145464, 0.030173556276684],\r\n            [0.011356464251335, 0.030210881919845],\r\n            [0.011257538738598, 0.030247884028732],\r\n            [0.011158492666665, 0.030284562207083],\r\n            [0.011059327096240, 0.030320916062102],\r\n            [0.010960043089307, 0.030356945204470],\r\n            [0.010860641709118, 0.030392649248343],\r\n            [0.010761124020182, 0.030428027811361],\r\n            [0.010661491088253, 0.030463080514646],\r\n            [0.010561743980319, 0.030497806982812],\r\n            [0.010461883764593, 0.030532206843968],\r\n            [0.010361911510496, 0.030566279729717],\r\n            [0.010261828288652, 0.030600025275167],\r\n            [0.010161635170872, 0.030633443118931],\r\n            [0.010061333230142, 0.030666532903129],\r\n            [0.009960923540617, 0.030699294273397],\r\n            [0.009860407177603, 0.030731726878888],\r\n            [0.009759785217550, 0.030763830372273],\r\n            [0.009659058738038, 0.030795604409750],\r\n            [0.009558228817767, 0.030827048651045],\r\n            [0.009457296536545, 0.030858162759415],\r\n            [0.009356262975275, 0.030888946401653],\r\n            [0.009255129215945, 0.030919399248091],\r\n            [0.009153896341616, 0.030949520972603],\r\n            [0.009052565436412, 0.030979311252611],\r\n            [0.008951137585505, 0.031008769769084],\r\n            [0.008849613875105, 0.031037896206544],\r\n            [0.008747995392451, 0.031066690253072],\r\n            [0.008646283225794, 0.031095151600306],\r\n            [0.008544478464390, 0.031123279943448],\r\n            [0.008442582198486, 0.031151074981266],\r\n            [0.008340595519310, 0.031178536416098],\r\n            [0.008238519519057, 0.031205663953853],\r\n            [0.008136355290878, 0.031232457304017],\r\n            [0.008034103928871, 0.031258916179656],\r\n            [0.007931766528065, 0.031285040297416],\r\n            [0.007829344184412, 0.031310829377528],\r\n            [0.007726837994772, 0.031336283143813],\r\n            [0.007624249056906, 0.031361401323680],\r\n            [0.007521578469457, 0.031386183648135],\r\n            [0.007418827331946, 0.031410629851778],\r\n            [0.007315996744755, 0.031434739672811],\r\n            [0.007213087809115, 0.031458512853036],\r\n            [0.007110101627101, 0.031481949137863],\r\n            [0.007007039301610, 0.031505048276306],\r\n            [0.006903901936357, 0.031527810020993],\r\n            [0.006800690635862, 0.031550234128164],\r\n            [0.006697406505433, 0.031572320357675],\r\n            [0.006594050651161, 0.031594068473000],\r\n            [0.006490624179905, 0.031615478241233],\r\n            [0.006387128199278, 0.031636549433095],\r\n            [0.006283563817639, 0.031657281822929],\r\n            [0.006179932144080, 0.031677675188707],\r\n            [0.006076234288412, 0.031697729312034],\r\n            [0.005972471361157, 0.031717443978146],\r\n            [0.005868644473532, 0.031736818975914],\r\n            [0.005764754737440, 0.031755854097848],\r\n            [0.005660803265456, 0.031774549140098],\r\n            [0.005556791170816, 0.031792903902453],\r\n            [0.005452719567407, 0.031810918188350],\r\n            [0.005348589569753, 0.031828591804869],\r\n            [0.005244402293001, 0.031845924562742],\r\n            [0.005140158852914, 0.031862916276347],\r\n            [0.005035860365855, 0.031879566763717],\r\n            [0.004931507948778, 0.031895875846539],\r\n            [0.004827102719212, 0.031911843350155],\r\n            [0.004722645795254, 0.031927469103567],\r\n            [0.004618138295554, 0.031942752939435],\r\n            [0.004513581339303, 0.031957694694082],\r\n            [0.004408976046222, 0.031972294207493],\r\n            [0.004304323536549, 0.031986551323320],\r\n            [0.004199624931030, 0.032000465888879],\r\n            [0.004094881350902, 0.032014037755158],\r\n            [0.003990093917884, 0.032027266776813],\r\n            [0.003885263754166, 0.032040152812170],\r\n            [0.003780391982394, 0.032052695723232],\r\n            [0.003675479725661, 0.032064895375674],\r\n            [0.003570528107494, 0.032076751638847],\r\n            [0.003465538251839, 0.032088264385780],\r\n            [0.003360511283053, 0.032099433493181],\r\n            [0.003255448325892, 0.032110258841438],\r\n            [0.003150350505494, 0.032120740314619],\r\n            [0.003045218947373, 0.032130877800478],\r\n            [0.002940054777404, 0.032140671190449],\r\n            [0.002834859121810, 0.032150120379653],\r\n            [0.002729633107153, 0.032159225266897],\r\n            [0.002624377860318, 0.032167985754674],\r\n            [0.002519094508504, 0.032176401749168],\r\n            [0.002413784179212, 0.032184473160250],\r\n            [0.002308448000231, 0.032192199901481],\r\n            [0.002203087099626, 0.032199581890114],\r\n            [0.002097702605728, 0.032206619047093],\r\n            [0.001992295647121, 0.032213311297057],\r\n            [0.001886867352628, 0.032219658568338],\r\n            [0.001781418851302, 0.032225660792960],\r\n            [0.001675951272410, 0.032231317906644],\r\n            [0.001570465745428, 0.032236629848809],\r\n            [0.001464963400018, 0.032241596562566],\r\n            [0.001359445366028, 0.032246217994727],\r\n            [0.001253912773470, 0.032250494095799],\r\n            [0.001148366752513, 0.032254424819990],\r\n            [0.001042808433471, 0.032258010125204],\r\n            [0.000937238946789, 0.032261249973045],\r\n            [0.000831659423030, 0.032264144328817],\r\n            [0.000726070992868, 0.032266693161525],\r\n            [0.000620474787068, 0.032268896443871],\r\n            [0.000514871936481, 0.032270754152261],\r\n            [0.000409263572030, 0.032272266266801],\r\n            [0.000303650824695, 0.032273432771295],\r\n            [0.000198034825504, 0.032274253653254],\r\n            [0.000092416705518, 0.032274728903884]\r\n        ];\r\n    \r\n        var MDCT_TABLE_240 = [\r\n            [0.091286604111815, 0.000298735779793],\r\n            [0.091247502481454, 0.002688238127538],\r\n            [0.091145864370807, 0.005075898091152],\r\n            [0.090981759437558, 0.007460079287760],\r\n            [0.090755300151030, 0.009839147718664],\r\n            [0.090466641715108, 0.012211472889198],\r\n            [0.090115981961863, 0.014575428926191],\r\n            [0.089703561215976, 0.016929395692256],\r\n            [0.089229662130024, 0.019271759896156],\r\n            [0.088694609490769, 0.021600916198470],\r\n            [0.088098769996564, 0.023915268311810],\r\n            [0.087442552006035, 0.026213230094844],\r\n            [0.086726405258214, 0.028493226639351],\r\n            [0.085950820564309, 0.030753695349588],\r\n            [0.085116329471329, 0.032993087013213],\r\n            [0.084223503897785, 0.035209866863042],\r\n            [0.083272955741727, 0.037402515628894],\r\n            [0.082265336461381, 0.039569530578832],\r\n            [0.081201336628670, 0.041709426549053],\r\n            [0.080081685455930, 0.043820736961749],\r\n            [0.078907150296148, 0.045902014830227],\r\n            [0.077678536117054, 0.047951833750597],\r\n            [0.076396684949434, 0.049968788879362],\r\n            [0.075062475310050, 0.051951497896226],\r\n            [0.073676821599542, 0.053898601951466],\r\n            [0.072240673475749, 0.055808766597225],\r\n            [0.070755015202858, 0.057680682702068],\r\n            [0.069220864976840, 0.059513067348201],\r\n            [0.067639274227625, 0.061304664710718],\r\n            [0.066011326898512, 0.063054246918278],\r\n            [0.064338138703282, 0.064760614894630],\r\n            [0.062620856361546, 0.066422599180399],\r\n            [0.060860656812842, 0.068039060734572],\r\n            [0.059058746410016, 0.069608891715145],\r\n            [0.057216360092450, 0.071131016238378],\r\n            [0.055334760539699, 0.072604391116154],\r\n            [0.053415237306106, 0.074028006570930],\r\n            [0.051459105937014, 0.075400886927784],\r\n            [0.049467707067153, 0.076722091283096],\r\n            [0.047442405501835, 0.077990714149396],\r\n            [0.045384589281588, 0.079205886075941],\r\n            [0.043295668730857, 0.080366774244592],\r\n            [0.041177075491445, 0.081472583040586],\r\n            [0.039030261541332, 0.082522554597810],\r\n            [0.036856698199564, 0.083515969318206],\r\n            [0.034657875117883, 0.084452146364948],\r\n            [0.032435299259796, 0.085330444129049],\r\n            [0.030190493867775, 0.086150260669096],\r\n            [0.027924997419306, 0.086911034123781],\r\n            [0.025640362572491, 0.087612243096981],\r\n            [0.023338155101933, 0.088253407015092],\r\n            [0.021019952825636, 0.088834086456390],\r\n            [0.018687344523641, 0.089353883452193],\r\n            [0.016341928849164, 0.089812441759604],\r\n            [0.013985313232951, 0.090209447105664],\r\n            [0.011619112781631, 0.090544627402740],\r\n            [0.009244949170797, 0.090817752935000],\r\n            [0.006864449533597, 0.091028636515846],\r\n            [0.004479245345574, 0.091177133616206],\r\n            [0.002090971306534, 0.091263142463585]\r\n        ];\r\n    \r\n        var SWB_OFFSET_1024_96 = new Uint16Array([\r\n            0,   4,   8,  12,  16,  20,  24,  28,\r\n            32,  36,  40,  44,  48,  52,  56,  64,\r\n            72,  80,  88,  96, 108, 120, 132, 144,\r\n            156, 172, 188, 212, 240, 276, 320, 384,\r\n            448, 512, 576, 640, 704, 768, 832, 896,\r\n            960, 1024\r\n        ]);\r\n    \r\n        var SWB_OFFSET_128_96 = new Uint16Array([\r\n            0, 4, 8, 12, 16, 20, 24, 32, 40, 48, 64, 92, 128\r\n        ]);\r\n    \r\n        var SWB_OFFSET_1024_64 = new Uint16Array([\r\n            0,   4,   8,  12,  16,  20,  24,  28,\r\n            32,  36,  40,  44,  48,  52,  56,  64,\r\n            72,  80,  88, 100, 112, 124, 140, 156,\r\n            172, 192, 216, 240, 268, 304, 344, 384,\r\n            424, 464, 504, 544, 584, 624, 664, 704,\r\n            744, 784, 824, 864, 904, 944, 984, 1024\r\n        ]);\r\n    \r\n        var SWB_OFFSET_128_64 = new Uint16Array([\r\n            0, 4, 8, 12, 16, 20, 24, 32, 40, 48, 64, 92, 128\r\n        ]);\r\n    \r\n        var SWB_OFFSET_1024_48 = new Uint16Array([\r\n            0,   4,   8,  12,  16,  20,  24,  28,\r\n            32,  36,  40,  48,  56,  64,  72,  80,\r\n            88,  96, 108, 120, 132, 144, 160, 176,\r\n            196, 216, 240, 264, 292, 320, 352, 384,\r\n            416, 448, 480, 512, 544, 576, 608, 640,\r\n            672, 704, 736, 768, 800, 832, 864, 896,\r\n            928, 1024\r\n        ]);\r\n    \r\n        var SWB_OFFSET_128_48 = new Uint16Array([\r\n            0,   4,   8,  12,  16,  20,  28,  36,\r\n            44,  56,  68,  80,  96, 112, 128\r\n        ]);\r\n    \r\n        var SWB_OFFSET_1024_32 = new Uint16Array([\r\n            0,   4,   8,  12,  16,  20,  24,  28,\r\n            32,  36,  40,  48,  56,  64,  72,  80,\r\n            88,  96, 108, 120, 132, 144, 160, 176,\r\n            196, 216, 240, 264, 292, 320, 352, 384,\r\n            416, 448, 480, 512, 544, 576, 608, 640,\r\n            672, 704, 736, 768, 800, 832, 864, 896,\r\n            928, 960, 992, 1024\r\n        ]);\r\n    \r\n        var SWB_OFFSET_1024_24 = new Uint16Array([\r\n            0,   4,   8,  12,  16,  20,  24,  28,\r\n            32,  36,  40,  44,  52,  60,  68,  76,\r\n            84,  92, 100, 108, 116, 124, 136, 148,\r\n            160, 172, 188, 204, 220, 240, 260, 284,\r\n            308, 336, 364, 396, 432, 468, 508, 552,\r\n            600, 652, 704, 768, 832, 896, 960, 1024\r\n        ]);\r\n    \r\n        var SWB_OFFSET_128_24 = new Uint16Array([\r\n            0,   4,   8,  12,  16,  20,  24,  28,\r\n            36,  44,  52,  64,  76,  92, 108, 128\r\n        ]);\r\n    \r\n        var SWB_OFFSET_1024_16 = new Uint16Array([\r\n            0,   8,  16,  24,  32,  40,  48,  56,\r\n            64,  72,  80,  88, 100, 112, 124, 136,\r\n            148, 160, 172, 184, 196, 212, 228, 244,\r\n            260, 280, 300, 320, 344, 368, 396, 424,\r\n            456, 492, 532, 572, 616, 664, 716, 772,\r\n            832, 896, 960, 1024\r\n        ]);\r\n    \r\n        var SWB_OFFSET_128_16 = new Uint16Array([\r\n            0,   4,   8,  12,  16,  20,  24,  28,\r\n            32,  40,  48,  60,  72,  88, 108, 128\r\n        ]);\r\n    \r\n        var SWB_OFFSET_1024_8 = new Uint16Array([\r\n            0,  12,  24,  36,  48,  60,  72,  84,\r\n            96, 108, 120, 132, 144, 156, 172, 188,\r\n            204, 220, 236, 252, 268, 288, 308, 328,\r\n            348, 372, 396, 420, 448, 476, 508, 544,\r\n            580, 620, 664, 712, 764, 820, 880, 944,\r\n            1024\r\n        ]);\r\n    \r\n        var SWB_OFFSET_128_8 = new Uint16Array([\r\n            0,   4,   8,  12,  16,  20,  24,  28,\r\n            36,  44,  52,  60,  72,  88, 108, 128\r\n        ]);\r\n    \r\n        var SWB_OFFSET_1024 = [\r\n            SWB_OFFSET_1024_96,\r\n            SWB_OFFSET_1024_96,\r\n            SWB_OFFSET_1024_64,\r\n            SWB_OFFSET_1024_48,\r\n            SWB_OFFSET_1024_48,\r\n            SWB_OFFSET_1024_32,\r\n            SWB_OFFSET_1024_24,\r\n            SWB_OFFSET_1024_24,\r\n            SWB_OFFSET_1024_16,\r\n            SWB_OFFSET_1024_16,\r\n            SWB_OFFSET_1024_16,\r\n            SWB_OFFSET_1024_8\r\n        ];\r\n    \r\n        var SWB_OFFSET_128 = [\r\n            SWB_OFFSET_128_96,\r\n            SWB_OFFSET_128_96,\r\n            SWB_OFFSET_128_64,\r\n            SWB_OFFSET_128_48,\r\n            SWB_OFFSET_128_48,\r\n            SWB_OFFSET_128_48,\r\n            SWB_OFFSET_128_24,\r\n            SWB_OFFSET_128_24,\r\n            SWB_OFFSET_128_16,\r\n            SWB_OFFSET_128_16,\r\n            SWB_OFFSET_128_16,\r\n            SWB_OFFSET_128_8\r\n        ];\r\n    \r\n        var SWB_SHORT_WINDOW_COUNT = new Uint8Array([\r\n            12, 12, 12, 14, 14, 14, 15, 15, 15, 15, 15, 15\r\n        ]);\r\n    \r\n        var SWB_LONG_WINDOW_COUNT = new Uint8Array([\r\n            41, 41, 47, 49, 49, 51, 47, 47, 43, 43, 43, 40\r\n        ]);\r\n    \r\n        /*\r\n         * Scalefactor lookup table\r\n         */\r\n        var SCALEFACTOR_TABLE = (function() {\r\n            var table = new Float32Array(428);\r\n    \r\n            for (var i = 0; i < 428; i++) {\r\n                table[i] = Math.pow(2, (i - 200) / 4);\r\n            }\r\n    \r\n            return table;\r\n        })();\r\n    \r\n    \r\n        /**\r\n         * Inverse quantization lookup table\r\n         */\r\n        var IQ_TABLE = (function() {\r\n            var table = new Float32Array(8191),\r\n                four_thirds = 4/3;\r\n    \r\n            for (var i = 0; i < 8191; i++) {\r\n                table[i] = Math.pow(i, four_thirds);\r\n            }\r\n    \r\n            return table;\r\n        })();\r\n    \r\n        var SAMPLE_RATES = new Int32Array([\r\n            96000, 88200, 64000, 48000, 44100, 32000,\r\n            24000, 22050, 16000, 12000, 11025, 8000, 7350\r\n        ]);\r\n    \r\n        // Temporal Noise Shaping\r\n        var TNS = (function(){\r\n            function TNS(config) {\r\n                this.maxBands = TNS_MAX_BANDS_1024[config.sampleIndex]\r\n                this.nFilt = new Int32Array(8);\r\n                this.length = new Array(8);\r\n                this.direction = new Array(8);\r\n                this.order = new Array(8);\r\n                this.coef = new Array(8);\r\n    \r\n                // Probably could allocate these as needed\r\n                for (var w = 0; w < 8; w++) {\r\n                    this.length[w] = new Int32Array(4);\r\n                    this.direction[w] = new Array(4);\r\n                    this.order[w] = new Int32Array(4);\r\n                    this.coef[w] = new Array(4);\r\n    \r\n                    for (var filt = 0; filt < 4; filt++) {\r\n                        this.coef[w][filt] = new Float32Array(TNS_MAX_ORDER);\r\n                    }\r\n                }\r\n    \r\n                this.lpc = new Float32Array(TNS_MAX_ORDER);\r\n                this.tmp = new Float32Array(TNS_MAX_ORDER);\r\n            }\r\n    \r\n            var TNS_MAX_ORDER = 20,\r\n                SHORT_BITS = [1, 4, 3],\r\n                LONG_BITS = [2, 6, 5];\r\n    \r\n            var TNS_COEF_1_3 = [0.00000000, -0.43388373, 0.64278758, 0.34202015],\r\n    \r\n                TNS_COEF_0_3 = [0.00000000, -0.43388373, -0.78183150, -0.97492790,\r\n                    0.98480773, 0.86602539, 0.64278758, 0.34202015],\r\n    \r\n                TNS_COEF_1_4 = [0.00000000, -0.20791170, -0.40673664, -0.58778524,\r\n                    0.67369562, 0.52643216, 0.36124167, 0.18374951],\r\n    \r\n                TNS_COEF_0_4 = [0.00000000, -0.20791170, -0.40673664, -0.58778524,\r\n                    -0.74314481, -0.86602539, -0.95105654, -0.99452192,\r\n                    0.99573416, 0.96182561, 0.89516330, 0.79801720,\r\n                    0.67369562, 0.52643216, 0.36124167, 0.18374951],\r\n    \r\n                TNS_TABLES = [TNS_COEF_0_3, TNS_COEF_0_4, TNS_COEF_1_3, TNS_COEF_1_4];\r\n    \r\n            var TNS_MAX_BANDS_1024 = [31, 31, 34, 40, 42, 51, 46, 46, 42, 42, 42, 39, 39],\r\n                TNS_MAX_BANDS_128 = [9, 9, 10, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14];\r\n    \r\n            TNS.prototype.decode = function(stream, info) {\r\n                var windowCount = info.windowCount,\r\n                    bits = info.windowSequence === 2 ? SHORT_BITS : LONG_BITS;\r\n    \r\n                for (var w = 0; w < windowCount; w++) {\r\n                    if (this.nFilt[w] = stream.read(bits[0])) {\r\n                        var coefRes = stream.read(1),\r\n                            nFilt_w = this.nFilt[w],\r\n                            length_w = this.length[w],\r\n                            order_w = this.order[w],\r\n                            direction_w = this.direction[w],\r\n                            coef_w = this.coef[w];\r\n    \r\n                        for (var filt = 0; filt < nFilt_w; filt++) {\r\n                            length_w[filt] = stream.read(bits[1]);\r\n    \r\n                            if ((order_w[filt] = stream.read(bits[2])) > 20)\r\n                                throw new Error(\"TNS filter out of range: \" + order_w[filt]);\r\n    \r\n                            if (order_w[filt]) {\r\n                                direction_w[filt] = !!stream.read(1);\r\n                                var coefCompress = stream.read(1),\r\n                                    coefLen = coefRes + 3 - coefCompress,\r\n                                    tmp = 2 * coefCompress + coefRes,\r\n                                    table = TNS_TABLES[tmp],\r\n                                    order_w_filt = order_w[filt],\r\n                                    coef_w_filt = coef_w[filt];\r\n    \r\n                                for (var i = 0; i < order_w_filt; i++)\r\n                                    coef_w_filt[i] = table[stream.read(coefLen)];\r\n                            }\r\n    \r\n                        }\r\n                    }\r\n                }\r\n            };\r\n    \r\n            TNS.prototype.process = function(ics, data, decode) {\r\n                var mmm = Math.min(this.maxBands, ics.maxSFB),\r\n                    lpc = this.lpc,\r\n                    tmp = this.tmp,\r\n                    info = ics.info,\r\n                    windowCount = info.windowCount;\r\n    \r\n                for (var w = 0; w < windowCount; w++) {\r\n                    var bottom = info.swbCount,\r\n                        nFilt_w = this.nFilt[w],\r\n                        length_w = this.length[w],\r\n                        order_w = this.order[w],\r\n                        coef_w = this.coef[w],\r\n                        direction_w = this.direction[w];\r\n    \r\n                    for (var filt = 0; filt < nFilt_w; filt++) {\r\n                        var top = bottom,\r\n                            bottom = Math.max(0, tmp - length_w[filt]),\r\n                            order = order_w[filt];\r\n    \r\n                        if (order === 0) continue;\r\n    \r\n                        // calculate lpc coefficients\r\n                        var autoc = coef_w[filt];\r\n                        for (var i = 0; i < order; i++) {\r\n                            var r = -autoc[i];\r\n                            lpc[i] = r;\r\n    \r\n                            for (var j = 0, len = (i + 1) >> 1; j < len; j++) {\r\n                                var f = lpc[j],\r\n                                    b = lpc[i - 1 - j];\r\n    \r\n                                lpc[j] = f + r * b;\r\n                                lpc[i - 1 - j] = b + r * f;\r\n                            }\r\n                        }\r\n    \r\n                        var start = info.swbOffsets[Math.min(bottom, mmm)],\r\n                            end = info.swbOffsets[Math.min(top, mmm)],\r\n                            size,\r\n                            inc = 1;\r\n    \r\n                        if ((size = end - start) <= 0) continue;\r\n    \r\n                        if (direction_w[filt]) {\r\n                            inc = -1;\r\n                            start = end - 1;\r\n                        }\r\n    \r\n                        start += w * 128;\r\n    \r\n                        if (decode) {\r\n                            // ar filter\r\n                            for (var m = 0; m < size; m++, start += inc) {\r\n                                for (var i = 1; i <= Math.min(m, order); i++) {\r\n                                    data[start] -= data[start - i * inc] * lpc[i - 1];\r\n                                }\r\n                            }\r\n                        } else {\r\n                            // ma filter\r\n                            for (var m = 0; m < size; m++, start += inc) {\r\n                                tmp[0] = data[start];\r\n    \r\n                                for (var i = 1; i <= Math.min(m, order); i++)\r\n                                    data[start] += tmp[i] * lpc[i - 1];\r\n    \r\n                                for (var i = order; i > 0; i--)\r\n                                    tmp[i] = tmp[i - 1];\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            };\r\n    \r\n            return TNS;\r\n        })();\r\n    })(gwin);\r\n}\r\n","import CsvTableData from \"CsvTableData\"\r\nimport lottery_BaseResLoad from 'lottery_BaseResLoad'\r\nimport SingletonBase from 'SingletonBase'\r\n/*\r\n配置表读取类\r\n*/\r\nexport default class ConfigReader extends SingletonBase {\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    static _onNewObject() {\r\n        return new ConfigReader()\r\n    }\r\n\r\n    ReadCsvRes(path, func, col = 0) {\r\n        var callback = function (err, res) {\r\n            if (!err)\r\n                func(this.ReadCsv(res, col));\r\n            else\r\n                cc.error(err);\r\n        }\r\n        lottery_BaseResLoad.getInstance().LoadByKey(path, path, callback.bind(this));\r\n    }\r\n    /**\r\n    将字符串数据按照csv格式转换成CsvTableData对象\r\n    */\r\n    ReadCsv(text, col) {\r\n        return CsvTableData.Create(text, col);\r\n    }\r\n}","import CsvTableLine from \"CsvTableLine\"\r\n/*\r\n读取CSV文件的解析类\r\n*/\r\nlet cutChar = \",\";\r\nexport default class CsvTableData {\r\n    title = {}\r\n    texArray = []\r\n    initData(data, col) {\r\n        this.texArray = data.split(\"\\r\\n\");\r\n        if (col > 0)\r\n            this.texArray.splice(0, col);\r\n        var mtitle = this.texArray[0].split(cutChar);\r\n        for (var i = 0; i < mtitle.length; i++) {\r\n            this.title[mtitle[i]] = i;\r\n        }\r\n        this.texArray.splice(0, 1);//去掉第一行的标题 key\r\n        this.texArray.splice(this.texArray.length - 1, 1);//去除最后一个空的元素\r\n        for (var i = 0; i < this.texArray.length; i++) {\r\n            this.texArray[i] = CsvTableLine.Create(this.title, this.texArray[i]);\r\n        }\r\n    }\r\n    getDatas() {\r\n        return this.texArray;\r\n    }\r\n    static Create = function (data, col) {\r\n        var tabledata = new CsvTableData();\r\n        tabledata.initData(data, col);\r\n        return tabledata;\r\n    }\r\n}","import lottery_Utils from 'lottery_Utils'\r\n/*\r\n读取csv文件一行数据解析类\r\n*/\r\nlet cutChar = \";\";\r\nexport default class CsvTableLine {\r\n\r\n    title = {}\r\n    texArray = []\r\n\r\n    init(t, tex) {\r\n        this.title = t;\r\n        this.texArray = tex.split(\",\");\r\n    }\r\n    getInt(title) {\r\n        return lottery_Utils.getInstance().getInt(this.texArray[this.title[title]]);\r\n    }\r\n    getIntArray(title) {\r\n        var str = this.texArray[this.title[title]];\r\n        if (!str)\r\n            return [];\r\n        str = str.replace(\"[\", \"\");\r\n        str = str.replace(\"]\", \"\");\r\n        var strsub = str.split(cutChar);\r\n        var intArray = [];\r\n        for (var i = 0; i < strsub.length; i++) {\r\n            intArray.push(lottery_Utils.getInstance().getInt(strsub[i]));\r\n        }\r\n        return intArray;\r\n    }\r\n    getFloat(title) {\r\n        return lottery_Utils.getInstance().getFloat(this.texArray[this.title[title]]);\r\n    }\r\n    getFloatArray(title) {\r\n        var str = this.texArray[this.title[title]];\r\n        if (!str)\r\n            return [];\r\n        str = str.replace(\"[\", \"\");\r\n        str = str.replace(\"]\", \"\");\r\n        var strsub = str.split(cutChar);\r\n        var floatArray = [];\r\n        for (var i = 0; i < strsub.length; i++) {\r\n            floatArray.push(lottery_Utils.getInstance().getFloat(strsub[i]));\r\n        }\r\n        return floatArray;\r\n    }\r\n    getString(title) {\r\n        return this.texArray[this.title[title]];\r\n    }\r\n\r\n    static Create = function (title, tex) {\r\n        var line = new CsvTableLine();\r\n        while (tex.includes(\" \")) {\r\n            tex = tex.replace(\" \", \"\");\r\n        }\r\n        line.init(title, tex);\r\n        return line;\r\n    }\r\n}","import lottery_MsgStation from \"./Data/lottery_MsgStation\";\r\nimport lottery_animDataMgr from \"./Data/lottery_animDataMgr\";\r\nimport lottery_loginViewCtr from \"./UI/view_login/lottery_loginViewCtr\";\r\ncc.Class({\r\n    extends: cc.Component,\r\n    properties: {\r\n        loadingNode: cc.Node,\r\n        loadingProgress: cc.ProgressBar,\r\n        loadingStr: cc.Label\r\n    },\r\n    start() {\r\n        this._GameStart();\r\n    },\r\n    _GameStart() {\r\n        if (cc.sys.isBrowser) {\r\n            (require('AAC'))(window); //初始化web端的直播视频\r\n            (require('videoSocketController'))(ebet.baccarat); //初始化web端的直播视频\r\n        }\r\n        cc.loader.loadRes(\"config\", this.setLoadingProgress.bind(this), (err, res) => {\r\n            if (err) {\r\n                cc.error(err)\r\n                return\r\n            }\r\n            let json = JSON.parse(res)\r\n            let instance = lottery_MsgStation.getInstance();\r\n            instance.httpServer = json.HttpServer\r\n            instance.socketIP = json.SocketIP\r\n            instance.socketPort = json.SocketPort\r\n        })\r\n        lottery_animDataMgr.getInstance().init(this.setLoadingProgress.bind(this), () => {\r\n            lottery_loginViewCtr.getInstance().Open();\r\n            this.loadingNode.active = false;\r\n        });\r\n    },\r\n\r\n    //设置播放精度条\r\n    setLoadingProgress(n, t) {\r\n        let pre = n / t\r\n        !this.loadingStr.node.active && (this.loadingStr.node.active = true);\r\n        this.loadingProgress.progress = pre;\r\n        this.loadingStr.string = (pre * 100).toFixed(2) + '%';\r\n    }\r\n});\r\n//注册一个视频退出全屏事件,防止报错\r\ndocument.exitFullscreen = (one) => { };\r\ncc.director.setClearColor(new cc.Color(0, 0, 0, 0));\r\ncc.macro.ENABLE_TRANSPARENT_CANVAS = true;\r\ncc.game.setFrameRate(30);\r\n","module.exports = {\r\n    /**\r\n     * 模块打开的模式\r\n     * None:打开不会关闭其他面板,也不会受到其他面板打开的影响\r\n     * NeedHide:打开面板不会隐藏其他面板,但是会受到其他面板的影响\r\n     * HideOther:打开面板需要隐藏其他面板,关闭时打开被隐藏的面板\r\n     * NeedHideOther:打开面板隐藏其他面板,关闭时不会打开被隐藏的面板\r\n     */\r\n    moduleEnum: cc.Enum({\r\n        None: 0,\r\n        NeedHide: 1,\r\n        HideOther: 2,\r\n        NeedHideOther: 3\r\n    })\r\n}","import CoreMgr from \"../Core/lottery_CoreMgr\";\r\n\r\nlet allowNew = false\r\nexport default class SingletonBase {\r\n\r\n    static _singleInstance = null\r\n    static lottery_CoreMgr = null\r\n    constructor() {\r\n        if (!allowNew)\r\n            throw new Error(`Can't new on singleton!`)\r\n    }\r\n\r\n    /**\r\n     * 获取单例实例\r\n     */\r\n    static getInstance() {\r\n        if (!this._singleInstance) {\r\n            allowNew = true\r\n            this._singleInstance = this._onNewObject()\r\n            this._AddToCoreMgr()\r\n            allowNew = false\r\n        }\r\n\r\n        return this._singleInstance\r\n    }\r\n\r\n    /**\r\n     * 创建实例的静态回调方法。由子类重写，并返回具体类型的对象\r\n     */\r\n    static _onNewObject() {\r\n        throw new Error(`must be implement!`)\r\n    }\r\n    /**\r\n     * 添加对象致CoreMgr管理类中去\r\n     */\r\n    static _AddToCoreMgr() {\r\n        CoreMgr.RegisterSingleton(this)\r\n    }\r\n    static _doDestroyInstance() {\r\n        let ret = false\r\n        if (this._singleInstance) {\r\n            ret = true\r\n            let instance = this._singleInstance\r\n            this._singleInstance = null\r\n            instance._onDestroyObject()\r\n        }\r\n        return ret\r\n    }\r\n    /** \r\n     * 销毁对象的方法\r\n     */\r\n\r\n    static destroyInstance() {\r\n        return this._doDestroyInstance()\r\n    }\r\n\r\n    /**\r\n     * 实例方法。当单例对象被销毁时被调用的回调方法\r\n     */\r\n    _onDestroyObject() {\r\n        // here is your code...\r\n\r\n        // 需要在结尾调用父类的此方法\r\n        //super._onDestroyObject()\r\n    }\r\n}\r\n","/*\r\n触摸管理，用于控制多点触控问题\r\n*/\r\nlet openSingleTouch = false;\r\n(function () {\r\n    if (!openSingleTouch)\r\n        return;\r\n    cc.Node.maxTouchCount = 1;\r\n    cc.Node.touchCount = 0;\r\n    var _dispatchEvent = cc.Node.prototype.dispatchEvent;\r\n    cc.Node.prototype.dispatchEvent = function (event) {\r\n        switch (event.type) {\r\n            case 'touchstart':\r\n                if (cc.Node.touchCount < cc.Node.maxTouchCount) {\r\n                    cc.Node.touchCount++;\r\n                    this.canTouch = true;\r\n                    _dispatchEvent.call(this, event);\r\n                }\r\n                break;\r\n            case 'touchmove':\r\n                if (!this.canTouch && cc.Node.touchCount < cc.Node.maxTouchCount) {\r\n                    this.canTouch = true;\r\n                    cc.Node.touchCount++;\r\n                }\r\n                if (this.canTouch) {\r\n                    _dispatchEvent.call(this, event);\r\n                }\r\n                break;\r\n            case 'touchend':\r\n                if (this.canTouch) {\r\n                    this.canTouch = false;\r\n                    cc.Node.touchCount--;\r\n                    cc.Node.touchCount = cc.Node.touchCount < 0 ? 0 : cc.Node.touchCount;\r\n                    _dispatchEvent.call(this, event);\r\n                }\r\n                break;\r\n            case 'touchcancel':\r\n                if (this.canTouch) {\r\n                    this.canTouch = false;\r\n                    cc.Node.touchCount--;\r\n                    cc.Node.touchCount = cc.Node.touchCount < 0 ? 0 : cc.Node.touchCount;\r\n                    _dispatchEvent.call(this, event);\r\n                }\r\n                break;\r\n            default:\r\n                _dispatchEvent.call(this, event);\r\n                break;\r\n        }\r\n    }\r\n    // var onPostActivated = cc.Node.prototype._onPostActivated;\r\n\r\n    var _onPreDestroy = cc.Node.prototype._onPreDestroy;\r\n    cc.Node.prototype._onPreDestroy = function () {\r\n        if (this.canTouch) {\r\n            this.canTouch = false;\r\n            cc.Node.touchCount--;\r\n            cc.Node.touchCount = cc.Node.touchCount < 0 ? 0 : cc.Node.touchCount;\r\n        }\r\n        _onPreDestroy.call(this)\r\n    }\r\n})();","module.exports = {\r\n    node: null,\r\n    _currentBuffer: null,\r\n    default_vert: `\r\n    attribute vec4 a_position;\r\n    attribute vec2 a_texCoord;\r\n    attribute vec4 a_color;\r\n    varying vec2 v_texCoord;\r\n    varying lowp vec4 v_fragmentColor;\r\n    void main()\r\n    {\r\n        gl_Position = CC_PMatrix * a_position;\r\n        v_fragmentColor = a_color;\r\n        v_texCoord = a_texCoord;\r\n    }\r\n    `,\r\n    gray_frag: `\r\n    #ifdef GL_ES\r\n    precision mediump float;\r\n    #endif\r\n    varying vec4 v_fragmentColor;\r\n    varying vec2 v_texCoord;\r\n\r\n    uniform sampler2D YTexture;\r\n    uniform sampler2D CBTexture;\r\n    uniform sampler2D CRTexture;\r\n\r\n    \r\n    const mat4 YUV2RGB = mat4(1.1643828125, 0, 1.59602734375, -.87078515625,\r\n           1.1643828125, -.39176171875, -.81296875, .52959375,\r\n           1.1643828125, 2.017234375, 0, -1.081390625,\r\n           0, 0, 0, 1);\r\n    const mat4 YUV2RGB2 = mat4(1.000000,    1.000000,    1.000000,    0.000000,\r\n        0.000000,    -0.34414,    1.177200,    0.000000,\r\n        1.402000,    -0.71414,    0.000000,    0.000000,\r\n        0.000000,    0.000000,    0.000000,    1.000000);\r\n    \r\n    void main()\r\n    {\r\n        \r\n\r\n        float y = texture2D(YTexture, v_texCoord).r;\r\n        float cr = texture2D(CBTexture, v_texCoord).r;\r\n        float cb = texture2D(CRTexture, v_texCoord).r;\r\n        gl_FragColor = v_fragmentColor * vec4(y, cr, cb, 1.0) *YUV2RGB ;\r\n    }\r\n    `,\r\n    MycreateTexture: function () {\r\n        const gl = cc._renderContext;\r\n        const texture = gl.createTexture();\r\n        gl.bindTexture(gl.TEXTURE_2D, texture);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR); //gl.LINEAR\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n\r\n        return texture;\r\n    },\r\n    /**\r\n     * shader\r\n     */\r\n    ShaderEffect: function () {\r\n        this.program = new cc.GLProgram();\r\n        if (cc.sys.isNative) {\r\n            this.program.initWithString(this.default_vert, this.gray_frag);\r\n            this.program.link();\r\n            this.program.updateUniforms();\r\n        } else {\r\n            this.program.initWithVertexShaderByteArray(this.default_vert, this.gray_frag);\r\n            this.program.addAttribute(cc.macro.ATTRIBUTE_NAME_POSITION, cc.macro.VERTEX_ATTRIB_POSITION);\r\n            this.program.addAttribute(cc.macro.ATTRIBUTE_NAME_COLOR, cc.macro.VERTEX_ATTRIB_COLOR);\r\n            this.program.addAttribute(cc.macro.ATTRIBUTE_NAME_TEX_COORD, cc.macro.VERTEX_ATTRIB_TEX_COORDS);\r\n            this.program.link();\r\n            this.program.updateUniforms();\r\n        }\r\n        let gl = cc._renderContext;\r\n        this.program._uniforms[1] = gl.getUniformLocation(this.program._programObj, \"YTexture\");\r\n        this.program._uniforms[2] = gl.getUniformLocation(this.program._programObj, \"CBTexture\");\r\n        this.program._uniforms[3] = gl.getUniformLocation(this.program._programObj, \"CRTexture\");\r\n\r\n        this.program.setUniformLocationWith1i(this.program._uniforms[1], 0);\r\n        this.program.setUniformLocationWith1i(this.program._uniforms[2], 1);\r\n        this.program.setUniformLocationWith1i(this.program._uniforms[3], 2);\r\n        if (this.isAllChildrenUse) {\r\n            this.setProgram(this.node._sgNode, this.program);\r\n        } else {\r\n            this.setProgram(this.node.getComponent(cc.Sprite)._sgNode, this.program);\r\n        }\r\n        this._texture1 = this.MycreateTexture();\r\n        this._texture2 = this.MycreateTexture();\r\n        this._texture3 = this.MycreateTexture();\r\n    },\r\n    Myrendering: function (size) {\r\n        var videoSize = size; //{width:864,height:480};\r\n        const lumaSize = videoSize.width * videoSize.height;\r\n        const chromaSize = lumaSize >> 2;\r\n        const buffer = this._currentBuffer;\r\n        if (buffer) {\r\n            var uint8Y = buffer.subarray(0, lumaSize),\r\n                uint8Cr = buffer.subarray(lumaSize, lumaSize + chromaSize),\r\n                uint8Cb = buffer.subarray(lumaSize + chromaSize, lumaSize + 2 *\r\n                    chromaSize);\r\n            gl.activeTexture(gl.TEXTURE0);\r\n            gl.bindTexture(gl.TEXTURE_2D, this._texture1);\r\n            gl.texImage2D(gl.TEXTURE_2D, 0, gl.LUMINANCE, videoSize.width >> 1,\r\n                videoSize.height >> 1, 0, gl.LUMINANCE, gl.UNSIGNED_BYTE, uint8Y);\r\n            gl.activeTexture(gl.TEXTURE1);\r\n            gl.bindTexture(gl.TEXTURE_2D, this._texture2);\r\n            gl.texImage2D(gl.TEXTURE_2D, 0, gl.LUMINANCE, videoSize.width >> 1,\r\n                videoSize.height >> 1, 0, gl.LUMINANCE, gl.UNSIGNED_BYTE, uint8Cr);\r\n            gl.activeTexture(gl.TEXTURE2);\r\n            gl.bindTexture(gl.TEXTURE_2D, this._texture3);\r\n            gl.texImage2D(gl.TEXTURE_2D, 0, gl.LUMINANCE, videoSize.width >> 1,\r\n                videoSize.height >> 1, 0, gl.LUMINANCE, gl.UNSIGNED_BYTE, uint8Cb);\r\n            uint8Y = null;\r\n            uint8Cr = null;\r\n            uint8Cb = null;\r\n        }\r\n    },\r\n    setProgram: function (node, program) {\r\n        if (cc.sys.isNative) {\r\n            var glProgram_state = cc.GLProgramState.getOrCreateWithGLProgram(program);\r\n            node.setGLProgramState(glProgram_state);\r\n        } else {\r\n            node.setShaderProgram(program);\r\n        }\r\n        var children = node.children;\r\n        if (!children)\r\n            return;\r\n\r\n        for (var i = 0; i < children.length; i++) {\r\n            this.setProgram(children[i], program);\r\n        }\r\n    },\r\n}","export default class commonBtn {\r\n    defaultNode;\r\n    selectNode;\r\n    isSelect = false;\r\n    //按下回调\r\n    downCallback = null;\r\n    constructor(node, downCallback) {\r\n        this.node = node;\r\n        this.defaultNode = cc.find('default', this.node);\r\n        this.selectNode = cc.find('select', this.node);\r\n        this.downCallback = downCallback;\r\n    }\r\n\r\n    select(is) {\r\n        this.selectNode.active = is;\r\n        this.defaultNode.active = !is;\r\n        this.isSelect = is;\r\n    }\r\n}\r\n\r\n/**\r\n * 按下后，弹起的按钮\r\n */\r\nexport class radioBtn extends commonBtn {\r\n\r\n    constructor(node, downCallback) {\r\n        super(node, downCallback);\r\n        this.node.on(cc.Node.EventType.TOUCH_START, this.touchStart, this);\r\n        this.node.on(cc.Node.EventType.TOUCH_CANCEL, this.touchCancle, this);\r\n        this.node.on(cc.Node.EventType.TOUCH_END, this.touchEnd, this);\r\n    }\r\n\r\n    touchStart() {\r\n        this.select(true);\r\n    }\r\n    touchCancle() {\r\n        this.select(false);\r\n    }\r\n    touchEnd() {\r\n        this.select(false);\r\n        this.downCallback && this.downCallback()\r\n    }\r\n}\r\n/**\r\n * 按下后不弹起的按钮，当前组其他按钮按下，才弹起\r\n */\r\nexport class groupBtn extends commonBtn {\r\n    group = null;\r\n    constructor(node, downCallback, group) {\r\n        super(node, downCallback);\r\n        this.node.on(cc.Node.EventType.TOUCH_END, this.touchEnd, this);\r\n        this.group = group;\r\n    }\r\n    touchEnd() {\r\n        if (this.isSelect) {\r\n            this.select(false);\r\n            this.group.index = null;\r\n        }\r\n        else {\r\n            this.select(true);\r\n            let index = this.group.arr.indexOf(this);\r\n            if (this.group.index != null) {\r\n                this.group.arr[this.group.index].select(false);\r\n            }\r\n            this.group.index = index;\r\n            this.downCallback && this.downCallback();\r\n        }\r\n    }\r\n}\r\n","window.ebet = {};\r\nebet.baccarat = {};\r\nebet.NetworkStatistics = function (byteRate) {\r\n    this.startTime = new Date();\r\n    this.totalBytes = 0;\r\n    this.currentBytes = 0;\r\n    this._byteRate = byteRate;\r\n};\r\n\r\nvar proto = ebet.NetworkStatistics.prototype;\r\n\r\nproto.reset = function () {\r\n    this.startTime = new Date();\r\n    this.totalBytes = 0;\r\n    this.currentBytes = 0;\r\n};\r\n\r\nproto.receiveBytes = function (bytes) {\r\n    this.currentBytes += bytes;\r\n    this.totalBytes += bytes;\r\n};\r\n\r\n/**\r\n * 获取网络的状态\r\n * @param {Number} second\r\n */\r\nproto.getNetworkStatus = function (second) {\r\n    second = second || 1;\r\n    var bytes = this.currentBytes;\r\n    this.currentBytes = 0;\r\n    return bytes / (this._byteRate * second);\r\n};\r\nebet.videoSize = {\r\n    width: 864,\r\n    height: 480\r\n};","/**************************************************************************\r\n * Copyright (C) 2015 ebet.com, Inc - All Rights Reserved\r\n * Unauthorized copying of this file, via any medium is strictly prohibited\r\n * Proprietary and confidential\r\n * Written by ebet.com\r\n **************************************************************************/\r\nmodule.exports = H264SpriteFn;\r\n\r\nfunction H264SpriteFn(baccarat) {\r\n    baccarat.H264Sprite = cc.Class({\r\n        extends: cc.Component,\r\n        name: 'videoSpriteCom',\r\n        properties: {\r\n            _currentUrl: null,\r\n            _socketController: null,\r\n\r\n            _hideListener: null,\r\n            _showListener: null,\r\n\r\n            _lbTipInfo: null,\r\n            _count: 0,\r\n            _useWebWorker: true,\r\n        },\r\n        ctor: function () {\r\n            this._currentUrl = ebet.baccarat._currenturl;\r\n            cc.game.on(cc.game.EVENT_HIDE, this.gameHideClose, this);\r\n        },\r\n        gameHideClose() {\r\n            if (this._socketController) {\r\n                this._socketController.close();\r\n            }\r\n        },\r\n        gameShowReOpen() {\r\n            if (this._socketController) {\r\n                this._socketController.reOpen();\r\n            }\r\n        },\r\n        // schefunction:function()\r\n        // {\r\n        //     cc.log(\"schefunction\");\r\n        // },\r\n        //----------------------------------------------------------------------------------------------------------\r\n        update: function (dt) {\r\n            // cc.log(\"update\");\r\n            // this._count+= dt;\r\n            // if(this._count > 0.02)\r\n            // {\r\n            //     this._count = 0;\r\n            if (this._socketController.onRenderingBefore) {\r\n                this._socketController.onRenderingBefore(dt);\r\n                this.VideoShader.Myrendering(ebet.videoSize);\r\n            }\r\n            // }\r\n        },\r\n        onDestroy: function () {\r\n            cc.game.off(cc.game.EVENT_HIDE, this.gameHideClose);\r\n            this._socketController.close();\r\n            this._socketController = null;\r\n            this.unscheduleAllCallbacks();\r\n        },\r\n        onLoad: function () {\r\n            this.VideoShader = require('VideoShader');\r\n            this.VideoShader.node = this.node;\r\n            this.scheduleOnce(() => {\r\n                this.node.removeCom = false;\r\n            }, 0.05)\r\n            let renderer, useWorker = false,\r\n                self = this; //baccarat.USE_WORKER;\r\n            if (cc._renderType !== cc.game.RENDER_TYPE_CANVAS) {\r\n                this._socketController = new baccarat.VideoSocketController(this._currentUrl, useWorker, true);\r\n            }\r\n            let shaderStatus = false;\r\n            let texureImag = new cc.Texture2D();\r\n            let selfSprite = self.node.getComponent(cc.Sprite);\r\n            this._socketController.onPictureDecoded = function (data, pixelFormat, pixelsWidth, pixelsHeight, contentSize) {\r\n                if (self.node.removeCom) return;\r\n                if (!shaderStatus) {\r\n                    shaderStatus = true;\r\n                    self.VideoShader.ShaderEffect();\r\n                }\r\n\r\n                self.VideoShader._currentBuffer = data;\r\n                texureImag.initWithData(data, pixelFormat, pixelsWidth, pixelsHeight, contentSize);\r\n                selfSprite.spriteFrame = new cc.SpriteFrame(texureImag);\r\n                selfSprite.node.width = cc.winSize.width;\r\n                selfSprite.node.height = cc.winSize.height;\r\n            }\r\n        },\r\n    })\r\n};","import SingletonBase from \"../../Singleton/SingletonBase\";\r\n\r\n/**\r\n * 基础资源加载类\r\n * \r\n * 缺乏制定文件夹扫描加载\r\n */\r\n\r\nexport default class BaseResLoad extends SingletonBase {\r\n\r\n    WaitList = []\r\n    DoneList = []\r\n    KeyList = []\r\n    keyDic = {}\r\n    ProgressList = []\r\n    TypeList = []\r\n    CurDownloadKey = null\r\n    IsLoading = false\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    static _onNewObject() {\r\n        return new BaseResLoad()\r\n    }\r\n    _onDestroyObject() {\r\n        this.IsLoading = false;\r\n        this.KeyList = [];\r\n        this.keyDic = {};\r\n        this.WaitList = [];\r\n        this.DoneList = [];\r\n        this.ProgressList = [];\r\n        this.TypeList = [];\r\n    }\r\n    DownloadRes() {\r\n        if (this.KeyList.length <= 0) {//下载完成\r\n            this.IsLoading = false;\r\n        }\r\n        else {//数组中要下载的列表还有\r\n            //当前下载的资源完成\r\n            if (this.CurDownloadKey == null || this.CurDownloadKey == \"undefined\") {\r\n                this.CurDownloadKey = this.KeyList[0];//获取第一个key\r\n                var self = this;\r\n                this.IsLoading = true;\r\n                var downFunc = function (err, obj) {\r\n                    var deleteFunc = function () {\r\n                        //删除KeyList中的第一个数据\r\n                        self.KeyList.shift();\r\n                        //删除等待列表中的key\r\n                        delete (self.WaitList[self.CurDownloadKey]);\r\n                        delete (self.DoneList[self.CurDownloadKey]);\r\n                        delete (self.TypeList[self.CurDownloadKey]);\r\n                        delete (self.ProgressList[self.CurDownloadKey]);\r\n                        delete (self.keyDic[self.CurDownloadKey])\r\n                    }\r\n                    if (!err) {\r\n                        //下载完成，\r\n                        //将下载好的图片回调给传入的函数\r\n                        if (self.DoneList[self.CurDownloadKey] != null && self.DoneList[self.CurDownloadKey] != \"undefined\") {\r\n                            self.DoneList[self.CurDownloadKey](err, obj, self.CurDownloadKey);\r\n                        }\r\n                    }\r\n                    else {\r\n                        cc.error(\"当前下载失败，开始下一个\" + err);\r\n                    };\r\n                    deleteFunc();\r\n                    self.CurDownloadKey = null;\r\n                    self.CheckUpdate();\r\n                };\r\n                if (this.TypeList[this.CurDownloadKey] && !this.ProgressList[this.CurDownloadKey])\r\n                    cc.loader.loadRes(this.WaitList[this.CurDownloadKey], this.TypeList[this.CurDownloadKey], downFunc);\r\n                else if (!this.TypeList[this.CurDownloadKey] && this.ProgressList[this.CurDownloadKey])\r\n                    cc.loader.loadRes(this.WaitList[this.CurDownloadKey], this.ProgressList[this.CurDownloadKey], downFunc)\r\n                else if (!this.TypeList[this.CurDownloadKey] && !this.ProgressList[this.CurDownloadKey])\r\n                    cc.loader.loadRes(this.WaitList[this.CurDownloadKey], downFunc);\r\n                else\r\n                    cc.loader.loadRes(this.WaitList[this.CurDownloadKey], this.TypeList[this.CurDownloadKey], this.ProgressList[this.CurDownloadKey], downFunc);\r\n            }\r\n            else {\r\n                //当前下载的未完成，继续等待完成\r\n                cc.error(\"当前下载的未完成，继续等待完成\");\r\n            }\r\n        }\r\n    }\r\n    CheckUpdate() {\r\n        if (this.KeyList.length > 0) {\r\n            //获取最后一个， 然后开始下载\r\n            this.DownloadRes();\r\n        }\r\n        else {\r\n            this.IsLoading = false;\r\n        }\r\n    }\r\n\r\n    /*------------------------------对外接口---------------------------------*/\r\n    /**\r\n     * 根据key和路径有序加载\r\n     * 加载Atlas资源的时候需要传入mtype = cc.SpriteAtlas\r\n     */\r\n    LoadByKey(key, url, callback, mtype = null, progress = null) {\r\n        if (this.keyDic[key])\r\n            return;\r\n\r\n        var obj;\r\n        if (mtype)\r\n            obj = cc.loader.getRes(url, mtype);\r\n        else\r\n            obj = cc.loader.getRes(url);\r\n        if (obj) {\r\n            callback(null, obj, key)\r\n            return;\r\n        }\r\n\r\n        this.keyDic[key] = true\r\n        this.KeyList.push(key);\r\n        this.WaitList[key] = url;\r\n        this.DoneList[key] = callback;\r\n        if (mtype)\r\n            this.TypeList[key] = mtype;\r\n        if (progress)\r\n            this.ProgressList[key] = progress;\r\n        if (this.IsLoading == false) {//开始下载\r\n            this.DownloadRes();\r\n        }\r\n        return null;\r\n    }\r\n\r\n    LoadResDir(url, progress, callback) {\r\n        cc.loader.loadResDir(url, progress, callback)\r\n    }\r\n}","var SocketEnum = require(\"lottery_SocketEnum\");\r\nexport default class simplewebsocket {\r\n    _wb_client = null\r\n    _host = \"\"\r\n    _port = \"\"\r\n    _attachParam = \"\"//附带参数\r\n    _cacheMsg = []\r\n    _is_opened = false\r\n    _onMessageCallback = null//消息接受派发回调函数。socketmanager会注册 然后在manager里面去做派发\r\n    _onConnectCallback = null//建立链接的回调函数。socketmanager会注册，然后在manager里面处理逻辑\r\n\r\n    init(host, port, param) {\r\n        try {\r\n            this._is_opened = false;\r\n            this._host = host || this._host;\r\n            this._port = port || this._port;\r\n            this._attachParam = param || this._attachParam || \"\";\r\n            this.connect();\r\n        } catch (error) {\r\n            cc.log(cc.js.getClassName(this) + \":\" + error.message);\r\n        }\r\n    }\r\n\r\n    connect() {\r\n        try {\r\n            this._is_opened = false\r\n            //var url = \"ws://\" + this._host + \":\" + this._port + \"/websocket/\" + this._attachParam;\r\n            var url = \"ws://\" + this._host + \":\" + this._port + \"/socket/video/\" + this._attachParam;\r\n            this._wb_client = new WebSocket(url);\r\n            this._wb_client.onopen = this.onOpen.bind(this)\r\n            this._wb_client.onmessage = this.onMessage.bind(this)\r\n            this._wb_client.onerror = this.onError.bind(this)\r\n            this._wb_client.onclose = this.onClose.bind(this)\r\n        } catch (error) {\r\n            cc.log(cc.js.getClassName(this) + \":\" + error.message);\r\n        }\r\n\r\n    }\r\n    onOpen(e) {\r\n        try {\r\n            this._is_opened = true\r\n            for (let index = 0; index < this._cacheMsg.length; index++) {\r\n                const data = this._cacheMsg[index];\r\n                this.send(data);\r\n            }\r\n            this._cacheMsg = []\r\n\r\n            if (this._onConnectCallback) {\r\n                this._onConnectCallback(SocketEnum.success)\r\n            }\r\n        } catch (error) {\r\n            cc.log(cc.js.getClassName(this) + \":\" + error.message);\r\n        }\r\n    }\r\n    send(data) {\r\n        try {\r\n            if (this._is_opened && this._wb_client.readyState === 1) {\r\n                this._wb_client.send(data);\r\n            }\r\n            else {\r\n                this._cacheMsg.push(data);\r\n            }\r\n        } catch (error) {\r\n            cc.log(cc.js.getClassName(this) + \":\" + error.message);\r\n        }\r\n    }\r\n    onError(e) {\r\n        try {\r\n            this._is_opened = false\r\n            if (this._onConnectCallback) {\r\n                this._onConnectCallback(SocketEnum.error)\r\n            }\r\n        } catch (error) {\r\n            cc.log(cc.js.getClassName(this) + \":\" + error.message);\r\n        }\r\n    }\r\n    onMessage(message) {\r\n        if (this._onMessageCallback)\r\n            this._onMessageCallback(message);\r\n    }\r\n    onClose(e) {\r\n        if (this._onConnectCallback) {\r\n            this._onConnectCallback(SocketEnum.close)\r\n        }\r\n    }\r\n    /**\r\n     * 主动关闭;\r\n     */\r\n    close() {\r\n        try {\r\n            if (this._is_opened) {\r\n                this._is_opened = false;\r\n                //清空onclose主动回调的原因是因为要兼容浏览器bug\r\n                //在主动断开链接之后浏览器可能很晚很晚才能回调onclose\r\n                //结果导致再次链接的时候反而处理不正确了\r\n                this._wb_client.onclose = null\r\n                this._wb_client.onmessage = null\r\n                this._wb_client.onopen = null\r\n                this._wb_client.onerror = null\r\n                this._wb_client.close(1000);\r\n                this._wb_client = null;\r\n            }\r\n        } catch (error) {\r\n            cc.log(cc.js.getClassName(this) + \":\" + error.message);\r\n        }\r\n    }\r\n    /**\r\n     * 注册消息派发函数\r\n     * @param {*} callback \r\n     */\r\n    RegestMessageEvent(callback) {\r\n        this._onMessageCallback = callback;\r\n    }\r\n    /**\r\n     * 连接状态改变回掉函数\r\n     * @param {*} callback \r\n     */\r\n    RegisterConnectEvent(callback) {\r\n        this._onConnectCallback = callback\r\n    }\r\n}","import SingletonBase from \"../../Singleton/SingletonBase\";\r\n\r\nexport default class BaseUrlLoad extends SingletonBase {\r\n\r\n    keyList = []\r\n    urlList = []\r\n    callbackList = []\r\n    suffixList = []\r\n    curKey = \"\"\r\n    curUrl = \"\"\r\n    curCallback = null\r\n    curSuffix = \"\"\r\n    isLoading = false\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n    \r\n    static _onNewObject() {\r\n        return new BaseUrlLoad()\r\n    }\r\n    /**\r\n    从远程服务器获取资源\r\n    @param url 远程下载链接\r\n    @param suffix 资源类型 通常是填后缀，eg.  png txt jpg...\r\n    @param callback 下载完成回掉函数 \r\n    */\r\n    LoadUrl(key, url, suffix, callback) {\r\n        this.keyList.push(key);\r\n        this.urlList.push(url);\r\n        this.suffixList.push(suffix);\r\n        this.callbackList.push(callback);\r\n        this.load();\r\n    }\r\n    /*--------------------------------------内部私有方法------------------------------------- */\r\n    loadHead() {\r\n        this.isLoading = true;\r\n        this.curKey = this.keyList.splice(0, 1)[0];\r\n        this.curUrl = this.urlList.splice(0, 1)[0];\r\n        this.curCallback = this.callbackList.splice(0, 1)[0];\r\n        this.curSuffix = this.suffixList.splice(0, 1)[0];\r\n        cc.loader.load({ \"url\": this.curUrl, \"type\": this.curSuffix }, this.loadCallback.bind(this));\r\n    }\r\n    load() {\r\n        if (this.isLoading)\r\n            return;\r\n        this.loadHead();\r\n    }\r\n    loadCallback(err, data) {\r\n        if (err) {//下载出错\r\n        }\r\n        else {\r\n        }\r\n        this.curCallback(err, data, this.curKey)\r\n        if (this.urlList.length > 0) {\r\n            this.loadHead();\r\n        }\r\n        else {\r\n            this.isLoading = false;\r\n        }\r\n    }\r\n}","export default class CoreMgr {\r\n    static singletonList = []\r\n\r\n    static RegisterSingleton(singleton) {\r\n        this.singletonList.push(singleton)\r\n    }\r\n\r\n    static Destroy() {\r\n        for (let index = 0; index < this.singletonList.length; index++) {\r\n            const element = this.singletonList[index];\r\n            element.destroyInstance()\r\n        }\r\n    }\r\n}","export class lottery_EventDefine {\r\n    //登录界面\r\n    static loginView = {\r\n        keyboradNum: \"KEYBORADNUM\"\r\n    }\r\n    //系统事件\r\n    static sys = {\r\n        loadingOvertime: 'LOADINGOVERTIME'\r\n    }\r\n}","import SingletonBase from \"../../Singleton/SingletonBase\";\r\n\r\n/**\r\n * 消息处理中心\r\n * 当前是同步机制\r\n */\r\nexport default class GlobalMsg extends SingletonBase {\r\n\r\n    m_Callbacks = {}\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    static _onNewObject() {\r\n        return new GlobalMsg()\r\n    }\r\n\r\n    _onDestroyObject() {\r\n        this.m_Callbacks = {}\r\n    }\r\n    /**注册单个监听 */\r\n    Register(msgkey, callback, uuid) {\r\n        try {\r\n            if (this.m_Callbacks[msgkey] == null) {\r\n                this.m_Callbacks[msgkey] = []\r\n            }\r\n            this.m_Callbacks[msgkey].push({\r\n                \"callback\": callback,\r\n                \"uuid\": uuid\r\n            })    //数组，同一个脚本，可能注册多次\r\n        } catch (error) {\r\n            cc.log(cc.js.getClassName(this) + \":\" + error.message);\r\n        }\r\n    }\r\n    /**注销监听\r\n     * 如果传入UUID 则注销单个监听 如果uuid为空 则注销 整个 msgkey的监听\r\n    */\r\n    Unregister(msgkey, uuid) {\r\n        try {\r\n            if (this.m_Callbacks[msgkey] == null) {\r\n                cc.log(\"Unregister \" + msgkey + \" failed! case it is null!\")\r\n                return\r\n            }\r\n            if (uuid) {\r\n                for (let index = 0; index < this.m_Callbacks[msgkey].length; index++) {\r\n                    const element = this.m_Callbacks[msgkey][index];\r\n                    if (element.uuid == uuid) {\r\n                        this.m_Callbacks[msgkey].splice(index, 1);\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                delete this.m_Callbacks[msgkey];\r\n            }\r\n        } catch (error) {\r\n            cc.log(cc.js.getClassName(this) + \":\" + error.message);\r\n        }\r\n    }\r\n    /**\r\n     * 发送消息，msgkey 消息key值\r\n     * args 需要传递的参数 自定义数据结构\r\n     */\r\n    Send(msgkey, args) {\r\n        if (this.m_Callbacks[msgkey] == null) {\r\n            cc.log(\"this.m_Callbacks[msgkey] == null:\" + msgkey + \"---------------------------------\")\r\n            return\r\n        }\r\n        for (let index = 0; index < this.m_Callbacks[msgkey].length; index++) {\r\n            const element = this.m_Callbacks[msgkey][index];\r\n            if (element.callback) {\r\n                element.callback(args);\r\n            }\r\n        }\r\n    }\r\n}","import SingletonBase from \"../../Singleton/SingletonBase\";\r\n\r\n//数据类型\r\nlet EXHRDataType = cc.Enum({\r\n    Undefined: 0,\r\n    Text: 1,\r\n    Binary: 2,\r\n});\r\nvar Max_Try_Time = 4;\r\nexport default class HttpUtils extends SingletonBase {\r\n\r\n    _reqListTimes = {}\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    static _onNewObject() {\r\n        return new HttpUtils()\r\n    }\r\n    /**\r\n     * HTTP get;\r\n     */\r\n    httpGets(url, dataType, callback) {\r\n        try {\r\n            var xhr = new XMLHttpRequest()\r\n            var self = this\r\n            xhr.onload = function () {\r\n                self.getRequestEnd(xhr, url, dataType, callback)\r\n            }\r\n            xhr.onerror = function (e) {\r\n                self.getError(callback, url)\r\n            }\r\n            xhr.responseType = \"arraybuffer\"\r\n            xhr.open(\"GET\", url, true)\r\n            xhr.send()\r\n        } catch (error) {\r\n            cc.log(cc.js.getClassName(this) + \":\" + error.message);\r\n        }\r\n    }\r\n    getError(callback, url) {\r\n        try {\r\n            if (callback) {\r\n                callback(false, url)\r\n            }\r\n        } catch (error) {\r\n            cc.log(cc.js.getClassName(this) + \":\" + error.message);\r\n        }\r\n    }\r\n    /**\r\n     * get response;\r\n     */\r\n    getRequestEnd(xhr, url, dataType, callback) {\r\n        try {\r\n            var isOK = false\r\n            if (xhr.readyState == 4 && (xhr.status >= 200 && xhr.status < 400)) {\r\n                var response = null;\r\n                if (dataType == EXHRDataType.Binary) {\r\n                    response = xhr.response;\r\n                }\r\n                else {\r\n                    response = xhr.responseText;\r\n                }\r\n                isOK = true\r\n                callback(isOK, response)\r\n            }\r\n            else {\r\n                this.getRequestFailed(url, datatype, callback)\r\n            }\r\n        } catch (error) {\r\n            cc.log(cc.js.getClassName(this) + \":\" + error.message);\r\n        }\r\n    }\r\n    /**\r\n     * dispose get failed\r\n     */\r\n    getRequestFailed(url, datatype, callback) {\r\n        try {\r\n            if (!this._reqListTimes[url]) {\r\n                this._reqListTimes[url] = 0;\r\n            }\r\n            if (this._reqListTimes[url] >= Max_Try_Time) {//达到最大尝试次数;\r\n                if (callback) {\r\n                    callback(false);\r\n                }\r\n            }\r\n            else {\r\n                this._reqListTimes[url]++;  //尝试次数自加;\r\n                this.httpGets(url, datatype, callback);\r\n            }\r\n        } catch (error) {\r\n            cc.log(cc.js.getClassName(this) + \":\" + error.message);\r\n        }\r\n    }\r\n    serializePost(data) {\r\n        try {\r\n            if (typeof data == 'string') {\r\n                return data;\r\n            }\r\n            var arr = [];\r\n            for (var param in data) {\r\n                arr.push(encodeURIComponent(param) + '=' + encodeURIComponent(data[param]));\r\n            }\r\n            return arr.join('&');\r\n        } catch (error) {\r\n            cc.log(cc.js.getClassName(this) + \":\" + error.message);\r\n        }\r\n    }\r\n    /**\r\n     * http post请求\r\n     */\r\n    httpPost(url, params, callback, fail) {\r\n        try {\r\n            var timers = null;\r\n            var xhr = new XMLHttpRequest()\r\n            var self = this\r\n            xhr.onreadystatechange = function () {\r\n                if (xhr.readyState == 4) {\r\n                    clearTimeout(timers);\r\n                    if (xhr.status >= 200 && xhr.status < 400) {\r\n                        if (callback) {\r\n                            if (xhr.responseText && typeof xhr.responseText == 'string') {\r\n                                callback(JSON.parse(xhr.responseText));\r\n                            } else {\r\n                                callback(xhr.responseText)\r\n                            }\r\n                        }\r\n                    } else {\r\n                        self.getError(fail, url)\r\n                    }\r\n                }\r\n            }\r\n            xhr.onerror = function (e) {\r\n                self.getError(fail, url)\r\n            }\r\n            xhr.open(\"POST\", url, true);\r\n            xhr.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\r\n            xhr.timeout = 10000;// 5 seconds for timeout\r\n            xhr.send(this.serializePost(params));\r\n            timers = setTimeout(() => {\r\n                xhr.abort();\r\n            }, xhr.timeout);\r\n        } catch (error) {\r\n            cc.log(cc.js.getClassName(this) + \":\" + error.message);\r\n        }\r\n    }\r\n    ajaxGet(url, succ, fail, type, data) {\r\n        /**\r\n         * 传入方式默认为对象\r\n         * */\r\n        var options = {};\r\n        /**\r\n         * 默认为GET请求\r\n         * */\r\n        options.type = (type || \"GET\").toUpperCase();\r\n        /**\r\n         * 返回值类型默认为json\r\n         * */\r\n        options.dataType = options.dataType || 'json';\r\n        /**\r\n         * 默认为异步请求\r\n         * */\r\n        options.async = options.async || true;\r\n        /* 超时处理 */\r\n        options.timeout = options.timeout || 1500;\r\n        /**\r\n         * 对需要传入的参数的处理\r\n         * */\r\n        var params = data || '';\r\n        var xhr, timers;\r\n        /**\r\n         * 创建一个 ajax请求\r\n         * W3C标准和IE标准\r\n         */\r\n        if (window.XMLHttpRequest) {\r\n            /**\r\n             * W3C标准\r\n             * */\r\n            xhr = new XMLHttpRequest();\r\n        } else {\r\n            /**\r\n             * IE标准\r\n             * @type {ActiveXObject}\r\n             */\r\n            xhr = new ActiveXObject('Microsoft.XMLHTTP')\r\n        }\r\n\r\n        xhr.onreadystatechange = function () {\r\n            if (xhr.readyState == 4) {\r\n                var status = xhr.status;\r\n                clearTimeout(timers);\r\n                if (status >= 200 && status < 300) {\r\n                    succ && succ(JSON.parse(xhr.responseText), xhr.responseXML);\r\n                } else {\r\n                    fail && fail(status);\r\n                }\r\n            }\r\n        };\r\n        if (options.type == 'GET') {\r\n            xhr.open(\"GET\", url + '?' + params, options.async);\r\n            xhr.send(null)\r\n        } else if (options.type == 'POST') {\r\n            /**\r\n             *打开请求\r\n            * */\r\n            xhr.open('POST', options.url, options.async);\r\n            /**\r\n             * POST请求设置请求头\r\n             * */\r\n            xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');\r\n            /**\r\n             * 发送请求参数\r\n             */\r\n            xhr.send(params);\r\n        }\r\n        timers = setTimeout(() => {\r\n            xhr.abort();\r\n        }, options.timeout);\r\n    }\r\n}","import { radioBtn } from \"./commonBtn\";\r\nimport { lottery_EventDefine } from \"../../Data/lottery_EventDefine\";\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class lotteryKeyboard extends cc.Component {\r\n    @property(cc.Node)\r\n    content = null;\r\n\r\n    keyBoardArr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, -1];\r\n\r\n    //keyBoardjs\r\n    itemArr = [];\r\n\r\n    onLoad() {\r\n        for (let index in this.keyBoardArr) {\r\n            let one = this.content.children[index];\r\n            this.itemArr.push(new radioBtn(one, this.numKeyDown.bind(this, index)));\r\n        }\r\n    }\r\n\r\n    //按下按钮的回调\r\n    numKeyDown(index) {\r\n        cc.systemEvent.emit(lottery_EventDefine.loginView.keyboradNum, this.keyBoardArr[index])\r\n    }\r\n\r\n}","/**\r\n * 多语言Label类\r\n */\r\nimport lottery_LanguageManager from \"lottery_LanguageManager\";\r\n\r\ncc.Class({\r\n    extends: require(\"lottery_LanguageTool\"),\r\n\r\n    editor: CC_EDITOR && {\r\n        menu: 'i18n:language/label',\r\n    },\r\n\r\n    properties: {\r\n        Label: {\r\n            default: null,\r\n            type: cc.Label,\r\n            tooltip: \"文本显示组件对象\"\r\n        },\r\n    },\r\n\r\n    onLoad() {\r\n        this._super();\r\n        if (this.Label == null)\r\n            this.Label = this.node.getComponent(cc.Label);\r\n        this.UpdateText();\r\n    },\r\n\r\n    UpdateText() {\r\n        if (!this.languageID) {\r\n            return;\r\n        }\r\n        // if (this.languageID == \"CP_API_30\") {\r\n        //     console.log();\r\n        // }\r\n        this.languageManager = this.languageManager || lottery_LanguageManager.getInstance();\r\n        let str = this.languageManager.GetLanguageText(this.languageID);\r\n        if (this.args && this.args.length > 0) {\r\n            for (let index = 0; index < this.args.length; index++) {\r\n                const element = this.args[index];\r\n                str = str.replace(\"{\" + index + \"}\", element)\r\n            }\r\n        }\r\n        this.Label.string = str\r\n    },\r\n});","import SingletonBase from \"SingletonBase\";\r\nimport BaseResLoad from \"../Core/ResHandle/lottery_BaseResLoad\";\r\n\r\n/**多语言枚举 */\r\nlet languageEnum = cc.Enum({\r\n    none: 0,\r\n    cn: 1,//中文\r\n    en: 2,//英语\r\n})\r\n\r\nconst languageJSName = [\"cn\", \"enus\"]//多语言文本名字\r\nconst languageStr = \"Config/language/Manage_\"//多语言文本前缀\r\nconst languageNam = [\"中文\", \"英语\"];\r\n/**多语言管理脚本*/\r\nexport default class languageManager extends SingletonBase {\r\n\r\n    curLanguageID = 0\r\n    languageDic = {}\r\n    changeEvent = {}\r\n    LanguageEnum = languageEnum\r\n    languageNam = languageNam\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    static _onNewObject() {\r\n        return new languageManager();\r\n    }\r\n\r\n    loadLanguage() {\r\n        let url = languageStr + languageJSName[this.curLanguageID - 1]\r\n        BaseResLoad.getInstance().LoadByKey(languageJSName[this.curLanguageID - 1], url, (err, text) => {\r\n            if (err)\r\n                return;\r\n            this.languageDic = JSON.parse(text)\r\n            this.callEvent();\r\n        })\r\n    }\r\n    callEvent() {\r\n        for (const key in this.changeEvent) {\r\n            this.changeEvent[key](this.curLanguageID);\r\n        }\r\n        let eventCus = new cc.Event.EventCustom(\"InitLanguageCallBack\", false);\r\n        cc.systemEvent.dispatchEvent(eventCus);\r\n    }\r\n    /*----------------------------------对外接口-------------------------------------- */\r\n    InitLanguage(lang) {\r\n        lang ? (lang = lang) : (lang = languageEnum.cn)//如果不传入 则默认改为中文\r\n        if (this.curLanguageID !== lang) {\r\n            this.curLanguageID = lang;\r\n            this.loadLanguage();\r\n        }\r\n    }\r\n    Register(tag, callback, self) {\r\n        this.changeEvent[tag] = self ? callback.bind(self) : callback;\r\n    }\r\n    UnRegister(tag) {\r\n        delete this.changeEvent[tag];\r\n    }\r\n    GetLanguageText(key) {\r\n        let value = this.languageDic[key] && this.languageDic[key]\r\n        return value || key;\r\n    }\r\n}","import lottery_BaseResLoad from 'lottery_BaseResLoad'\r\n\r\n/**\r\n * 多语言RichText key类 从多语言文本获取到的是文本名字 需要从本地加载\r\n */\r\ncc.Class({\r\n    extends: require(\"lottery_LanguageTool\"),\r\n\r\n    editor: CC_EDITOR && {\r\n        menu: 'i18n:language/richtextKey',\r\n    },\r\n\r\n    properties: {\r\n        Label: {\r\n            default: null,\r\n            type: cc.RichText,\r\n            tooltip: \"文本显示组件对象\"\r\n        },\r\n        //文本缓存\r\n        textCache: {\r\n            default: {},\r\n            visible: false\r\n        }\r\n    },\r\n\r\n    onLoad() {\r\n        this._super();\r\n        if (this.Label == null)\r\n            this.Label = this.node.getComponent(cc.RichText);\r\n    },\r\n\r\n    /**动态设置语言ID 刷新一次文本*/\r\n    SetLanguageID(id) {\r\n        if (this.languageID === id)\r\n            return;\r\n        this.languageID = id;\r\n        if (this.languageID)\r\n            this.UpdateText();\r\n    },\r\n    UpdateText() {\r\n        let key = this.languageManager.GetLanguageText(this.languageID);\r\n        let helper = cc.lottery.Helper;\r\n        if (this.textCache[key]) {\r\n            this.Label.string = this.textCache[key]\r\n            return;\r\n        }\r\n        lottery_BaseResLoad.getInstance().LoadByKey(key, helper.Res.ConfigPath + \"RuleText/\" + key, (err, text, _key) => {\r\n            if (this.args && this.args.length > 0) {\r\n                for (let index = 0; index < this.args.length; index++) {\r\n                    const element = this.args[index];\r\n                    text = text.replace(\"{\" + index + \"}\", element)\r\n                }\r\n            }\r\n            this.textCache[key] = text\r\n            this.Label.string = text;\r\n        })\r\n    }\r\n});\r\n","/**\r\n * 多语言RichText类\r\n */\r\ncc.Class({\r\n    extends: require(\"lottery_LanguageTool\"),\r\n\r\n    editor: CC_EDITOR && {\r\n        menu: 'i18n:language/richtext',\r\n    },\r\n\r\n    properties: {\r\n        Label: {\r\n            default: null,\r\n            type: cc.RichText,\r\n            tooltip: \"文本显示组件对象\"\r\n        },\r\n        constStrArr: [],//固定字符串数组\r\n        keyArr: [],//key值列表\r\n    },\r\n\r\n    onLoad() {\r\n        this._super();\r\n        if (this.Label == null)\r\n            this.Label = this.node.getComponent(cc.RichText);\r\n    },\r\n\r\n    UpdateText() {\r\n        this.languageManager || (this.languageManager = cc.lottery.LanguageManager);\r\n        if (this.languageID) {\r\n            this.keyArr = [[this.languageID]];\r\n            this.constStrArr = [[\"\"]];\r\n        }\r\n        if (!this.constStrArr.length) {\r\n            return;\r\n        }\r\n        let resultStr = \"\";\r\n        for (let i = 0; i < this.constStrArr.length; i++) {\r\n            let constStrs = this.constStrArr[i];\r\n            let keys = this.keyArr[i] || [];\r\n            for (let j = 0; j < constStrs.length; j++) {\r\n                resultStr += constStrs[j];\r\n                let key = keys[j] || \"\";\r\n                if (!key) {\r\n                    continue;\r\n                }\r\n                let str = this.languageManager.GetLanguageText(key);\r\n                let args = this.args.length ? this.args[i][j] : [];\r\n                for (let index = 0; index < args.length; index++) {\r\n                    const element = args[index];\r\n                    str = str.replace(\"{\" + index + \"}\", element)\r\n                }\r\n                resultStr += str;\r\n            }\r\n        }\r\n        this.Label.string = resultStr;\r\n    },\r\n\r\n    /**\r\n     * constStrArr为固定字符串数组，类型为二维数组\r\n     * keyArr为key值列表，类型为二维数组\r\n     */\r\n    setLanguageId(constStrArr, keyArr) {\r\n        this.constStrArr = constStrArr;\r\n        this.keyArr = keyArr;\r\n        this.UpdateText();\r\n    },\r\n\r\n    changeLanguage(lang) {\r\n        if (!this.node.active) {\r\n            this.changeLanguageEnum = lang\r\n            return;\r\n        }\r\n        this.curLanguageEnum = this.changeLanguageEnum;\r\n        this.UpdateText();\r\n    },\r\n\r\n    /**\r\n     * args需要替换的特殊字符,为三维数组\r\n     */\r\n    SetArgs(args) {\r\n        this.args = args;\r\n        this.UpdateText();\r\n    },\r\n});\r\n","/**\r\n * 多语言脚本基类，主要处理逻辑包括 事件的监听与反监听，文本刷新逻辑\r\n * 如果在关闭状态下 只记录修改状态 不刷新文本，打开后对比改变值与显示值，不相同就刷新\r\n */\r\nimport lottery_LanguageManager from \"lottery_LanguageManager\";\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        languageID: {\r\n            default: \"\",\r\n            tooltip: \"文本key\"\r\n        },\r\n        languageManager: {\r\n            default: null,\r\n            visible: false\r\n        },\r\n        curLanguageEnum: {\r\n            default: 0,\r\n            visible: false\r\n        },\r\n        changeLanguageEnum: {\r\n            default: 1,\r\n            visible: false\r\n        },\r\n        args: {\r\n            default: [],\r\n            visible: false\r\n        },\r\n    },\r\n    onLoad() {\r\n        this.languageManager = lottery_LanguageManager.getInstance();\r\n        this.languageManager.Register(this.node.uuid, this.changeLanguage, this);\r\n    },\r\n    onEnable() {\r\n        if (this.curLanguageEnum !== this.changeLanguageEnum) {\r\n            this.changeLanguage(this.changeLanguageEnum)\r\n        }\r\n    },\r\n    onDestroy() {\r\n        this.languageManager.UnRegister(this.node.uuid);\r\n    },\r\n    changeLanguage(lang) {\r\n        if (!this.node.active) {\r\n            this.changeLanguageEnum = lang\r\n            return;\r\n        }\r\n        this.curLanguageEnum = this.changeLanguageEnum;\r\n        if (this.languageID)\r\n            this.UpdateText();\r\n    },\r\n    /**子类重写的方法 */\r\n    UpdateText() {\r\n\r\n    },\r\n    /**动态设置语言ID 刷新一次文本*/\r\n    SetLanguageID(id) {\r\n        this.languageID = id;\r\n        if (this.languageID)\r\n            this.UpdateText();\r\n    },\r\n    /**设置格式化字符串的参数 采用动态参数 arguments*/\r\n    SetArgs() {\r\n        this.args = arguments;\r\n        if (this.languageID)\r\n            this.UpdateText();\r\n    }\r\n});","import { groupBtn } from \"../tools/commonBtn\";\r\nimport { lottery_EventDefine } from \"../../Data/lottery_EventDefine\";\r\nimport lottery_MsgStation from \"../../Data/lottery_MsgStation\";\r\nimport Helper from \"../tools/lottery_helper\";\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class lotteryLogin extends cc.Component {\r\n    //BtnArr\r\n    btnGruop = {\r\n        arr: [],\r\n        index: null\r\n    }\r\n\r\n    @property(cc.Node)\r\n    content = null;\r\n\r\n    @property(cc.Node)\r\n    sumbitBtn = null;\r\n\r\n    onLoad() {\r\n        for (let i = 0, length = this.content.children.length; i < length; i++) {\r\n            this.btnGruop.arr.push(new loginCotentBtn(this.content.children[i], () => { }, this.btnGruop));\r\n        }\r\n        this.sumbitBtn.on(cc.Node.EventType.TOUCH_END, this.submitInfor, this);\r\n    }\r\n    onEnable() {\r\n        cc.systemEvent.on(lottery_EventDefine.loginView.keyboradNum, this.setContent, this);\r\n    }\r\n    onDisable() {\r\n        cc.systemEvent.off(lottery_EventDefine.loginView.keyboradNum, this.setContent, this);\r\n    }\r\n\r\n    /**\r\n     * 提交按钮\r\n     */\r\n    submitInfor() {\r\n        let user = this.btnGruop.arr[0].editbox.string;\r\n        let password = this.btnGruop.arr[1].editbox.string;\r\n        if (user == '')\r\n            Helper.getInstance().showTips(\"用户名不能为空\");\r\n        else if (password == '')\r\n            Helper.getInstance().showTips(\"密码不能为空\");\r\n        else\r\n            lottery_MsgStation.getInstance().onSendEnterLogin(user, password);\r\n    }\r\n\r\n    /**\r\n     * 通过虚拟键盘输入文本框\r\n     * @param {*} event \r\n     */\r\n    setContent(event) {\r\n        if (this.btnGruop.index == null) return;\r\n        let btn = this.btnGruop.arr[this.btnGruop.index];\r\n        let value = event.getUserData();\r\n        if (value != -1) {\r\n            btn.editbox.string += value;\r\n            btn.delBtnNode.active = true;\r\n        }\r\n        else {\r\n            let str = btn.editbox.string;\r\n            str = str.substr(0, str.length - 1);\r\n            btn.editbox.string = str;\r\n            btn.delBtnNode.active = str.length ? true : false\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * 需要绑定输入框\r\n */\r\nclass loginCotentBtn extends groupBtn {\r\n    delBtnNode;\r\n    editbox;\r\n    constructor(node, downCallback, group) {\r\n        super(node, downCallback, group);\r\n        this.node.off(cc.Node.EventType.TOUCH_END, this.touchEnd, this);//嗯 这里的写法有点奇怪\r\n        this.editbox = cc.find('editbox', this.node).getComponent(cc.EditBox);\r\n        this.delBtnNode = cc.find('deleteBtn', this.node);\r\n        this.delBtnNode.on(cc.Node.EventType.TOUCH_END, this.delBtnDown, this);\r\n        this.editbox.node.on('text-changed', this.editBoxChange, this);\r\n        this.editbox.node.on('editing-did-began', this.editBoxBegin, this);\r\n    }\r\n    editBoxChange() {\r\n        this.delBtnNode.active = this.editbox.string == \"\" ? false : true;\r\n    }\r\n    editBoxBegin() {\r\n        if (!this.isSelect) this.touchEnd();\r\n        this.delBtnNode.active = this.editbox.string == \"\" ? false : true;\r\n    }\r\n    delBtnDown() {\r\n        this.editbox.string = '';\r\n        this.delBtnNode.active = false;\r\n        this.touchEnd();\r\n    }\r\n}","import SingletonBase from \"../Singleton/SingletonBase\";\r\nimport NetManager from \"../Manager/lottery_NetManager\";\r\nimport SocketManager from \"../Manager/lottery_SocketManager\";\r\nimport lottery_lotteryData from \"./lottery_lotteryData\";\r\nimport MsgDefine from \"../Manager/lottery_SockMsgDefine\";\r\nimport GlobalMsg from \"../Core/Event/lottery_GlobalMsg\";\r\nimport { lottery_EventDefine } from \"./lottery_EventDefine\";\r\nimport Helper from \"../UI/tools/lottery_helper\";\r\nimport lottery_VideoSysCtr from \"../UI/view_videoSys/lottery_VideoSysCtr\";\r\nimport lottery_loginViewCtr from \"../UI/view_login/lottery_loginViewCtr\";\r\nimport lottery_VideoPlayCtr from \"../UI/view_videoPlay/lottery_VideoPlayCtr\";\r\n/**\r\n * 消息中转\r\n */\r\nexport default class lottery_MsgStation extends SingletonBase {\r\n    httpServer = \"\";\r\n    socketIP = \"\";\r\n    socketPort = \"\";\r\n    loging = false; //登陆中\r\n\r\n    static _onNewObject() {\r\n        let one = new lottery_MsgStation();\r\n        one.noticeInit();\r\n        one.sysEventInit();\r\n        return one;\r\n    }\r\n    /**\r\n     * ws消息初始化\r\n     */\r\n    noticeInit() {\r\n        let socket = SocketManager.getInstance();\r\n        socket.On(MsgDefine.DOWN.SC_OK, this.socketConnect, this);\r\n        socket.On(MsgDefine.DOWN.SC_VideoMsg, this.videoMsg, this)\r\n    }\r\n    /**\r\n     * 系统消息初始化\r\n     */\r\n    sysEventInit() {\r\n        GlobalMsg.getInstance().Register(lottery_EventDefine.sys.loadingOvertime, this.loadingOvertime);\r\n    }\r\n\r\n    /*----------------------------------------------本地事件------------------------------------------------*/\r\n    /**\r\n    * 登录\r\n    */\r\n    onSendEnterLogin(account, password) {\r\n        Helper.getInstance().showLoading();\r\n        NetManager.getInstance().HttpPost(this.httpServer + 'dealer/login/video/check', { \"userName\": account, \"password\": password }, (error, msg) => {\r\n            Helper.getInstance().showLoading(false);\r\n            if (error) {\r\n                Helper.getInstance().showTips('网络错误');\r\n                return;\r\n            }\r\n            switch (msg.code) {\r\n                case 1:\r\n                    lottery_lotteryData.getInstance().updataData(msg.data);\r\n                    lottery_loginViewCtr.getInstance().OnMessageHandle({ type: 1, data: lottery_lotteryData.getInstance().roleList });\r\n                    break;\r\n                case 0:\r\n                    Helper.getInstance().showTips('检查下服务器');\r\n                    break;\r\n                default:\r\n                    Helper.getInstance().showTips('密码或者账号错误');\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     *根据彩种登陆\r\n     */\r\n    onSendLotteryChoice(lotteryCode) {\r\n        lottery_lotteryData.getInstance().lotteryCode = lotteryCode;\r\n        lottery_loginViewCtr.getInstance().Close();\r\n        lottery_VideoPlayCtr.getInstance().Open();\r\n    }\r\n\r\n    /**\r\n     * 链接荷官端\r\n     */\r\n    onSendLinkHeGuan() {\r\n        Helper.getInstance().showLoading();\r\n        SocketManager.getInstance().Connect(this.socketIP, this.socketPort, lottery_lotteryData.getInstance().userId);//与服务器建立长连接\r\n        lottery_VideoSysCtr.getInstance().OnMessageHandle({ type: 1 });\r\n    }\r\n\r\n    /**\r\n     * 荷官端链接成功准备播放视频\r\n     */\r\n    onSendLinkHeGuanSuccess() {\r\n        Helper.getInstance().showLoading(false);\r\n        lottery_VideoSysCtr.getInstance().OnMessageHandle({ type: 2 });\r\n    }\r\n    /**\r\n     * 切换到全屏播放\r\n     */\r\n    onFullPlay() {\r\n        lottery_VideoPlayCtr.getInstance().Close();\r\n        lottery_VideoSysCtr.getInstance().Open();\r\n        //切换到全屏\r\n        screenfull.request(document.getElementById('Cocos2dGameContainer'));\r\n    }\r\n    /**\r\n     * 回到系统\r\n     */\r\n    onBackToSys() {\r\n        Helper.getInstance().showLoading(false);\r\n        lottery_VideoPlayCtr.getInstance().Open();\r\n        lottery_VideoSysCtr.getInstance().Close();\r\n    }\r\n    /**\r\n    * 退出\r\n    */\r\n    onSendLogoutContent() {\r\n        SocketManager.getInstance().close();\r\n        lottery_VideoPlayCtr.getInstance().Close();\r\n        lottery_loginViewCtr.getInstance().Open();\r\n\r\n    }\r\n    /*------------------------------------------socket回调--------------------------------------*/\r\n    //建立长连接成功\r\n    socketConnect(data) {\r\n        Helper.getInstance().showLoading(false);\r\n        let one = {\r\n            'codeBack': 2020,\r\n            'data': {\r\n                'lotteryCode': lottery_lotteryData.getInstance().lotteryCode\r\n            }\r\n        };\r\n        SocketManager.getInstance().Send(JSON.stringify(one));\r\n    }\r\n\r\n    //链接何荷官端后得回调\r\n    videoMsg(data) {\r\n        if (data == 1)\r\n            lottery_VideoSysCtr.getInstance().OnMessageHandle({ type: 2 })\r\n        else if (data == 0)\r\n            lottery_VideoSysCtr.getInstance().OnMessageHandle({ type: 3 });\r\n    }\r\n    /*-----------------------------------------系统事件回调-----------------------------------------*/\r\n    loadingOvertime() {\r\n        console.log(\"加载超时\");\r\n    }\r\n\r\n}","import SingletonBase from 'SingletonBase'\r\nimport lottery_RunInBackground from 'lottery_RunInBackground'\r\n\r\nimport lottery_BaseUrlLoad from 'lottery_BaseUrlLoad'\r\nimport lottery_HttpUtils from 'lottery_HttpUtils'\r\nimport lottery_TimeMgr from 'lottery_TimeMgr'\r\n/*\r\n网络管理脚本\r\n*/\r\nlet httpServer = \"\";\r\nlet urlServer = \"\";\r\nlet token;\r\nexport default class NetManager extends SingletonBase {\r\n    curServerTimeStamp = 0//服务器当前时间戳，本地做自增处理，不定时和服务器对比一次\r\n    changeServerTimerID = 0\r\n    serverTimeChangeEvent = {}//服务器时间更新事件组\r\n    /*\r\n    http请求存储数组\r\n    [0]={url:\"http://192.168.0.0/xxxx/xx/xx....\",params}\r\n    */\r\n    httpPostList = []\r\n    openHttpPost = false\r\n    showTipsFunc = null\r\n    hideTipsFunc = null\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    static _onNewObject() {\r\n        return new NetManager()\r\n    }\r\n    /**\r\n     * 切换后台回调函数\r\n     * @param {*} focus true 从后台切回来  false 切到后台\r\n     */\r\n    RunInBackground(focus) {\r\n        if (focus) {//重新回到界面\r\n            // this.HttpPost(\"lobby/validate/getTime\", {}, function () { });   \r\n        }\r\n    }\r\n    HttpPostFunc() {\r\n        var self = this;\r\n        var item = this.httpPostList[0];\r\n        var endfunc = function () {\r\n            self.httpPostList.splice(0, 1);\r\n            self.hideTipsFunc && self.hideTipsFunc()\r\n            if (self.httpPostList.length <= 0) {\r\n                self.openHttpPost = false;\r\n            }\r\n            else {\r\n                self.HttpPostFunc();\r\n            }\r\n        }\r\n        lottery_HttpUtils.getInstance().httpPost(httpServer + item.url, item.params, (function (data) {\r\n            var err = null;\r\n            if (data.state == 1)\r\n                err = data.errorMessage;\r\n            if (data.thisTime)\r\n                self.FreshServerTimeStamp(data.thisTime);\r\n            token = data.token || data.logintoken || token;\r\n            item.callback(err, data);\r\n            endfunc.call(this);\r\n        }).bind(this), (function (fail, url) {\r\n            item.showErrorTips && this.ShowErrorTips()\r\n            item.callback(\"error\", null);\r\n            endfunc.call(this);\r\n        }).bind(this));\r\n    }\r\n    ShowErrorTips() {\r\n        /*\r\n        TODO:弹出网络连接错误的提示框，\r\n        */\r\n    }\r\n    AddServerTime() {\r\n        this.curServerTimeStamp += 1;\r\n        for (const key in this.serverTimeChangeEvent) {\r\n            const element = this.serverTimeChangeEvent[key];\r\n            element(this.curServerTimeStamp);\r\n        }\r\n    }\r\n    /*\r\n    刷新服务器时间戳 毫秒\r\n    */\r\n    FreshServerTimeStamp(thistime) {\r\n        this.curServerTimeStamp = Math.floor(thistime / 1000);\r\n        var delay = thistime % 1000;\r\n        delay = 1 - delay / 1000.0;\r\n        if (this.changeServerTimerID !== 0) {\r\n            lottery_TimeMgr.getInstance().closeTimer(this.changeServerTimerID);\r\n            this.changeServerTimerID = 0;\r\n        }\r\n        this.changeServerTimerID = lottery_TimeMgr.getInstance().openTimer(this.AddServerTime, 1, 0, delay, this);\r\n    }\r\n    /*-----------------------------对外接口---------------------------------------*/\r\n    /**初始化链接数据 */\r\n    InitUrl(http, url) {\r\n        // httpServer = http;\r\n        // urlServer = url;\r\n        lottery_RunInBackground.getInstance().RegestRunInBackground(\"NetManager\", this.RunInBackground, this); //注册网页回调函数\r\n    }\r\n    /*\r\n    和http服务器进行通信\r\n    url 地址,不包含 ip和端口 eg.   http://192.168.0.185:7090/user/login    url = user/login\r\n    params 参数 {键值对}\r\n    callback 回调函数 参数 (err,obj)\r\n    */\r\n    HttpPost(url, params, callback, showErrorTips = false) {\r\n\r\n        if (!params.token || params.token == \"\") {\r\n            // params.token = token;\r\n        } else {\r\n            token = params.token;\r\n        }\r\n\r\n        var item = {\r\n            \"url\": url,\r\n            \"params\": params,\r\n            \"callback\": callback,\r\n            \"showErrorTips\": showErrorTips\r\n        };\r\n        this.httpPostList.push(item);\r\n        this.showTipsFunc && this.showTipsFunc()\r\n        if (!this.openHttpPost) {\r\n            this.openHttpPost = true;\r\n            this.HttpPostFunc();\r\n        }\r\n    }\r\n    AjaxGet(url, succ, fail, type, data) {\r\n        lottery_HttpUtils.getInstance().ajaxGet(url, succ, fail, type, data)\r\n    }\r\n    /**\r\n     * 绑定服务器时间刷新事件\r\n     * @param {*} tag 绑定事件的唯一标识\r\n     * @param {*} callback 回调方法\r\n     * @param {*} self 回调方法作用域\r\n     */\r\n    RegestServerTimeChangeEvent(tag, callback, self) {\r\n        callback = self ? callback.bind(self) : callback;\r\n        this.serverTimeChangeEvent[tag] = callback;\r\n        callback(this.curServerTimeStamp);\r\n    }\r\n    /**\r\n     * 解除绑定\r\n     * @param {*} tag 绑定事件的唯一标识\r\n     */\r\n    UnRegestServerTimeChangeEvent(tag) {\r\n        if (this.serverTimeChangeEvent[tag]) delete this.serverTimeChangeEvent[tag];\r\n    }\r\n    /**\r\n     * 从服务器下载资源\r\n     * @param {*} key 下载资源的唯一key\r\n     * @param {*} url 资源路径\r\n     * @param {*} suffix 资源后缀(类型 eg.    png   txt   jpg etc.)\r\n     * @param {*} callback 回调方法\r\n     */\r\n    LoadUrl(key, url, suffix, callback) {\r\n        lottery_BaseUrlLoad.getInstance().LoadUrl(key, urlServer + url, suffix, callback);\r\n    }\r\n    SetShowWaitPanelFunc(func) { this.showTipsFunc = func }\r\n    SetHideWaitPanelFunc(func) { this.hideTipsFunc = func }\r\n}","import SingletonBase from \"SingletonBase\";\r\n\r\n/*\r\n后台切入切出相关  切到后台 回调参数 false 切入 true\r\n*/\r\nlet runCallback = {}\r\n\r\nclass RunInBackground extends SingletonBase {\r\n    \r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    static _onNewObject() {\r\n        let _instance = new RunInBackground();\r\n        cc.game.on(cc.game.EVENT_HIDE, _instance._goToBackground, _instance);\r\n        cc.game.on(cc.game.EVENT_SHOW, _instance._goToFront, _instance);\r\n        return _instance\r\n    }\r\n    _onDestroyObject() {\r\n        cc.game.off(cc.game.EVENT_HIDE, this._goToBackground, this)\r\n        cc.game.off(cc.game.EVENT_SHOW, this._goToFront, this)\r\n    }\r\n    _goToBackground() {\r\n        this.CallRunCallback(false);\r\n    }\r\n    _goToFront() {\r\n        this.CallRunCallback(true);\r\n    }\r\n    CallRunCallback(focus) {\r\n        for (const key in runCallback) {\r\n            const element = runCallback[key];\r\n            element(focus)\r\n        }\r\n    }\r\n    /*--------------------------------对外接口-----------------------*/\r\n    RegestRunInBackground(tag, callback, self) {\r\n        runCallback[tag] = self ? callback.bind(self) : callback\r\n    }\r\n    UnregestRunInBackground(tag) {\r\n        if (runCallback[tag])\r\n            delete runCallback[tag]\r\n    }\r\n}\r\n\r\nmodule.exports = RunInBackground","let overflowcount = 3;//定义超过显示范围的item数量\r\nlet deltaPos = 0;//滑动的差值 记录滑动时content的位置与初始的位置差\r\nlet checkTimes = 0;//检测次数 当滑动过快 item过小的时候 会导致一帧刷新几个item 所以声明此变量\r\n/**对scrollview扩展，循环使用item,适用于数量多，且item的大小不会改变的情况*/\r\ncc.Class({\r\n    extends: cc.ScrollView,\r\n    editor: CC_EDITOR && {\r\n        menu: 'i18n:UIUtil/ScrollViewLoop'\r\n    },\r\n    properties: {\r\n        itemNode: {\r\n            default: null,\r\n            type: cc.Node,\r\n            tooltip: \"动态创建的单个node节点对象\"\r\n        },\r\n        itemprefab: {//动态创建的预制\r\n            default: null,\r\n            type: cc.Prefab,\r\n            tooltip: \"动态创建的单个预制对象\"\r\n        },\r\n        viewMask: {//mask对象\r\n            type: cc.Node,\r\n            default: null,\r\n            tooltip: \"遮挡层的node对象，用于计算显示范围\"\r\n        },\r\n        spacing: {//间隔值\r\n            default: 3,\r\n            tooltip: \"间隔值\"\r\n        },\r\n        /*---------------本地做记录使用数据 不对外使用-----------------*/\r\n        mDirect: {\r\n            default: \"x\",\r\n            visible: false\r\n        },//\"x\" / \"y\"\r\n        mValue: {\r\n            default: \"width\",\r\n            visible: false\r\n        },//\"width\" / \"height\"\r\n        mAnchor: {\r\n            default: \"anchorX\",\r\n            visible: false\r\n        },//\"anchorX\" / \"anchorY\"\r\n        dataCount: {\r\n            default: 0,\r\n            visible: false\r\n        },\r\n        maxItemCount: {//记录最大item数量\r\n            default: overflowcount,\r\n            visible: false\r\n        },\r\n        curItemCount: {//记录当前的item数量\r\n            default: 0,\r\n            visible: false\r\n        },\r\n        curShowItemIndex: {//记录当前显示的data序号\r\n            default: [],\r\n            visible: false\r\n        },\r\n        showTopPos: {//记录显示的最小值\r\n            default: 0,\r\n            visible: false\r\n        },\r\n        showDownPos: {//记录显示的最大值\r\n            default: 0,\r\n            visible: false\r\n        },\r\n        hideTopPos: {//记录隐藏的最小值\r\n            default: 0,\r\n            visible: false\r\n        },\r\n        hideDownPos: {//记录隐藏的最大值\r\n            default: 0,\r\n            visible: false\r\n        },\r\n        itemActiveList: {//存储使用中的item\r\n            default: [],\r\n            visible: false\r\n        },\r\n        itemDeactivePool: {//存储回收的item\r\n            default: null,\r\n            type: cc.NodePool,\r\n            visible: false\r\n        },\r\n        lastContentPos: {//记录上一帧的content的位置 x/y\r\n            default: 0,\r\n            visible: false\r\n        },\r\n        checkdelta: {//检测差值\r\n            default: 0,\r\n            visible: false\r\n        },\r\n        itemway: {\r\n            default: -1,\r\n            visible: false\r\n        },\r\n        itemSynPos: {\r\n            default: new cc.Vec2(0, 0),\r\n            visible: false\r\n        },\r\n        cloneItem: {\r\n            default: null,\r\n            visible: false\r\n        }\r\n    },\r\n\r\n    onLoad() {\r\n        this.cloneItem = this.itemNode || this.itemprefab;\r\n        this.itemDeactivePool = [];\r\n        for (let index = 0; index < overflowcount; index++) {\r\n            let item = cc.instantiate(this.cloneItem);\r\n            item.active = false;\r\n            this.content.addChild(item)\r\n            this.itemDeactivePool.push(item);\r\n        }\r\n        this.curShowItemIndex = [0, 0];\r\n        //设置滑动方向,目前只支持一个方向的滑动\r\n        this.vertical = !this.horizontal;\r\n        this.mDirect = this.horizontal ? \"x\" : \"y\";\r\n        this.mValue = this.horizontal ? \"width\" : \"height\";\r\n        this.mAnchor = this.horizontal ? \"anchorX\" : \"anchorY\";\r\n        this.itemway = this.horizontal ? 1 : -1;\r\n        this.lastContentPos = this.content[this.mDirect];\r\n        this.CalculateRangePos();\r\n    },\r\n\r\n    update(dt) {\r\n        this._super(dt);\r\n        if (this.isScrolling() || this.isAutoScrolling())\r\n            this.UpdateItemPos();\r\n    },\r\n    /**计算滑动显示的范围*/\r\n    CalculateRangePos() {\r\n        this.checkdelta = 0.25 * this.spacing;\r\n        //计算最大item数量\r\n        this.maxItemCount = Math.floor(this.viewMask[this.mValue] / this.spacing) + overflowcount;\r\n        //设定位置相关数据\r\n        this.showTopPos = this.lastContentPos - this.itemway * this.spacing;\r\n        this.showDownPos = this.lastContentPos + this.itemway * (this.viewMask[this.mValue] + 0.5 * this.spacing);\r\n        this.hideTopPos = this.lastContentPos - this.itemway * 1.5 * this.spacing;\r\n        this.hideDownPos = this.lastContentPos + this.itemway * (this.viewMask[this.mValue] + 1.5 * this.spacing);\r\n    },\r\n    /**获取一个item */\r\n    GetItem() {\r\n        var item = this.itemDeactivePool.pop();\r\n        if (!item) {\r\n            item = cc.instantiate(this.cloneItem);\r\n            this.content.addChild(item);\r\n        }\r\n        item.active = true;\r\n        return item;\r\n    },\r\n    /**数组末尾增加一个item*/\r\n    PopItem() {\r\n        if (this.curItemCount >= this.maxItemCount)\r\n            return;\r\n        var item = this.GetItem();\r\n        this.itemActiveList.push(item);\r\n        this.itemSynPos[this.mDirect] = this.itemway * this.curShowItemIndex[1] * this.spacing;\r\n        item.setPosition(this.itemSynPos);\r\n        if (this.freshItemCallback)\r\n            this.freshItemCallback(this.curShowItemIndex[1], item);\r\n        this.curShowItemIndex[1]++;\r\n        this.curItemCount++;\r\n    },\r\n    /**回收末尾item*/\r\n    PushItem() {\r\n        var item = this.itemActiveList.pop();\r\n        this.itemDeactivePool.push(item);\r\n        this.curShowItemIndex[1]--;\r\n        this.curItemCount--;\r\n    },\r\n    /**在数组的头部增加一个item*/\r\n    UnshiftItem() {\r\n        var item = this.GetItem();\r\n        this.itemActiveList.unshift(item);\r\n        this.curShowItemIndex[0]--;\r\n        this.itemSynPos[this.mDirect] = this.itemway * this.curShowItemIndex[0] * this.spacing;\r\n        item.setPosition(this.itemSynPos);\r\n        if (this.freshItemCallback)\r\n            this.freshItemCallback(this.curShowItemIndex[0], item);\r\n        this.curItemCount++;\r\n    },\r\n    /**回收顶部的item*/\r\n    ShiftItem() {\r\n        var item = this.itemActiveList.shift();\r\n        item.active = false;\r\n        this.itemDeactivePool.push(item);\r\n        this.curShowItemIndex[0]++;\r\n        this.curItemCount--;\r\n    },\r\n    /**检测顶部回收*/\r\n    CheckTopPop() {\r\n        if (this.horizontal) {\r\n            if (this.content[this.mDirect] + this.itemActiveList[0][this.mDirect] < this.hideTopPos)\r\n                this.ShiftItem();\r\n        }\r\n        else if (this.content[this.mDirect] + this.itemActiveList[0][this.mDirect] > this.hideTopPos) {\r\n            this.ShiftItem();\r\n        }\r\n    },\r\n    /**检测顶部创建*/\r\n    CheckTopPush() {\r\n        if (this.curShowItemIndex[0] == 0)\r\n            return;\r\n        if (this.horizontal) {\r\n            if (this.content[this.mDirect] + this.itemActiveList[0][this.mDirect] > this.showTopPos)\r\n                this.UnshiftItem();\r\n        }\r\n        else if (this.content[this.mDirect] + this.itemActiveList[0][this.mDirect] < this.showTopPos) {\r\n            this.UnshiftItem();\r\n        }\r\n    },\r\n    /**检测底部回收*/\r\n    CheckDownPop() {\r\n        if (this.horizontal) {\r\n            if (this.content[this.mDirect] + this.itemActiveList[this.curItemCount - 1][this.mDirect] > this.hideDownPos)\r\n                this.PushItem();\r\n        }\r\n        else if (this.content[this.mDirect] + this.itemActiveList[this.curItemCount - 1][this.mDirect] < this.hideDownPos) {\r\n            this.PushItem();\r\n        }\r\n    },\r\n    /**检测底部创建*/\r\n    CheckDownPush() {\r\n        if (this.curShowItemIndex[1] == this.dataCount) {\r\n            return;\r\n        }\r\n        if (this.horizontal) {\r\n            if (this.content[this.mDirect] + this.itemActiveList[this.curItemCount - 1][this.mDirect] < this.showDownPos) {\r\n                this.PopItem();\r\n            }\r\n        }\r\n        else if (this.content[this.mDirect] + this.itemActiveList[this.curItemCount - 1][this.mDirect] > this.showDownPos) {\r\n            this.PopItem();\r\n        }\r\n    },\r\n    /**刷新item位置*/\r\n    UpdateItemPos() {\r\n        deltaPos = this.content[this.mDirect] - this.lastContentPos;\r\n        if (Math.abs(deltaPos) < this.checkdelta)\r\n            return;\r\n        checkTimes = Math.ceil(Math.abs(deltaPos) / this.spacing)\r\n        while (checkTimes > 0) {\r\n            checkTimes--;\r\n            if (this.horizontal) {\r\n                if (deltaPos < 0 && this.curShowItemIndex[1] < this.dataCount) {//向上滑动\r\n                    this.CheckTopPop();//检测顶部回收\r\n                    this.CheckDownPush();//检测底部创建\r\n                }\r\n                else if (deltaPos > 0 && this.curShowItemIndex[0] > 0) {//向下滑动\r\n                    this.CheckDownPop();//检测底部回收\r\n                    this.CheckTopPush();//检测顶部创建\r\n                }\r\n            }\r\n            else {\r\n                if (deltaPos > 0 && this.curShowItemIndex[1] < this.dataCount) {//向上滑动\r\n                    this.CheckTopPop();//检测顶部回收\r\n                    this.CheckDownPush();//检测底部创建\r\n                }\r\n                else if (deltaPos < 0 && this.curShowItemIndex[0] > 0) {//向下滑动\r\n                    this.CheckDownPop();//检测底部回收\r\n                    this.CheckTopPush();//检测顶部创建\r\n                }\r\n            }\r\n        }\r\n        this.lastContentPos = this.content[this.mDirect];\r\n    },\r\n\r\n    /*-----------------------------对外接口-------------------------------------*/\r\n    /**初始化item数量 注册回调函数 */\r\n    InitItemData(count, callback, self) {\r\n        if (self)\r\n            this.freshItemCallback = callback.bind(self);\r\n        else\r\n            this.freshItemCallback = callback;\r\n        this.dataCount = count;\r\n        this.content[this.mValue] = this.dataCount * this.spacing;\r\n        if (count > this.maxItemCount)\r\n            count = this.maxItemCount;\r\n        for (let index = 0; index < count; index++) {\r\n            this.PopItem();\r\n        }\r\n    },\r\n    /**增加一个item*/\r\n    AddItemData() {\r\n        if (this.curShowItemIndex[1] == this.dataCount) {\r\n            this.PopItem();\r\n        }\r\n        this.dataCount++;\r\n        this.content[this.mValue] = this.dataCount * this.spacing;\r\n    },\r\n    /**增加多个item */\r\n    AddItemDataNum(num) {\r\n        for (let i = 0; i < num; i++) {\r\n            this.AddItemData();\r\n        }\r\n    },\r\n    /**删除一个item    index:数据的序列号 */\r\n    DeleteItem(index) {\r\n        this.stopAutoScroll();\r\n        if (index < this.curShowItemIndex[0]) {//显示范围上方\r\n            this.content[this.mDirect] -= this.spacing;\r\n        }\r\n        index = index - this.curShowItemIndex[0];\r\n        for (let i = index < 0 ? 0 : index; i < this.itemActiveList.length; i++) {\r\n            const element = this.itemActiveList[i];\r\n            this.freshItemCallback(this.curShowItemIndex[0] + i, element)\r\n        }\r\n        this.dataCount--;\r\n        this.content[this.mValue] = this.dataCount * this.spacing;\r\n        if (this.content[this.mValue] < this.content[this.mDirect] + this.viewMask[this.mValue]) {\r\n            this.scrollToBottom();\r\n        }\r\n    },\r\n    /**刷新一个item*/\r\n    UpdateItem(index) {\r\n        if (this.curShowItemIndex[0] <= index <= this.curShowItemIndex[1]) {\r\n            if (this.freshItemCallback) {\r\n                let _index = index - this.curShowItemIndex[0];\r\n                this.freshItemCallback(index, this.itemActiveList[_index]);\r\n            }\r\n        }\r\n    },\r\n    /**反注册更新item事件*/\r\n    UnRegestUpdateItem() {\r\n        this.freshItemCallback = null;\r\n    },\r\n    /**清楚所有数据*/\r\n    ClearData(callback) {\r\n        this.stopAutoScroll();\r\n        if (this.horizontal)\r\n            this.itemSynPos[this.mDirect] = -this.viewMask[this.mValue] * this.viewMask[this.mAnchor]\r\n        else\r\n            this.itemSynPos[this.mDirect] = this.viewMask[this.mValue] * (1 - this.viewMask[this.mAnchor])\r\n\r\n        this.content.setPosition(this.itemSynPos);\r\n        for (let index = 0; index < this.itemActiveList.length; index++) {\r\n            const element = this.itemActiveList[index];\r\n            element.active = false;\r\n            this.itemDeactivePool.push(element);\r\n        }\r\n        this.itemActiveList.splice(0, this.curItemCount);\r\n        this.curItemCount = 0;\r\n        this.content.height = 0;\r\n        this.curShowItemIndex = [0, 0];\r\n        this.lastContentPos = this.itemSynPos[this.mDirect];\r\n        if (callback) callback();\r\n    },\r\n    /**\r\n     * 当间隔值动态发生改变后 调用接口\r\n     * @param {*} space 间隔值\r\n     */\r\n    SpacingChanged(space) {\r\n        if (this.itemActiveList.length <= 0) return;\r\n        this.ClearData(() => {\r\n            this.CalculateRangePos();\r\n            this.InitItemData(this.dataCount, this.freshItemCallback);\r\n        })\r\n    },\r\n    \r\n    //设置新的item对象\r\n    setItemNode(item){\r\n        this.content.removeAllChildren();\r\n        this.itemNode = item;\r\n        this.cloneItem = this.itemNode || this.itemprefab;\r\n        this.itemDeactivePool = [];\r\n        for (let index = 0; index < overflowcount; index++) {\r\n            let item = cc.instantiate(this.cloneItem);\r\n            item.active = false;\r\n            this.content.addChild(item)\r\n            this.itemDeactivePool.push(item);\r\n        }\r\n        this.curShowItemIndex = [0, 0];\r\n        //设置滑动方向,目前只支持一个方向的滑动\r\n        this.vertical = !this.horizontal;\r\n        this.mDirect = this.horizontal ? \"x\" : \"y\";\r\n        this.mValue = this.horizontal ? \"width\" : \"height\";\r\n        this.mAnchor = this.horizontal ? \"anchorX\" : \"anchorY\";\r\n        this.itemway = this.horizontal ? 1 : -1;\r\n        this.lastContentPos = this.content[this.mDirect];\r\n        this.CalculateRangePos();\r\n    },\r\n})","\r\nvar MsgDefine = {\r\n    DOWN: {  //  下行\r\n        SC_OK: '1',//建立长链接成功\r\n        SC_VideoMsg: \"2020\",//建立长连接成功之后消息传递\r\n        SC_KaiPan: \"2010\",  //开封盘\r\n        SC_OpenLotteryByHand: \"2012\",  //手动开奖\r\n        SC_UpData: \"2011\",  //更新界面彩票数据\r\n        SC_LoginManeger: \"2008\",  //登录管理员\r\n        SC_ISSUE_DATA_BACK: \"0106\", //服务器推送：彩期数据更新推送消息\r\n        SC_ForceDealerDownProcess: \"0105\", //服务器推送：强制下线\r\n        SC_LotteryLssueCanOpenProcess: \"2013\",//请求手动开奖得数据\r\n        SC_GetChatMsg: \"2014\",//请求手动开奖得数据返回\r\n    },\r\n\r\n    UP: {  // 上行\r\n        Heart: \"9999\",//心跳包\r\n        CS_KaiPan: \"2010\",//开封盘\r\n        CS_OpenLotteryByHand: \"2012\",   //手动开奖\r\n        CS_UpData: \"2011\",  //更新界面彩票数据\r\n        CS_LoginManeger: \"2008\",    //登录管理员\r\n        CS_LotteryLssueCanOpenProcess: \"2013\",//请求手动开奖得数据\r\n        CS_IMFindAllRoomProcess: \"2014\",//请求手动开奖得数据\r\n    },\r\n\r\n    MsgEventKey: \"ServerToClientSocketEventKey\",\r\n    LongConnect: {  //  长连接\r\n        Connect: 1000, //连接\r\n        Disconnect: 1001,  //断开\r\n    }\r\n}\r\nmodule.exports = MsgDefine","/**\r\n * socket链接的状态枚举\r\n */\r\nvar SocketEnum = cc.Enum({\r\n    none: 0,//占位\r\n    success: 1,//连接成功\r\n    error: 2,//连接错误\r\n    close: 3//连接关闭\r\n})\r\n\r\nmodule.exports = SocketEnum","import SingletonBase from \"SingletonBase\";\r\nimport lottery_BaseSocket from 'lottery_BaseSocket'\r\nimport lottery_TimeMgr from 'lottery_TimeMgr'\r\n\r\nlet SocketEnum = require(\"lottery_SocketEnum\");\r\nlet ReConnectTimer = 5;//重连间隔时间 单位 秒\r\nimport SockMsgDefine from \"lottery_SockMsgDefine\";\r\n\r\nlet socktIP = \"192.168.0.158\";\r\nlet socketPort = \"7050\";\r\nlet socketParam = \"\";\r\nexport default class SocketManager extends SingletonBase {\r\n    BaseSocketIns\r\n    heartTime = 25//心跳包间隔时间 单位 秒\r\n    heartTimerID = 0//心跳包计时器ID \r\n    reConnectTimerID = 0\r\n    isreconnect = false\r\n    curSocketState = SocketEnum.none//当前socket状态\r\n    socketEventDic = {}\r\n    loadingShowFunc = null\r\n    loadingHideFunc = null\r\n    reConnectSocketNum = 0  //断线重连次数\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    static _onNewObject() {\r\n        let _instance = new SocketManager();\r\n        _instance.BaseSocketIns = new lottery_BaseSocket();\r\n        _instance.BaseSocketIns.RegestMessageEvent(_instance.OnMessage.bind(_instance));\r\n        _instance.BaseSocketIns.RegisterConnectEvent(_instance.OnConnect.bind(_instance))\r\n        return _instance\r\n    }\r\n    _onDestroyObject() {\r\n        if (this.curSocketState === SocketEnum.success)\r\n            this.BaseSocketIns.close()\r\n    }\r\n\r\n    /**获取消息*/\r\n    OnMessage(msg) {\r\n        let data = null;\r\n        if (msg.data) {\r\n            data = JSON.parse(msg.data);\r\n        }\r\n\r\n        let msgId = data.codeBack;\r\n        if (msgId != SockMsgDefine.UP.Heart) {//心跳包消息处理\r\n\r\n        }\r\n        if (data.code == 1) {//正确返回处理\r\n            this.socketEventDic[msgId] && this.socketEventDic[msgId](data.data)\r\n        }\r\n        else if (data.code == 2) {//错误信息返回\r\n\r\n        }\r\n\r\n\r\n    }\r\n    /**\r\n     * 连接状态改变函数\r\n     * @param {*} state \r\n     */\r\n    OnConnect(state) {\r\n        switch (state) {\r\n            case SocketEnum.success:    //连接成功\r\n                this.loadingHideFunc && this.loadingHideFunc()\r\n                this.reConnectSocketNum = 0;    //重连次数\r\n                this.isreconnect = false;\r\n                if (this.reConnectTimerID !== 0) {\r\n                    lottery_TimeMgr.getInstance().closeTimer(this.reConnectTimerID);\r\n                    this.reConnectTimerID = 0;\r\n                }\r\n                //this.HeartOpen();//开启心跳包\r\n                break;\r\n            case SocketEnum.error:\r\n            case SocketEnum.close:\r\n                //this.HeartClose();//关闭心跳包\r\n                this.socketEventDic[SockMsgDefine.LongConnect.Disconnect] && this.socketEventDic[SockMsgDefine.LongConnect.Disconnect]();\r\n                this.ReConnect();//重连socket\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        this.curSocketState = state;\r\n    }\r\n    /**打开心跳包*/\r\n    HeartOpen() {\r\n        this.HeartClose();\r\n        this.heartTimerID = lottery_TimeMgr.getInstance().openTimer(() => {\r\n            let msg = {};\r\n            msg.codeBack = SockMsgDefine.UP.Heart;\r\n            msg.data = {};\r\n            this.Send(JSON.stringify(msg), false);\r\n        }, this.heartTime, -1, this.heartTime)\r\n    }\r\n    /**关闭心跳包*/\r\n    HeartClose() {\r\n        if (this.heartTimerID !== 0) {\r\n            lottery_TimeMgr.getInstance().closeTimer(this.heartTimerID);\r\n        }\r\n    }\r\n    /**重连socket */\r\n    ReConnect() {\r\n        this.loadingShowFunc && this.loadingShowFunc()\r\n        if (this.curSocketState == SocketEnum.success)\r\n            this.BaseSocketIns.close();\r\n        var func = function () {\r\n            this.reConnectSocketNum = this.reConnectSocketNum + 1;\r\n            this.reConnectTimerID = 0;\r\n            if (this.reConnectSocketNum >= 3) {\r\n                this.reConnectSocketNum = 0;\r\n                lottery_TimeMgr.getInstance().closeTimer(this.reConnectTimerID);\r\n                this.close();\r\n                return\r\n            }\r\n            this.Connect(socktIP, socketPort, socketParam);\r\n        }\r\n        if (this.reConnectTimerID === 0)\r\n            this.reConnectTimerID = lottery_TimeMgr.getInstance().openTimer(func.bind(this), 0, 1, ReConnectTimer);\r\n    }\r\n    /*--------------------------------------对外接口--------------------------------------*/\r\n    /**连接*/\r\n    Connect(ip, port, param) {\r\n        socktIP = ip || socktIP;\r\n        socketPort = port || socketPort;\r\n        socketParam = param || socketParam;\r\n        if (param && param != \"\") {\r\n            this.BaseSocketIns.init(socktIP, socketPort, socketParam)\r\n        }\r\n        else {\r\n            //TODO: 没有设定连接参数的提示代码\r\n        }\r\n    }\r\n    /**发送数据  发送成功返回true，失败返回false*/\r\n    Send(data) {\r\n        if (this.curSocketState && this.curSocketState != SocketEnum.success) {\r\n            return false;\r\n        }\r\n        this.BaseSocketIns.send(data);\r\n        return true\r\n    }\r\n    /**事件注册 */\r\n    On(id, callback, self) {\r\n        this.socketEventDic[id] = self ? callback.bind(self) : callback;\r\n    }\r\n    close() {\r\n        this.HeartClose();\r\n        this.BaseSocketIns.close();\r\n    }\r\n    SetLoadingShowAndHideFunc(show, hide) {\r\n        this.loadingShowFunc = show\r\n        this.loadingHideFunc = hide\r\n    }\r\n}","import SingletonBase from \"../../Singleton/SingletonBase\";\r\n\r\n/*\r\n计时器管理类\r\n*/\r\nexport default class TimerManager extends SingletonBase {\r\n\r\n    timerList = []\r\n    timerID = 0\r\n    isOpenTimer = false\r\n    timerIndex = false\r\n    activeTimerIDDic = {}\r\n    intervalID = 0\r\n    intervalTime = 0\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n    \r\n    static _onNewObject() {\r\n        let instance = new TimerManager();\r\n        instance.intervalTime = 1 / cc.game.config.frameRate\r\n        instance.intervalID = setInterval(instance.updateTimer.bind(instance), instance.intervalTime * 1000)\r\n        return instance\r\n    }\r\n    _onDestroyObject() {\r\n        clearInterval(this.intervalID)\r\n        this.clearTimer()\r\n    }\r\n    updateTimer() {\r\n        if (!this.isOpenTimer)\r\n            return;\r\n        this.timerIndex = this.timerList.length - 1;\r\n        for (; this.timerIndex >= 0; this.timerIndex--) {\r\n            var timerobj = this.timerList[this.timerIndex];\r\n            if (timerobj.isPause)\r\n                continue\r\n            timerobj.timer += this.intervalTime;\r\n            if (timerobj.timer >= timerobj.delay) {\r\n                timerobj.callback();\r\n                timerobj.repeat--;\r\n                if (!timerobj.isEndless && timerobj.repeat <= 0) {\r\n                    this.timerList.splice(this.timerIndex, 1)\r\n                    if (this.timerList.length <= 0) {\r\n                        this.isOpenTimer = false;\r\n                    }\r\n                }\r\n                else {\r\n                    timerobj.timer = timerobj.timer - timerobj.interval;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    /*\r\n    获取计时器ID，内部调用 计算方式有待优化\r\n    */\r\n    getTimerID() {\r\n        this.timerID = this.timerID + 1;\r\n        if (this.timerID >= 999999999)\r\n            this.timerID = 1;\r\n        while (this.activeTimerIDDic[this.timerID]) {\r\n            this.timerID = this.timerID + 1;\r\n            if (this.timerID >= 999999999)\r\n                this.timerID = 1;\r\n        }\r\n        return this.timerID;\r\n    }\r\n    /*\r\n    打开一个计时器\r\n    callback 回调函数\r\n    interval 间隔时间\r\n    repeat 重复次数 <=0 无限次数 >0 重复repeat次\r\n    delay 延时时间\r\n    self 注册对象\r\n\r\n    return 计时器的ID\r\n    */\r\n    openTimer(callback, interval, repeat, delay, self) {\r\n        var timer = {\r\n            \"id\": this.getTimerID(),\r\n            \"callback\": callback.bind(self),\r\n            \"interval\": interval,\r\n            \"repeat\": repeat,\r\n            \"curRepeat\": repeat,\r\n            \"delay\": delay,\r\n            \"isEndless\": repeat > 0 ? false : true,\r\n            \"timer\": 0,\r\n            \"isPause\": false\r\n        };\r\n        if (repeat <= 0) {\r\n            this.activeTimerIDDic[timer.id] = true\r\n        }\r\n        this.timerList.push(timer);\r\n        if (!this.isOpenTimer)\r\n            this.isOpenTimer = true;\r\n        return timer.id;\r\n    }\r\n    /*\r\n    关闭一个计时器\r\n    */\r\n    closeTimer(id) {\r\n        this.timerIndex = this.timerList.length - 1;\r\n        for (; this.timerIndex >= 0; this.timerIndex--) {\r\n            var timerobj = this.timerList[this.timerIndex]\r\n            if (timerobj.id === id) {\r\n                this.timerList.splice(this.timerIndex, 1);\r\n                break;\r\n            }\r\n        }\r\n        if (this.activeTimerIDDic[id]) {\r\n            delete this.activeTimerIDDic[id]\r\n        }\r\n    }\r\n    /*\r\n    暂停一个计时器\r\n    */\r\n    pauseTimer(id) {\r\n        this.timerIndex = this.timerList.length - 1;\r\n        for (; this.timerIndex >= 0; this.timerIndex--) {\r\n            var timerobj = this.timerList[this.timerIndex]\r\n            if (timerobj.id === id) {\r\n                timerobj.isPause = true;\r\n            }\r\n        }\r\n    }\r\n    /*\r\n    恢复一个计时器\r\n    */\r\n    resumeTimer(id) {\r\n        this.timerIndex = this.timerList.length - 1;\r\n        for (; this.timerIndex >= 0; this.timerIndex--) {\r\n            var timerobj = this.timerList[this.timerIndex]\r\n            if (timerobj.id === id) {\r\n                timerobj.isPause = false;\r\n            }\r\n        }\r\n    }\r\n    /*\r\n    重置一个计时器主要是把计时增量置0，重新开始计时，有次数限制的 重置次数，达到复用的目的\r\n    重置计时器的各项数据  不传入的为之前的默认值\r\n    */\r\n    resetTImer(id, delay, repeat, interval) {\r\n        this.timerIndex = this.timerList.length - 1;\r\n        for (; this.timerIndex >= 0; this.timerIndex--) {\r\n            var timerobj = this.timerList[this.timerIndex]\r\n            if (timerobj.id === id) {\r\n                timerobj.repeat = repeat ? repeat : timerobj.curRepeat;\r\n                timerobj.timer = 0;\r\n                timerobj.delay = delay ? delay : timerobj.delay;\r\n                timerobj.interval = interval ? interval : timerobj.interval;\r\n            }\r\n        }\r\n    }\r\n    clearTimer() {\r\n        this.isOpenTimer = false;\r\n        this.timerList = [];\r\n    }\r\n}","import commonBtn, { groupBtn } from \"../tools/commonBtn\";\r\nimport lottery_MsgStation from \"../../Data/lottery_MsgStation\";\r\nimport Utils from \"../../Core/Tools/lottery_Utils\";\r\nimport Helper from \"../tools/lottery_helper\";\r\nconst { ccclass, property } = cc._decorator;\r\nvar lottertList =\r\n{\r\n    CP1001: {\r\n        title: \"EBet 时时彩\",\r\n        spriteName: \"lottery_pc28\",\r\n        lotteryCode: 'CP1001',\r\n    },\r\n    CP1002: {\r\n        title: \"EBET 3D\",\r\n        spriteName: \"lottery_3d\",\r\n        lotteryCode: 'CP1002',\r\n    },\r\n    CP1003: {\r\n        title: \"EBet 快3\",\r\n        spriteName: \"lottery_k3\",\r\n        lotteryCode: 'CP1003',\r\n    },\r\n    CP1004: {\r\n        title: \"EBet PK10\",\r\n        spriteName: \"lottery_pk10\",\r\n        lotteryCode: 'CP1004',\r\n    },\r\n    CP1005: {\r\n        title: \"EBET 11选5\",\r\n        spriteName: \"lottery_11x5\",\r\n        lotteryCode: 'CP1005',\r\n    }\r\n};\r\n\r\n@ccclass\r\nexport default class lotterySelect extends cc.Component {\r\n\r\n    @property(cc.Node)\r\n    selectItem = null;\r\n    @property(cc.Node)\r\n    itemPrefab = null;\r\n    @property(cc.Node)\r\n    closeBtn = null;\r\n    @property(cc.Node)\r\n    submitBtn = null;\r\n    //彩种数据\r\n    lotteryTypeData;\r\n    //类数组\r\n    btnGroup = {\r\n        arr: [],\r\n        index: null\r\n    }\r\n\r\n    onLoad() {\r\n        this.closeBtn.on(cc.Node.EventType.TOUCH_END, this.closeBtnDown, this);\r\n        this.submitBtn.on(cc.Node.EventType.TOUCH_END, this.submitBtnDown, this);\r\n    }\r\n\r\n    show(listData) {\r\n        this.node.active = true;\r\n        this.lotteryData = [];\r\n        for (let one of listData) {\r\n            lottertList[one] && this.lotteryData.push(lottertList[one]);\r\n        }\r\n        let dataIndex = 0;\r\n        this.btnGroup.index = null;\r\n        this.btnGroup.arr.forEach(element => {\r\n            let data = this.lotteryData[dataIndex++];\r\n            if (data)\r\n                element.updateData(data);\r\n            else\r\n                element.destroy();\r\n        });\r\n        let data = this.lotteryData[dataIndex];\r\n        while (data) {\r\n            let one = cc.instantiate(this.itemPrefab);\r\n            one.active = true;\r\n            this.btnGroup.arr.push(new selectBtn(data, one, () => { }, this.btnGroup));\r\n            this.selectItem.addChild(one);\r\n            data = this.lotteryData[++dataIndex];\r\n        }\r\n    }\r\n    submitBtnDown() {\r\n        if (this.btnGroup.index == null) {\r\n            Helper.getInstance().showTips(\"请选择彩种\");\r\n        } else {\r\n            lottery_MsgStation.getInstance().onSendLotteryChoice(this.lotteryData[this.btnGroup.index].lotteryCode);\r\n        }\r\n    }\r\n    closeBtnDown() {\r\n        this.node.active = false;\r\n    }\r\n}\r\n\r\nclass selectBtn extends groupBtn {\r\n    nameLable0;\r\n    nameLable1;\r\n    icon;\r\n    constructor(data, node, callback, group) {\r\n        super(node, callback, group);\r\n        this.nameLable0 = cc.find('name', this.defaultNode).getComponent(cc.Label);\r\n        this.nameLable1 = cc.find('name', this.selectNode).getComponent(cc.Label);\r\n        this.icon = cc.find('icon', this.node).getComponent(cc.Sprite);\r\n        this.updateData(data);\r\n    }\r\n    updateData(data) {\r\n        this.select(false);\r\n        this.nameLable0.string = data.title;\r\n        this.nameLable1.string = data.title;\r\n        Utils.getInstance().setSprite(this.icon, data.spriteName, 'texture1');\r\n    }\r\n    clean() {\r\n        this.node.destroy();\r\n    }\r\n}\r\n\r\n","import SingletonBase from \"../../Singleton/SingletonBase\";\r\nimport BaseResLoad from \"../ResHandle/lottery_BaseResLoad\";\r\n\r\nexport default class Utils extends SingletonBase {\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    static _onNewObject() {\r\n        let one = new Utils();\r\n        one.atlasDic = [];\r\n        one.atlasEventDic = [];\r\n        return one;\r\n    }\r\n\r\n    addClickEvent(node, target, component, handler) {\r\n        var eventHandler = new cc.Component.EventHandler()\r\n        eventHandler.target = target\r\n        eventHandler.component = component\r\n        eventHandler.handler = handler\r\n\r\n        var clickEvents = node.getComponent(cc.Button).clickEvents\r\n        clickEvents.push(eventHandler)\r\n    }\r\n\r\n    addSlideEvent(node, target, component, handler) {\r\n        var eventHandler = new cc.Component.EventHandler()\r\n        eventHandler.target = target\r\n        eventHandler.component = component\r\n        eventHandler.handler = handler\r\n\r\n        var slideEvents = node.getComponent(cc.Slider).slideEvents\r\n        slideEvents.push(eventHandler)\r\n    }\r\n    /*\r\n    将字符串转换成整数\r\n    */\r\n    getInt(str) {\r\n        if (!str)\r\n            return 0;\r\n        var num = Number.parseInt(str);\r\n        if (!num)\r\n            num = 0;\r\n        return num;\r\n    }\r\n    /*\r\n    将字符串转换成浮点数\r\n    */\r\n    getFloat(str) {\r\n        if (!str)\r\n            return 0;\r\n        var num = Number.parseFloat(str);\r\n        if (!num)\r\n            num = 0;\r\n        return num;\r\n    }\r\n\r\n    /**\r\n     * 将一个数四舍五入,flag为true表示当num为整数时，四舍五入后强制需要小数点\r\n     * 例如：当num为100时，如果flag为true，fixNum为3，则返回100.000， 如果flag为false则返回100\r\n     */\r\n    getRoundNum(num, fixNum, flag) {\r\n        num = parseFloat(num + \"\");\r\n        if (flag) {\r\n            return num.toFixed(fixNum);\r\n        }\r\n        let str = num + \"\";\r\n        if (str.indexOf(\".\") == -1) {\r\n            return parseInt(str);\r\n        }\r\n        return num.toFixed(fixNum);\r\n    }\r\n\r\n    /**检测变量是否为null || undefined\r\n    * obj:被检测变量\r\n    * defaultdata：如果为空，返回指定的默认值\r\n    * 返回传入的默认值\r\n    */\r\n    check(obj, defaultdata) {\r\n        if (obj == null || obj == undefined) {\r\n            console.log(\"obj: \" + obj + \" is null:\" + defaultdata)\r\n            return defaultdata\r\n        }\r\n        return obj\r\n    }\r\n\r\n    /**检测对象是否为null\r\n     * obj:被检测对象\r\n     * 返回bool值\r\n     */\r\n    checkBL(obj) {\r\n        if (obj === null || obj === undefined || obj === \"\") {\r\n            return false\r\n        }\r\n        return true\r\n    }\r\n\r\n    checkNumber(obj) {\r\n        if (typeof (obj) === \"number\") {\r\n            return true\r\n        }\r\n        return false\r\n    }\r\n\r\n    checkBoolean(obj) {\r\n        if (typeof (obj) === \"boolean\") {\r\n            return true\r\n        }\r\n        return false;\r\n    }\r\n\r\n    checkString(obj) {\r\n        if (typeof (obj) === \"string\") {\r\n            return true\r\n        }\r\n        return false\r\n    }\r\n\r\n    checkNull(obj) {\r\n        if (obj === null || obj === undefined) {\r\n            return true\r\n        }\r\n        return false\r\n    }\r\n\r\n    //  判断对象是否无数据\r\n    checkObjIsEmpty(obj) {\r\n        let isEmpty = true;\r\n\r\n        for (let i in obj) {\r\n            isEmpty = false;\r\n            break;\r\n        }\r\n        return isEmpty;\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    /*\r\n    将时间格式化  time 时间  单位 秒  stamp 格式 字符串 \"dd-hh-mm-ss\"\r\n    eg  time = 3599 stamp = \"hh-mm-ss\"=> return \"00-59-59\"\r\n    eg  time = 3599 stamp = \"mm-ss\"=> return \"59-59\"\r\n    */\r\n    dateFormatByType(time, stamp) {\r\n        let tostring = function (num) {\r\n            if (num < 10)\r\n                return \"0\" + num;\r\n            else\r\n                return \"\" + num;\r\n        }\r\n        if (stamp.includes(\"dd\")) {\r\n            stamp = stamp.replace(\"dd\", tostring(Math.floor(time / 86400)));\r\n            time = time % 86400;\r\n        }\r\n        if (stamp.includes(\"hh\")) {\r\n            stamp = stamp.replace(\"hh\", tostring(Math.floor(time / 3600)));\r\n            time = time % 3600;\r\n        }\r\n        if (stamp.includes(\"mm\")) {\r\n            stamp = stamp.replace(\"mm\", tostring(Math.floor(time / 60)));\r\n            time = time % 60;\r\n        }\r\n        if (stamp.includes(\"ss\")) {\r\n            stamp = stamp.replace(\"ss\", tostring(time));\r\n        }\r\n        return stamp;\r\n    }\r\n\r\n    /**\r\n     * 获得段日期格式，time为时间戳，stamp为字符串格式\r\n     * MM月dd日hh：mm：ss 返回xx月xx日xx：xx：xx\r\n     */\r\n    getShortTime(time, stamp) {\r\n        let date = new Date(time);\r\n        let str = \"\";\r\n        if (stamp.includes(\"YY\")) {\r\n            let year = date.getFullYear();\r\n            stamp = stamp.replace(\"YY\", year);\r\n        }\r\n        if (stamp.includes(\"MM\")) {\r\n            let month = date.getMonth();\r\n            str = (month + 1 < 10 ? \"0\" : \"\") + (month + 1);\r\n            stamp = stamp.replace(\"MM\", str);\r\n        }\r\n        if (stamp.includes(\"dd\")) {\r\n            let day = date.getDate();\r\n            str = (day < 10 ? \"0\" : \"\") + day;\r\n            stamp = stamp.replace(\"dd\", str);\r\n        }\r\n        if (stamp.includes(\"hh\")) {\r\n            let hour = date.getHours();\r\n            str = (hour < 10 ? \"0\" : \"\") + hour;\r\n            stamp = stamp.replace(\"hh\", str);\r\n        }\r\n        if (stamp.includes(\"mm\")) {\r\n            let min = date.getMinutes();\r\n            str = (min < 10 ? \"0\" : \"\") + min;\r\n            stamp = stamp.replace(\"mm\", str);\r\n        }\r\n        if (stamp.includes(\"ss\")) {\r\n            let second = date.getSeconds();\r\n            str = (second < 10 ? \"0\" : \"\") + second;\r\n            stamp = stamp.replace(\"ss\", str);\r\n        }\r\n        return stamp;\r\n    }\r\n\r\n    /**\r\n     * 获取小数位数\r\n     */\r\n    getDecimalNum(num, flag = \".\") {\r\n        let str = num + \"\";\r\n        let arr = str.split(flag);\r\n        return arr[1] ? arr[1].length : 0;\r\n    }\r\n\r\n    /**\r\n     * 格式化金钱显示, num为金钱数，digit为位数，flag为达到位数后插入的标志\r\n     * 例如：num = 10000, digit = 3, flag = \",\" 返回为10,000\r\n     */\r\n    formatMoneyShow(num, digit = 3, flag = \",\") {\r\n        let s = num + \"\";\r\n        let arr = s.split(\".\");\r\n        let newstr = \"\";\r\n        let len = arr[0].length;\r\n        let mod = len % digit;\r\n        let startIndex = mod ? mod : digit;\r\n        newstr += (mod ? s.substr(0, mod) : s.substr(0, digit)) + (len > digit ? flag : \"\");\r\n        for (let i = startIndex; i < len; i += digit) {\r\n            newstr += s.substr(i, digit) + (i < len - digit ? flag : \"\");\r\n        }\r\n        return newstr + (arr[1] ? (\".\" + arr[1]) : \"\");\r\n    }\r\n\r\n    makeDir(path) {\r\n        var folders = path.split(\"/\")\r\n        if (folders == null) {\r\n            return false\r\n        }\r\n        var dir = \"\"\r\n        for (var i = 0; i < folders.length - 1; i++) {\r\n            dir = dir + folders[i] + \"/\"\r\n            jsb.fileUtils.createDirectory(dir)\r\n        }\r\n        return true\r\n    }\r\n    /*\r\n        根据16进制颜色值字符串 计算RGB颜色值 返回cc.color\r\n    */\r\n    getColorByString(colorstr) {\r\n        if (colorstr.length < 6) {\r\n            cc.error(\"length < 6\");\r\n            return cc.Color.WHITE;\r\n        }\r\n        else {\r\n            return cc.Color.BLACK.fromHEX(colorstr);\r\n        }\r\n    }\r\n    /**\r\n     * 处理number ,保留小数点后指定位数 其余部分直接舍弃，不够位数不补全\r\n     * @param {*} num  需要处理的number\r\n     * @param {*} fixed 保留的位数\r\n     */\r\n    FixedNumber(num, fixed) {\r\n        fixed = Math.pow(10, fixed);\r\n        num = Math.floor(num * fixed) / fixed\r\n        return num\r\n    }\r\n    /**\r\n    * 替换图片\r\n    * @param {*cc.Sprite} sprite cc.sprtie对象\r\n    * @param {*string} spritename 图片名称\r\n    * @param {*string} atlasname 图集名称\r\n    */\r\n    setSprite(sprite, spritename, atlasname) {\r\n        if (atlasname && !this.atlasDic[atlasname]) {\r\n            !this.atlasEventDic[atlasname] && (this.atlasEventDic[atlasname] = [])\r\n            this.atlasEventDic[atlasname].push(() => {\r\n                this.setSprite(sprite, spritename, atlasname)\r\n            })\r\n            BaseResLoad.getInstance().LoadByKey(atlasname, 'Altas/' + atlasname, (err, res) => {\r\n                if (err) {\r\n                    cc.warn(\"图集加载失败：\" + atlasname + \"    \" + err)\r\n                    return;\r\n                }\r\n                this.atlasDic[atlasname] = res\r\n                if (this.atlasEventDic[atlasname]) {\r\n                    for (let index = 0; index < this.atlasEventDic[atlasname].length; index++) {\r\n                        const element = this.atlasEventDic[atlasname][index];\r\n                        element();\r\n                    }\r\n                    delete this.atlasEventDic[atlasname]\r\n                }\r\n            }, cc.SpriteAtlas)\r\n            return;\r\n        }\r\n        sprite.spriteFrame = this.atlasDic[atlasname].getSpriteFrame(spritename)\r\n    }\r\n}","import ViewCtrBase from \"../lottery_viewCtrBase\";\n\nexport default class lottery_VideoPlayCtr extends ViewCtrBase {\n    constructor() {\n        super()\n        this.Init()\n    }\n\n    static _onNewObject() {\n        return new lottery_VideoPlayCtr()\n    }\n    AddEvent() {\n    }\n    RemoveEvent() {\n    }\n    _OnMessageHandle(data) {\n        let _data = data\n        /*\n        TODO:处理消息然后返回给OnMessageHandle 往view层发送\n        */\n        return _data\n    }\n    OnInit() {\n        this.moduleName = \"videoPlayPre\"\n    }\n    OnOpen() { }\n    OnClose() { }\n    OnDestroy() { }\n}","import lottery_MsgStation from \"../../Data/lottery_MsgStation\";\nimport lottery_videoCom from \"../videoCom/lottery_videoCom\"\ncc.Class({\n    extends: require(\"lottery_viewBaseComponent\"),\n    properties: {\n        exitBtn: cc.Node,\n        videoPlayBtn: cc.Node,\n        videoCanvas: [lottery_videoCom],\n        videoIndex: cc.Integer,//当前播放窗口\n    },\n    /*----------------------------------生命周期函数-----------------------------------------*/\n    OnInit() {\n        this.moduleName = \"videoSysPre\";\n        this.exitBtn.on(cc.Node.EventType.TOUCH_END, this.exitBtnDown, this);\n        this.videoPlayBtn.on(cc.Node.EventType.TOUCH_END, this.videoPlayBtnDown, this);\n        this.initVideo();\n    },\n    OnShow() { },\n    OnHide() { },\n    OnDispose() { },\n    _onMessageHandel(data) {\n\n    },\n    /*--------------------------------------相关设置-----------------------------------------*/\n    initVideo() {\n        let videoUrl = 'ws://ws4.jiasula.info:8081/lobbyB/B15/19148936/6eca0113e34c41c1f45a5f9eaf13429c';\n        this.videoIndex = 0;\n        this.videoCanvas.forEach((element, index) => {\n            element.init(videoUrl, ebet.baccarat);\n            if (index == this.videoIndex) {\n                element.isPlay = true;\n            } else {\n                element.isPlay = false;\n            }\n            element.node.on(cc.Node.EventType.TOUCH_END, () => {\n                if (index == this.videoIndex) {\n                    element.pause();\n                    this.videoIndex = null;\n                } else {\n                    if (this.videoIndex != null) {\n                        let one = this.videoCanvas[this.videoIndex];\n                        one.pause();\n                    }\n                    element.continue();\n                    this.videoIndex = index;\n                }\n            })\n        });\n    },\n    /*-------------------------------------------事件-----------------------------------------*/\n    exitBtnDown() {\n        lottery_MsgStation.getInstance().onSendLogoutContent();\n    },\n    videoPlayBtnDown() {\n        lottery_MsgStation.getInstance().onFullPlay();\n    }\n});","import ViewCtrBase from \"../lottery_viewCtrBase\"\n\nexport default class lottery_VideoSysCtr extends ViewCtrBase {\n    constructor() {\n        super()\n        this.Init()\n    }\n\n    static _onNewObject() {\n        return new lottery_VideoSysCtr()\n    }\n    AddEvent() {\n    }\n    RemoveEvent() {\n    }\n    _OnMessageHandle(data) {\n        let _data = data\n        /*\n        TODO:处理消息然后返回给OnMessageHandle 往view层发送\n        */\n        return _data\n    }\n    OnInit() {\n        this.moduleName = \"videoSysPre\"\n    }\n    OnOpen() { }\n    OnClose() { }\n    OnDestroy() { }\n}","import lottery_MsgStation from '../../Data/lottery_MsgStation'\nimport lottery_videoFlow from './lottery_videoFlow';\nimport lottery_VideoSysCtr from './lottery_VideoSysCtr';\ncc.Class({\n    extends: require(\"lottery_viewBaseComponent\"),\n    properties: {\n        tips: [cc.Node],\n        bg: cc.Node,\n        backBtn: cc.Node,//返回按钮\n        videoFlow: lottery_videoFlow\n    },\n    /*------------------子类重写函数---------------*/\n    OnInit() {\n        this.moduleName = \"videoSysPre\";\n    },\n    OnShow() {\n        lottery_MsgStation.getInstance().onSendLinkHeGuan();\n\n    },\n    onEnable() {\n        this.backBtn.on(cc.Node.EventType.TOUCH_END, this.backBtnDown, this);\n        cc.systemEvent.on(cc.SystemEvent.EventType.KEY_DOWN, this.escEvent, this);\n    },\n    onDisable() {\n        this.backBtn.off(cc.Node.EventType.TOUCH_END, this.backBtnDown, this);\n        cc.systemEvent.off(cc.SystemEvent.EventType.KEY_DOWN, this.escEvent, this);\n    },\n    OnHide() {\n    },\n    OnDispose() { },\n    _onMessageHandel(data) {\n        switch (data.type) {\n            case 1: //链接荷官端提示\n                this.tips[0].active = true;\n                this.tips[1].active = false;\n                this.tips[2].active = false;\n                this.backBtn.active = true;\n                break;\n            case 2: //链接成功提示\n                this.tips[0].active = false;\n                this.tips[1].active = true;\n                this.tips[2].active = false;\n                setTimeout(() => {\n                    lottery_VideoSysCtr.getInstance().OnMessageHandle({ type: 4 });\n                }, 500);\n                break;\n            case 3://连接失败\n                this.tips[0].active = false;\n                this.tips[1].active = false;\n                this.tips[2].active = true;\n                break;\n            case 4://开启视频流程\n                this.tips[0].active = false;\n                this.tips[1].active = false;\n                this.tips[2].active = false;\n                this.bg.active = false;\n                this.backBtn.active = false;\n                this.videoFlow.startPlay();\n                break;\n            default:\n                console.log(data);\n                break;\n        }\n    },\n    /**---------------------------------------------事件----------------------------------------------------- */\n    backBtnDown() {\n        lottery_MsgStation.getInstance().onBackToSys();\n    },\n    escEvent(event) {\n        switch (event.keyCode) {\n            case cc.KEY.escape:\n                console.log(\"退出事件\");\n                this.videoFlow.stopPlay();\n                this.backBtnDown();\n                break;\n        }\n    }\n});","import lottery_animDataMgr from \"../../Data/lottery_animDataMgr\";\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class lottery_animCom extends cc.Component {\r\n    @property(cc.Integer)\r\n    frameRate = 25; //帧率\r\n    @property(cc.Boolean)\r\n    isLoop = false; //是否循环\r\n    @property(cc.Boolean)\r\n    isPlaying = false;//是否正在播放\r\n    @property(cc.Sprite)\r\n    targetSprite = null;//目标精灵\r\n    @property({ type: cc.String, tooltip: \"获取animMgr中指定的序列帧数组\" })\r\n    folderName = String;//??这样写编辑器不会提示有问题\r\n    //图集\r\n    frameSpriteArr = [];\r\n    //当前时间\r\n    nowTime = 0;\r\n    //开始时间\r\n    startTime = 0;\r\n    //帧间隔时间\r\n    frameTime = 0;\r\n    //播放完后的回调\r\n    playFinishCallBack = null;\r\n    //setData的时候加载失败\r\n    loadFail = false;\r\n\r\n    onLoad() {\r\n        this.frameTime = 1 / this.frameRate;\r\n        this.folderName && (this.frameSpriteArr = lottery_animDataMgr.getInstance().resDir[this.folderName]);\r\n        !this.frameSpriteArr && (this.frameSpriteArr = []);\r\n        !this.targetSprite && (this.targetSprite = this.node.getComponent(cc.Sprite));\r\n    }\r\n    //\r\n    update(dt) {\r\n        if (this.loadFail) {\r\n            this.frameSpriteArr = lottery_animDataMgr.getInstance().resDir[this.folderName];\r\n            if (!this.frameSpriteArr || !this.frameSpriteArr.length) return;\r\n            this.targetSprite.spriteFrame = this.frameSpriteArr[Math.floor(this.startTime / this.frameTime)];\r\n            this.nowTime = this.startTime;\r\n            this.isPlaying = true;\r\n            this.loadFail = false;\r\n            return;\r\n        }\r\n        if (!this.isPlaying) return;\r\n        this.nowTime += dt;\r\n        let index = Math.floor(this.nowTime / this.frameTime);\r\n        if (index >= this.frameSpriteArr.length) { //大于总帧数\r\n            if (this.isLoop) {\r\n                index = 0;\r\n                this.nowTime = this.startTime;\r\n            } else {\r\n                this.isPlaying = false;\r\n                this.nowTime = this.startTime;\r\n                index = this.frameSpriteArr.length - 1;\r\n                this.playFinishCallBack && this.playFinishCallBack(this.folderName);\r\n            }\r\n        }\r\n        this.targetSprite.spriteFrame = this.frameSpriteArr[index];\r\n    }\r\n    /**\r\n     * 现在就停止播放\r\n     */\r\n    quickClosePlay() {\r\n        this.isPlaying = false;\r\n        this.playFinishCallBack && this.playFinishCallBack();\r\n    }\r\n\r\n    /**\r\n     * 设置播放\r\n     * @param folderName 指定帧数组\r\n     * @param startTime 开始时间\r\n     */\r\n    setData(folderName, startTime = 0, isLoop = false) {\r\n        if (folderName == '') return;\r\n        this.folderName = folderName;\r\n        this.isLoop = isLoop;\r\n        this.startTime = startTime;\r\n        this.nowTime = this.startTime;\r\n        let data = lottery_animDataMgr.getInstance().resDir[folderName];\r\n        if (!data || data.length == 0) { this.loadFail = true; return; }\r\n        this.isPlaying = true;\r\n        this.frameSpriteArr = data;\r\n        this.targetSprite.spriteFrame = this.frameSpriteArr[Math.floor(this.nowTime / this.frameTime)];\r\n    }\r\n    //设置播放完成回调\r\n    setFinshCallBack(callBack) {\r\n        this.playFinishCallBack = callBack;\r\n    }\r\n\r\n    /**\r\n     * 设置是否循环\r\n     */\r\n    setLoop(is) {\r\n        this.isLoop = is;\r\n    }\r\n}","/**\r\n * 浏览器存在内存限制 32位为1.0GB,64位为1.4GB,\r\n * 播放当前视频的时候,至少得把下一阶段的视频加载完毕。\r\n */\r\nimport SingletonBase from \"../Singleton/SingletonBase\";\r\n\r\nexport default class lottery_animDataMgr extends SingletonBase {\r\n    resDir = {};\r\n    resUrl = 'Altas/little/';\r\n    static _onNewObject() {\r\n        let one = new lottery_animDataMgr();\r\n        return one;\r\n    }\r\n    //数据目录初始化\r\n    init(progressCallBack, callback) {\r\n        cc.loader.loadResDir(this.resUrl, cc.SpriteFrame, progressCallBack, (err, objects, urls) => {\r\n            if (err) {\r\n                console.log('错误', err);\r\n                return;\r\n            }\r\n            for (let index = 0, length = urls.length; index < length; index++) {\r\n                let one = urls[index].split('/');\r\n                let name = one[one.length - 2];\r\n                !this.resDir[name] && (this.resDir[name] = []);\r\n                this.resDir[name].push(objects[index]);\r\n            }\r\n            callback && callback();\r\n            console.log(this.resUrl, '加载完毕');\r\n        });\r\n    }\r\n    /*------------------------------------------对某个目录的处理------------------------------- */\r\n    //加载某个阶段的视频\r\n    loadResDir(urlName, progressCallBack, callback) {\r\n        // if (this.resDir[urlName] && this.resDir[urlName].length) return;\r\n\r\n    }\r\n    //释放某个阶段的视频\r\n    releaseResDir(url) {\r\n        cc.loader.releaseResDir(this.resUrl + url);\r\n        this.resDir[url].length = 0;\r\n    }\r\n\r\n}","import SingletonBase from '../../Singleton/SingletonBase';\r\nimport lottery_BaseResLoad from '../../Core/ResHandle/lottery_BaseResLoad'\r\n/**\r\n * 项目的辅助脚本，理应只提供辅助类的函数\r\n */\r\nexport default class Helper extends SingletonBase {\r\n    tipsLayer;\r\n    loadingLayer;\r\n    static _onNewObject() {\r\n        let _instance = new Helper();\r\n        _instance.Res = {};\r\n        _instance.TipsLayer = null; // 缓存tipslayer\r\n        return _instance;\r\n    }\r\n    /**\r\n     *  浮动提示\r\n     * @param content\r\n     */\r\n    showTips(content, type = 1) {\r\n        // content = cc.lottery.LanguageManager.GetLanguageText(content);\r\n        if (this.tipsLayer) {\r\n            this.tipsLayer.showTips(content, type);\r\n        } else {\r\n            this.addPrefabToNode(\"Prefab/tipsLayer\", cc.find(\"Canvas\"), 1000, (node) => {\r\n                this.tipsLayer = node.getComponent(\"lottery_tipsLayer\");\r\n                this.tipsLayer.showTips(content, type);\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * 显示加载动画\r\n     * @param {*} isClose \r\n     */\r\n    showLoading(isPlay = true) {\r\n        if (!isPlay) {\r\n            this.loadingLayer && this.loadingLayer.stopPlay();\r\n        }\r\n        else if (this.loadingLayer)\r\n            this.loadingLayer.startPlay();\r\n        else {\r\n            this.addPrefabToNode(\"Prefab/loadingLayer\", cc.find(\"Canvas\"), 1000, (node) => {\r\n                this.loadingLayer = node.getComponent('lottery_loadingTip');\r\n                this.loadingLayer.startPlay();\r\n            })\r\n        }\r\n    }\r\n    /**\r\n    * 挂在预制资源到指定节点\r\n    * @param prefabUrl\r\n    * @param targetNode  挂在到的节点\r\n    * @param zIndex      层级\r\n    * @param completeCallBack  成功回掉\r\n    */\r\n    addPrefabToNode(prefabUrl, targetNode = cc.director.getScene(), zIndex = 0, completeCallBack) {\r\n\r\n        let resFun = function (err, prefab) {\r\n            if (err) {\r\n                cc.lottery.AppLogMgr.log(\"addPrefabToNode func load \" + prefabUrl + \" err\");\r\n                return;\r\n            }\r\n\r\n            let node = cc.instantiate(prefab);\r\n            targetNode.addChild(node, zIndex);\r\n            if (completeCallBack) {\r\n                completeCallBack(node);\r\n            }\r\n        };\r\n\r\n        lottery_BaseResLoad.getInstance().LoadByKey(prefabUrl, prefabUrl, resFun);\r\n    }\r\n}","import GlobalMsg from \"../../Core/Event/lottery_GlobalMsg\";\r\nimport { lottery_EventDefine } from \"../../Data/lottery_EventDefine\";\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n@ccclass\r\nexport default class lottery_loadingTip extends cc.Component {\r\n    @property(cc.Integer)//播放最长时间\r\n    playLongTime = 5000;\r\n    @property(cc.Node)\r\n    actionNode = null;\r\n    //定时器ID\r\n    timeId = null;\r\n    onEnable() {\r\n        this.startAction();\r\n    }\r\n    onDisable() {\r\n        this.actionNode.stopAllActions();\r\n    }\r\n    //开始播放\r\n    startPlay() {\r\n        this.node.active = true;\r\n        this.timeId = setTimeout(() => {\r\n            this.node.active = false;\r\n            GlobalMsg.getInstance().Send(lottery_EventDefine.sys.loadingOvertime);\r\n        }, this.playLongTime);\r\n    }\r\n    //停止播放\r\n    stopPlay() {\r\n        this.node.active = false;\r\n        clearTimeout(this.timeId);\r\n        this.timeId = null;\r\n    }\r\n    startAction() {\r\n        let callFunc = cc.callFunc(function () {\r\n            this.actionNode.rotation += 30;\r\n            this.actionNode.rotation %= 360;\r\n        }.bind(this));\r\n        let repfor = cc.repeatForever(cc.sequence(cc.delayTime(0.1), callFunc));\r\n        this.actionNode.runAction(repfor)\r\n    }\r\n}","cc.Class({\n    extends: require(\"lottery_viewBaseComponent\"),\n    properties: {\n    },\n    /*------------------子类重写函数---------------*/\n    OnInit() {\n        this.moduleName = \"loginPre\";\n        this.loginJs = cc.find('lotteryLoginIn', this.node).getComponent('lottery_Login');\n        this.lotteryTypeJs = cc.find('lotteryTypeSelect', this.node).getComponent('lottery_TypeSelect');\n    },\n    OnShow() { },\n    OnHide() { },\n    OnDispose() { },\n    _onMessageHandel(data) {\n        switch (data.type) {\n            case 1:\n                this.lotteryTypeJs.show(data.data);\n                break;\n            case 2:\n                break;\n        }\n    }\n});","import ViewCtrBase from \"../lottery_viewCtrBase\";\n\nexport default class lottery_loginViewCtr extends ViewCtrBase {\n    constructor() {\n        super()\n        this.Init()\n    }\n\n    static _onNewObject() {\n        return new lottery_loginViewCtr()\n    }\n    AddEvent() {\n    }\n    RemoveEvent() {\n    }\n    _OnMessageHandle(data) {\n        let _data = data\n        /*\n        TODO:处理消息然后返回给OnMessageHandle 往view层发送\n        */\n        return _data\n    }\n    OnInit() {\n        this.moduleName = \"loginPre\"\n    }\n    OnOpen() { }\n    OnClose() { }\n    OnDestroy() { }\n}","import SingletonBase from \"../Singleton/SingletonBase\";\r\n\r\nexport default class lottery_lotteryData extends SingletonBase {\r\n    //用户ID\r\n    userId = null;\r\n    //用户名字\r\n    userName = null;\r\n    //可选彩种列表\r\n    roleList = null;\r\n    //所选择的彩种code\r\n    lotteryCode = null;\r\n    //当前彩票期数\r\n    lotteryId = 1115;\r\n    //指定的开奖时间\r\n    awardTime = 0;\r\n    //开奖结果\r\n    awardResult = [1, 2, 3];\r\n\r\n    static _onNewObject() {\r\n        let one = new lottery_lotteryData();\r\n        return one;\r\n    }\r\n\r\n    updataData(data) {\r\n        for (let one in data) {\r\n            if (this.hasOwnProperty(one))\r\n                this[one] = data[one];\r\n        }\r\n    }\r\n}","const { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class lottery_tipsLayer extends cc.Component {\r\n    @property(cc.Label)\r\n    strLable = null;\r\n\r\n    showTips(content) {\r\n        this.node.active = true;\r\n        this.node.opacity = 255;\r\n        this.node.stopAllActions();\r\n        this.strLable.string = content;\r\n        this.tipsToDisappear();\r\n    }\r\n\r\n    //自动隐藏\r\n    tipsToDisappear() {\r\n        let fade = cc.fadeOut(0.5);\r\n        let fadeFunc = cc.callFunc(function () {\r\n            this.node.active = false;\r\n        }, this);\r\n\r\n        this.action = cc.sequence(cc.delayTime(1), fade, fadeFunc);\r\n        this.node.runAction(this.action);\r\n    }\r\n}","import videoShader1 from \"./videoShader1\";\r\nconst { ccclass, property } = cc._decorator;\r\n@ccclass\r\nexport default class lottery_videoCom extends cc.Component {\r\n    //目标链接\r\n    @property(cc.String)\r\n    currentUrl = 'ws://ws4.jiasula.info:8081/lobbyB/B15/19148936/6eca0113e34c41c1f45a5f9eaf13429c'\r\n    @property(cc.Sprite)\r\n    targetSprite = null;\r\n    @property(cc.Boolean)\r\n    isPlay = false; //是否播放,这里不能完全控制\r\n    //socket控制\r\n    _socketController = null;\r\n\r\n    onLoad() {\r\n        cc.game.on(cc.game.EVENT_HIDE, this.gameHideClose, this);\r\n        cc.game.on(cc.game.EVENT_SHOW, this.gameShowReOpen, this);\r\n    }\r\n\r\n    init(url, isPlay = false) {\r\n        this.isPlay = isPlay;\r\n        this.currentUrl = url || this.currentUrl;\r\n        this.VideoShader = new videoShader1();\r\n        this.VideoShader.node = this.node;\r\n        let renderer, useWorker = false, self = this; //baccarat.USE_WORKER;\r\n        if (cc._renderType !== cc.game.RENDER_TYPE_CANVAS) {\r\n            this._socketController = new ebet.baccarat.VideoSocketController(this.currentUrl, useWorker, true);\r\n        } else {\r\n            console.log('canvas下无法播放');\r\n            return;\r\n        }\r\n        let shaderStatus = false;\r\n        let texureImag = new cc.Texture2D();\r\n        let orgHeight = this.node.height;\r\n        let orgWidth = this.node.width;\r\n        !this.targetSprite && (this.targetSprite = self.node.getComponent(cc.Sprite));\r\n        this.targetSprite.spriteFrame = new cc.SpriteFrame(texureImag);\r\n        this.scheduleOnce(() => {\r\n            this._socketController.onPictureDecoded = function (data, pixelFormat, pixelsWidth, pixelsHeight, contentSize) {\r\n                if (!self.isPlay) return;\r\n                if (!shaderStatus) {\r\n                    self.VideoShader.ShaderEffect();\r\n                    shaderStatus = true;\r\n                }\r\n                self.VideoShader._currentBuffer = data;\r\n                texureImag.initWithData(data, pixelFormat, pixelsWidth, pixelsHeight, contentSize);\r\n                self.node.width = orgWidth;\r\n                self.node.height = orgHeight;\r\n            }\r\n        }, 0)\r\n    }\r\n    //暂停\r\n    pause() {\r\n        this.isPlay = false;\r\n        this.gameHideClose();\r\n    }\r\n    //开始\r\n    continue() {\r\n        this.isPlay = true;\r\n        this.gameShowReOpen();\r\n    }\r\n\r\n    gameHideClose() {\r\n        if (this._socketController) {\r\n            this._socketController.close();\r\n        }\r\n    }\r\n\r\n    gameShowReOpen() {\r\n        if (this._socketController && this.isPlay) {\r\n            this._socketController._currentUrl = this.currentUrl;\r\n            this._socketController.reOpen();\r\n        }\r\n    }\r\n\r\n    update(dt) {\r\n        if (!this.isPlay) return;\r\n        if (this._socketController && this._socketController.onRenderingBefore) {\r\n            this._socketController.onRenderingBefore(dt);\r\n            this.VideoShader.Myrendering(ebet.videoSize);\r\n        }\r\n    }\r\n\r\n    onDestroy() {\r\n        cc.game.off(cc.game.EVENT_HIDE, this.gameHideClose);\r\n        cc.game.off(cc.game.EVENT_SHOW, this.gameShowReOpen);\r\n        this._socketController.close();\r\n        this._socketController = null;\r\n        this.unscheduleAllCallbacks();\r\n    }\r\n}\r\n","import videosMsgFatory from \"./videoMsgFactory\";\r\nimport Utils from \"../../Core/Tools/lottery_Utils\";\r\nimport lottery_animCom from \"../animCom/lottery_animCom\";\r\nimport lottery_lotteryData from \"../../Data/lottery_lotteryData\";\r\nimport { setInterval, clearInterval } from \"timers\";\r\nimport lottery_videoCom from \"../videoCom/lottery_videoCom\";\r\nconst { ccclass, property } = cc._decorator;\r\n//考虑再拆分成小类,当前写法下每一个阶段一个函数，每个函数中有大量的修改界面的代码\r\n//只有按照正确的顺序执行 才能正常的显示\r\n@ccclass\r\nexport default class lottery_videoFlow extends cc.Component {\r\n    //定义的收到消息后的方法\r\n    msgFuncDefine = ['firstStage', 'secondStage', 'thirdStage', 'fourStage', 'fiveStage', 'sixStage', 'waitStage'];\r\n    //标准流程\r\n    stanardFlow = [[7, 10], [1], [2], [3], [4], [5], [6, 7]];\r\n    @property([cc.VideoPlayer])\r\n    videoArr = []; //视频合集\r\n    @property([cc.Node])\r\n    qiShuArr = [];\r\n    @property(cc.Node)\r\n    nodeItem = null;\r\n    @property(lottery_animCom)\r\n    littleCom = null;\r\n    @property(cc.Node)\r\n    startLottery = null;\r\n    @property([cc.Node])\r\n    balls = [];\r\n    @property(lottery_videoCom)\r\n    videoStream = null;\r\n    @property([cc.Sprite])\r\n    countDownArr = [];\r\n\r\n    //播放队列\r\n    msgList = [];\r\n    //播放总时长秒\r\n    totalTime = 60;\r\n    //当前顺序\r\n    nowMsgPos = 0;\r\n    //是否播放倒计时\r\n    isPlayCountDown = false;\r\n    //获取当前期数\r\n    lotteryId;\r\n\r\n    start() {\r\n        for (let one of this.videoArr) {\r\n            one.node.on('completed', this.animFinshCallBack.bind(this));\r\n            one.node.active = false;\r\n        }\r\n        let arr = document.getElementsByClassName('cocosVideo');\r\n        for (let one of arr) {\r\n            one.muted = true;\r\n            one.style.zIndex = '-1';\r\n        }\r\n        this.videoStream.node.opacity = 0;\r\n        this.videoStream.init(null, true);\r\n    }\r\n\r\n    /**\r\n     * 开始播放\r\n     */\r\n    startPlay() {\r\n        clearTimeout();\r\n        this.lotteryId = lottery_lotteryData.getInstance().lotteryId++;\r\n        this.setQiShu(this.lotteryId, this.qiShuArr[0], true);\r\n        this.setQiShu(this.lotteryId, this.qiShuArr[1], false)\r\n        this.setQiShu(this.lotteryId + 1, this.qiShuArr[2], true);\r\n        this.msgList = videosMsgFatory.anlyArr(this.stanardFlow);\r\n        this.animFinshCallBack();\r\n    }\r\n\r\n    /**\r\n     * 结束播放\r\n     */\r\n    stopPlay() {\r\n        clearTimeout();\r\n        this.videoStream.pause();\r\n    }\r\n    /*--------------------------------------------播放阶段设置--------------------------------------------- */\r\n    //每一阶段结束回调,这里的判断条件是单段视频播放完毕，然而存在循环播放的情况，这种写法则会重复调用\r\n    animFinshCallBack() {\r\n        if (this.isPlayCountDown) {\r\n            this.videoArr[5].play();\r\n            return;\r\n        }\r\n        console.log(\"某一阶段播放完毕\");\r\n        let obj = this.msgList.shift();\r\n        if (obj) { //播放当前\r\n            this[this.msgFuncDefine[obj.type - 1]](obj.data);\r\n        } else {\r\n            console.log('消息队列空了');\r\n            //重新开始\r\n            this.startPlay();\r\n        }\r\n    }\r\n    //片头\r\n    firstStage(data) {\r\n        this.videoArr[0].node.active = true;\r\n        this.videoArr[0].play();\r\n        this.qiShuArr[0].opacity = 0;\r\n        this.qiShuArr[0].active = true;\r\n        let one = cc.sequence(cc.delayTime(13), cc.fadeIn(1.0), cc.delayTime(1.5), cc.fadeOut(1.0));\r\n        this.qiShuArr[0].runAction(one);\r\n    }\r\n    /**\r\n     * 开奖倒计时\r\n     * @param  index 从第几个开始 \r\n     */\r\n    secondStage(data = 10) {\r\n        this.videoArr[0].node.active = false;\r\n        this.videoArr[1].node.active = true;\r\n        this.videoArr[1].currentTime = data >= 10 ? -1 : 10 - data;\r\n        this.videoArr[1].play();\r\n    }\r\n    /**\r\n     * 开奖进行时 \r\n     */\r\n    thirdStage(data) {\r\n        for (let one of this.balls)\r\n            one.active = true;\r\n        this.videoStream.node.opacity = 255;\r\n        this.videoArr[1].node.active = false;\r\n        this.littleCom.node.active = true;\r\n        this.startLottery.active = true;\r\n        this.startLottery.setPosition(1145, 540);\r\n        this.qiShuArr[1].active = true;\r\n        this.qiShuArr[1].setPosition(1140, 294);\r\n        this.littleCom.setData('startLotteryBg');\r\n        this.balls[0].setPosition(1145, 33);\r\n        this.balls[1].setPosition(1145, -193);\r\n        this.balls[2].setPosition(1145, -410);\r\n        this.littleCom.setFinshCallBack(() => {\r\n            this.startLottery.runAction(cc.moveTo(0.5, cc.v2(780, 540)));\r\n            this.qiShuArr[1].runAction(cc.moveTo(0.5, cc.v2(780, 294)));\r\n            this.littleCom.setData('startLotteryBgLoop', 0, true);\r\n            setTimeout(() => {\r\n                Utils.getInstance().setSprite(this.balls[0].getComponent(cc.Sprite), 'cq_' + lottery_lotteryData.getInstance().awardResult[0], 'LEDAtlas');\r\n                this.balls[0].runAction(cc.moveTo(1.0, cc.v2(780, 39)));\r\n                setTimeout(() => {\r\n                    Utils.getInstance().setSprite(this.balls[1].getComponent(cc.Sprite), 'cq_' + lottery_lotteryData.getInstance().awardResult[1], 'LEDAtlas');\r\n                    this.balls[1].runAction(cc.moveTo(1.0, cc.v2(780, -169)));\r\n                    setTimeout(() => {\r\n                        Utils.getInstance().setSprite(this.balls[2].getComponent(cc.Sprite), 'cq_' + lottery_lotteryData.getInstance().awardResult[2], 'LEDAtlas');\r\n                        this.balls[2].runAction(cc.moveTo(1.0, cc.v2(780, -381)));\r\n                    }, 1000);\r\n                }, 1000);\r\n            }, 1000);\r\n        })\r\n        setTimeout(() => {\r\n            this.littleCom.node.active = false;\r\n            this.startLottery.active = false;\r\n            this.animFinshCallBack();\r\n        }, data || 9000);\r\n    }\r\n    /**\r\n     * 播放开奖结果\r\n     */\r\n    fourStage(data) {\r\n        this.videoStream.node.opacity = 0;\r\n        this.videoArr[2].node.active = true;\r\n        this.videoArr[2].play();\r\n        this.balls[0].runAction(cc.moveTo(1.0, cc.v2(-282, -267)));\r\n        this.balls[1].runAction(cc.moveTo(1.0, cc.v2(25, -267)));\r\n        this.balls[2].runAction(cc.moveTo(1.0, cc.v2(335, -267)));\r\n        this.qiShuArr[1].y = 285;\r\n        this.qiShuArr[1].runAction(cc.spawn(cc.moveTo(0.7, cc.v2(10, 0)), cc.scaleTo(0.7, 1.5, 1.5)));\r\n    }\r\n    /**\r\n     * 播放 ebet3d logo\r\n     */\r\n    fiveStage(data) {\r\n        for (let one of this.balls)\r\n            one.active = false;\r\n        this.qiShuArr[1].active = false;\r\n        this.qiShuArr[1].scaleX = 1;\r\n        this.qiShuArr[1].scaleY = 1;\r\n        this.videoArr[2].node.active = false;\r\n        this.videoArr[3].node.active = true;\r\n        this.videoArr[3].play();\r\n    }\r\n    /**\r\n     * 下期预告\r\n     * @param  time 播放时间\r\n     */\r\n    sixStage(data) {\r\n        this.videoArr[3].node.active = false;\r\n        this.videoArr[4].node.active = true;\r\n        this.videoArr[4].play();\r\n        this.qiShuArr[2].active = true;\r\n        this.qiShuArr[2].opacity = 0;\r\n        let one = cc.sequence(cc.delayTime(1), cc.fadeIn(1.0), cc.delayTime(7), cc.fadeOut(1.0));\r\n        this.qiShuArr[2].runAction(one);\r\n    }\r\n    /**\r\n     * 等待状态,\r\n     * time 等待时间\r\n     */\r\n    waitStage(time) {\r\n        this.isPlayCountDown = true;\r\n        for (let one of this.videoArr)\r\n            one.node.active = false;\r\n        this.videoArr[5].node.active = true;\r\n        this.videoArr[5].play();\r\n        this.countDownArr[0].node.parent.active = true;\r\n        this.setCountDown(time--);\r\n        let timer1 = setInterval(() => {\r\n            if (time < 0) {\r\n                clearInterval(timer1);\r\n                this.countDownArr[0].node.parent.active = false;\r\n                this.videoArr[5].node.active = false;\r\n                this.isPlayCountDown = false;\r\n                this.animFinshCallBack();\r\n            }\r\n            this.setCountDown(time--);\r\n            this.countDownArr[4].node.active = !this.countDownArr[4].node.active;\r\n        }, 1000);\r\n    }\r\n    /*----------------------------------------------相关设置----------------------------------------------*/\r\n    /**\r\n     * 设置当前播放期数\r\n    */\r\n    setQiShu(str, node, isBig = true) {\r\n        node.removeAllChildren();\r\n        let arr = (str + '').split('');\r\n        let func = (url) => {\r\n            let one = cc.instantiate(this.nodeItem);\r\n            Utils.getInstance().setSprite(one.getComponent(cc.Sprite), url, 'LEDAtlas');\r\n            node.addChild(one);\r\n        }\r\n\r\n        if (isBig) {\r\n            func('wz_di');\r\n            for (let name of arr) {\r\n                func('wz_sz_' + name);\r\n            }\r\n            func('wz_qi');\r\n        } else {\r\n            func('wz_di_2');\r\n            for (let name of arr) {\r\n                func('wz_xsz_' + name);\r\n            }\r\n            func('wz_qi_2');\r\n        }\r\n\r\n    }\r\n    /**\r\n     * 设置倒计时,最小单位是秒\r\n     */\r\n    setCountDown(time = 60) {\r\n        let minute = Math.floor(time / 60);\r\n        let second = time - minute * 60;\r\n        minute = (minute + '').split('');\r\n        second = (second + '').split('');\r\n        if (minute.length == 1) minute.unshift(0);\r\n        if (second.length == 1) second.unshift(0);\r\n        Utils.getInstance().setSprite(this.countDownArr[0], minute[0], 'countDown');\r\n        Utils.getInstance().setSprite(this.countDownArr[1], minute[1], 'countDown');\r\n        Utils.getInstance().setSprite(this.countDownArr[2], second[0], 'countDown');\r\n        Utils.getInstance().setSprite(this.countDownArr[3], second[1], 'countDown');\r\n    }\r\n}\r\n//将每个状态拆成类","cc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        arr:Array(cc.RawAsset)\r\n    },\r\n\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    // onLoad () {},\r\n\r\n    start () {\r\n\r\n    },\r\n\r\n    // update (dt) {},\r\n});\r\n","import GlobalMsg from \"../Core/Event/lottery_GlobalMsg\";\r\nimport ViewComponentManager from \"../Manager/lottery_viewComponentManager\";\r\nlet ViewStatus = cc.Enum({\r\n    none: 0,\r\n    init: 1,\r\n    close: 2,\r\n    open: 3\r\n})\r\ncc.Class({\r\n    extends: cc.Component,\r\n    properties: {\r\n        moduleName: {\r\n            default: \"\",\r\n            visible: false\r\n        },\r\n        curStatus: {\r\n            default: ViewStatus.none\r\n        }\r\n    },\r\n    /*------------------生命周期函数---------------*/\r\n    Init() {\r\n        if (this.curStatus >= ViewStatus.init) return;\r\n        this.curStatus = ViewStatus.init\r\n        this.OnInit()\r\n    },\r\n    Show() {\r\n        if (this.curStatus === ViewStatus.open) return;\r\n        this.curStatus = ViewStatus.open\r\n        GlobalMsg.getInstance().Register(this.moduleName, this._onMessageHandel.bind(this), this.node.uuid);\r\n        this.OnShow()\r\n        this.node.active = true;\r\n    },\r\n    Hide() {\r\n        if (this.curStatus !== ViewStatus.open) return;\r\n        if (this.curStatus === ViewStatus.close) return;\r\n        this.curStatus = ViewStatus.close\r\n        GlobalMsg.getInstance().Unregister(this.moduleName, this.node.uuid);\r\n        ViewComponentManager.getInstance().Close(this.moduleName)\r\n        this.OnHide()\r\n        this.node.active = false;\r\n    },\r\n    Dispose() {\r\n        if (this.curStatus === ViewStatus.none) return;\r\n        this.curStatus = ViewStatus.none\r\n        this.OnDispose()\r\n    },\r\n    /*------------------子类重写函数---------------*/\r\n    /**初始化一些缓存的节点数据*/\r\n    OnInit() { },\r\n    /**显示界面，作用等同于onEnable*/\r\n    OnShow() { },\r\n    /**关闭界面，作用等同于onDisable*/\r\n    OnHide() { },\r\n    /**销毁界面，作用等同于onDestroy*/\r\n    OnDispose() { },\r\n    /**数据解析，接受controller层的数据消息，解析并显示 */\r\n    _onMessageHandel(data) {\r\n        let isHandle = true;\r\n        switch (data.type) {\r\n            default: isHandle = false;\r\n                break;\r\n        }\r\n        return isHandle;\r\n    }\r\n});\r\n","import SingletonBase from \"../Singleton/SingletonBase\";\r\nimport GlobalMsg from \"../Core/Event/lottery_GlobalMsg\";\r\nimport lottery_BaseResLoad from 'lottery_BaseResLoad'\r\n\r\nlet curZIndex = 0\r\nlet ViewOpenEventKey = \"ViewOpenEventKey\"\r\nlet ViewCloseEventKey = \"ViewCloseEventKey\"\r\n\r\nexport default class ViewComponentManager extends SingletonBase {\r\n    constructor() {\r\n        super()\r\n    }\r\n    static _onNewObject() {\r\n        return new ViewComponentManager()\r\n    }\r\n    _onDestroyObject() {\r\n        this.ChangeScene()\r\n    }\r\n\r\n    panelDic = {}//缓存面板  key : 界面名字 value : viewBaseComponent对象\r\n    canvas = null\r\n    curOpenPanelName = \"\"\r\n    /**根据加载好的预设实例化界面\r\n     * conpoment 继承 viewBase 的类对象\r\n     */\r\n    OpenByPrefab(panelname, obj, callback) {\r\n        var panel = cc.instantiate(obj);\r\n        if (this.canvas == null)\r\n            this.canvas = cc.find(\"Canvas\");\r\n        panel.parent = this.canvas;\r\n        panel.setPosition(0, 0);\r\n        var view = panel.getComponent('lottery_viewBaseComponent');\r\n        this.panelDic[panelname] = view;\r\n        view.Init(panel, panelname);\r\n        if (callback != null && typeof (callback) == \"function\")\r\n            callback(view);\r\n    }\r\n    /**\r\n     * 打开面板\r\n     * @param {*} name 面板名字\r\n     * @param {*} model 打开模式\r\n     */\r\n    OpenPanel(name) {\r\n        var panel = this.panelDic[name];\r\n        panel.Show();\r\n        panel.node.zIndex = curZIndex;\r\n        curZIndex++;\r\n        this.curOpenPanelName = name;\r\n    }\r\n    /**\r\n     * 关闭面板\r\n     * @param {*} name 面板名字\r\n     */\r\n    ClosePanel(name) {\r\n        var view = this.panelDic[name]\r\n        view.Hide();\r\n        curZIndex--;\r\n        view = this.panelDic[this.curOpenPanelName]\r\n        view.node.zIndex = curZIndex;\r\n        curZIndex++;\r\n        GlobalMsg.getInstance().Send(ViewCloseEventKey, name)\r\n    }\r\n\r\n    /**\r\n     * 删除面板\r\n     * @param {*} name 面板名字\r\n     */\r\n    DeletePanel(name) {\r\n        var view = this.panelDic[name]\r\n        // view.Hide();\r\n        if (view && view.node) {\r\n            view.node.removeFromParent(false);\r\n            delete this.panelDic[name];\r\n        }\r\n\r\n        curZIndex--;\r\n        view = this.panelDic[this.curOpenPanelName]\r\n        // view.node.zIndex = curZIndex;\r\n        curZIndex++;\r\n        GlobalMsg.getInstance().Send(ViewCloseEventKey, name)\r\n    }\r\n\r\n    /*------------------------对外接口---------------------------*/\r\n    /**\r\n     * 打开面板\r\n     * panelname:面板名称\r\n     * component:面板对应的脚本名 继承 viewBase\r\n     * callback:打开面板后的回调方法\r\n     * model:打开模式\r\n     */\r\n    Open(panelname, callback) {\r\n        var self = this;\r\n        var openPanel = function (node) {\r\n            self.OpenPanel(panelname);\r\n            if (callback != null && typeof (callback) == \"function\")\r\n                callback(node);\r\n        }\r\n\r\n        if (this.panelDic[panelname] == null) {\r\n            var resCall = function (err, obj, key) {\r\n                if (err) {\r\n                    cc.log(\"加载失败 err:\" + err)\r\n                    callback()\r\n                }\r\n                else {\r\n                    self.OpenByPrefab(panelname, obj, openPanel);\r\n                }\r\n            };\r\n            lottery_BaseResLoad.getInstance().LoadByKey(panelname, \"Prefab/\" + panelname, resCall);\r\n        }\r\n        else {\r\n            openPanel(this.panelDic[panelname]);\r\n        }\r\n    }\r\n    //关闭面板，预留，后期会增加关闭面板后的一些处理逻辑\r\n    Close(panelname) {\r\n        //关闭当前面板\r\n        // this.ClosePanel(panelname);\r\n        this.DeletePanel(panelname);\r\n    }\r\n    CloseAllView() {\r\n        for (const key in this.panelDic) {\r\n            const element = this.panelDic[key];\r\n            if (element.node.active) {\r\n                element.onClose();\r\n            }\r\n        }\r\n    }\r\n    /**切换场景，所有界面会被销毁，这个时候需要清理一次数据，以及调用所有界面的ondestroy函数 */\r\n    ChangeScene() {\r\n        for (const key in this.panelDic) {\r\n            const element = this.panelDic[key];\r\n            element.onDestroy();\r\n        }\r\n        this.panelDic = {}\r\n        this.canvas = null\r\n        this.curOpenPanelName = \"\"\r\n    }\r\n    /**注册关闭界面监听事件，主要用于界面在关闭时，控制层收到消息 帮助控制层和界面层脱偶 */\r\n    RegisterClosePanelEvent(callback, tag) {\r\n        GlobalMsg.getInstance().Register(ViewCloseEventKey, callback, tag)\r\n    }\r\n    UnRegisterClosePanelEvent(tag) {\r\n        GlobalMsg.getInstance().Unregister(ViewCloseEventKey, tag)\r\n    }\r\n    RegisterOpenPanelEvent(callback, tag) {\r\n        GlobalMsg.getInstance().Register(ViewOpenEventKey, callback, tag)\r\n    }\r\n    UnRegisterOpenPanelEvent(tag) {\r\n        GlobalMsg.getInstance().Unregister(ViewOpenEventKey, tag)\r\n    }\r\n}","import SingletonBase from \"../Singleton/SingletonBase\";\r\nimport GlobalMsg from \"../Core/Event/lottery_GlobalMsg\";\r\nimport ViewComponentManager from \"../Manager/lottery_viewComponentManager\";\r\nimport ViewCtrManager from \"../Manager/lottery_viewCtrManager\";\r\n\r\nconst { moduleEnum } = require(\"ProjectEnum\")\r\n\r\nexport default class ViewCtrBase extends SingletonBase {\r\n\r\n    ModuleStatus = cc.Enum({\r\n        none: 0,\r\n        init: 1,\r\n        close: 2,\r\n        open: 3\r\n    })\r\n\r\n    moduleName = \"\"\r\n    curModuleStatus = 0\r\n    openStatus = moduleEnum.None\r\n    viewNode = \"\"\r\n\r\n    constructor() {\r\n        super()\r\n    }\r\n\r\n    /**\r\n     * 创建实例的静态回调方法。由子类重写，并返回具体类型的对象\r\n     */\r\n    static _onNewObject() {\r\n        return new ViewCtrBase()\r\n    }\r\n    /**重写父类的销毁函数*/\r\n    _onDestroyObject() {\r\n        this.Destroy()\r\n    }\r\n    /*-----------------------------生命周期函数-------------------------------*/\r\n    Init() {\r\n        if (this.curModuleStatus >= this.ModuleStatus.init) return;\r\n        this.curModuleStatus = this.ModuleStatus.init\r\n        this.AddEvent()\r\n        this.OnInit()\r\n        ViewCtrManager.getInstance().AddViewCtr(this)\r\n    }\r\n    Open() {\r\n        if (this.curModuleStatus === this.ModuleStatus.open) return;\r\n        this.curModuleStatus = this.ModuleStatus.open\r\n        ViewCtrManager.getInstance().OpenViewCtr(this)\r\n        ViewComponentManager.getInstance().Open(this.moduleName, (script) => {\r\n            this.viewNode = script.node;\r\n            this.OnOpen()\r\n        })\r\n    }\r\n    Close() {\r\n        if (this.curModuleStatus !== this.ModuleStatus.open) return;\r\n        if (this.curModuleStatus === this.ModuleStatus.close) return;\r\n        this.curModuleStatus = this.ModuleStatus.close\r\n        ViewCtrManager.getInstance().CloseViewCtr(this)\r\n        ViewComponentManager.getInstance().Close(this.moduleName)\r\n        this.OnClose()\r\n    }\r\n    Destroy() {\r\n        if (this.curModuleStatus === this.ModuleStatus.none) return;\r\n        this.curModuleStatus = this.ModuleStatus.none\r\n        this.RemoveEvent()\r\n        ViewCtrManager.getInstance().RemoveViewCtr(this)\r\n        this.OnDestroy()\r\n    }\r\n    /**数据处理*/\r\n    OnMessageHandle(data) {\r\n        let _data = this._OnMessageHandle(data)\r\n        if (this.curModuleStatus === this.ModuleStatus.open)//只有在该模块是被打开的状态下才推送数据\r\n            GlobalMsg.getInstance().Send(this.moduleName, _data)\r\n    }\r\n    /**\r\n     * 获取view层节点\r\n     */\r\n    getViewNode() {\r\n        return this.viewNode;\r\n    }\r\n    /**\r\n     * 显示view层节点\r\n     */\r\n    showViewNode() {\r\n        this.viewNode && (this.viewNode.active = true);\r\n    }\r\n    /**\r\n     * 隐藏view层节点\r\n     */\r\n    hideViewNode() {\r\n        this.viewNode && (this.viewNode.active = false);\r\n    }\r\n    /*----------------------子类重写方法-----------------------*/\r\n    /**添加监听 */\r\n    AddEvent() {\r\n        /*\r\n        TODO:向数据层/数据控制层注册监听\r\n        */\r\n    }\r\n    /**取消监听 */\r\n    RemoveEvent() {\r\n        /*\r\n        TODO:讲注册在数据层/数据控制层的监听去掉\r\n        */\r\n    }\r\n    _OnMessageHandle(data) {\r\n        let _data = data\r\n        /**\r\n         * TODO:处理消息然后返回给OnMessageHandle 往view层发送\r\n         */\r\n        return _date\r\n    }\r\n    OnInit() { }\r\n    OnOpen() { }\r\n    OnClose() { }\r\n    OnDestroy() { }\r\n}","import SingletonBase from \"../Singleton/SingletonBase\";\r\nimport ViewComponentManager from \"./lottery_viewComponentManager\";\r\n\r\nconst { moduleEnum } = require(\"ProjectEnum\")\r\n/**界面模块管理类，出来模块与模块之间的关联 */\r\nexport default class ViewCtrManager extends SingletonBase {\r\n    constructor() {\r\n        super()\r\n        ViewComponentManager.getInstance().RegisterClosePanelEvent(this.OnViewCloseMessageHandle.bind(this), \"viewCtrCloseTag\")\r\n    }\r\n\r\n    static _onNewObject() {\r\n        return new ViewCtrManager()\r\n    }\r\n\r\n    OpenModuleDic = {}\r\n    openModuleStack = []\r\n\r\n\r\n    OnViewCloseMessageHandle(name) {\r\n        this.OpenModuleDic[name] && this.OpenModuleDic[name].Close()\r\n    }\r\n\r\n    AddViewCtr(ctr) {\r\n        this.OpenModuleDic[ctr.moduleName] = ctr\r\n    }\r\n    RemoveViewCtr(ctr) {\r\n        this.OpenModuleDic[ctr.moduleName] && delete this.OpenModuleDic[ctr.moduleName]\r\n    }\r\n    OpenViewCtr(ctr) {\r\n        if (ctr.openStatus == moduleEnum.None) return;\r\n        //从栈中移除，防止重复入栈\r\n        let index = this.openModuleStack.indexOf(ctr.moduleName)\r\n        if (index >= 0) this.openModuleStack.splice(index, 1)\r\n        //需要隐藏其他模块\r\n        if (ctr.openStatus !== moduleEnum.NeedHide) {\r\n            for (let i = 0; i < this.openModuleStack.length; i++) {\r\n                const element = this.openModuleStack[i];\r\n                this.OpenModuleDic[element].Close()\r\n            }\r\n        }\r\n        //将打开的模块放入栈\r\n        this.openModuleStack.push(ctr.moduleName);\r\n    }\r\n    CloseViewCtr(ctr) {\r\n        if (ctr.openStatus === moduleEnum.None) return;\r\n        let index = this.openModuleStack.indexOf(ctr.moduleName)\r\n        //如果打开的是栈顶元素 并且打开模式是HideOther\r\n        if (ctr.openStatus === moduleEnum.HideOther && index === this.openModuleStack.length - 1) {\r\n            this.openModuleStack.pop();\r\n            let _ctr = null;\r\n            for (let i = this.openModuleStack.length - 1; i >= 0; i--) {\r\n                _ctr = this.OpenModuleDic[this.openModuleStack[i]]\r\n                _ctr.Open()\r\n                //当打开到需要隐藏其他模块的模块时，就停止\r\n                if (_ctr.openStatus !== moduleEnum.NeedHide) break;\r\n            }\r\n        }\r\n    }\r\n}","/*!\n* screenfull\n* v5.0.0 - 2019-09-09\n* (c) Sindre Sorhus; MIT License\n*/\n\n!function(){\"use strict\";var u=\"undefined\"!=typeof window&&void 0!==window.document?window.document:{},e=\"undefined\"!=typeof module&&module.exports,t=function(){for(var e,n=[[\"requestFullscreen\",\"exitFullscreen\",\"fullscreenElement\",\"fullscreenEnabled\",\"fullscreenchange\",\"fullscreenerror\"],[\"webkitRequestFullscreen\",\"webkitExitFullscreen\",\"webkitFullscreenElement\",\"webkitFullscreenEnabled\",\"webkitfullscreenchange\",\"webkitfullscreenerror\"],[\"webkitRequestFullScreen\",\"webkitCancelFullScreen\",\"webkitCurrentFullScreenElement\",\"webkitCancelFullScreen\",\"webkitfullscreenchange\",\"webkitfullscreenerror\"],[\"mozRequestFullScreen\",\"mozCancelFullScreen\",\"mozFullScreenElement\",\"mozFullScreenEnabled\",\"mozfullscreenchange\",\"mozfullscreenerror\"],[\"msRequestFullscreen\",\"msExitFullscreen\",\"msFullscreenElement\",\"msFullscreenEnabled\",\"MSFullscreenChange\",\"MSFullscreenError\"]],l=0,r=n.length,t={};l<r;l++)if((e=n[l])&&e[1]in u){for(l=0;l<e.length;l++)t[n[0][l]]=e[l];return t}return!1}(),r={change:t.fullscreenchange,error:t.fullscreenerror},n={request:function(r){return new Promise(function(e,n){var l=function(){this.off(\"change\",l),e()}.bind(this);this.on(\"change\",l),r=r||u.documentElement,Promise.resolve(r[t.requestFullscreen]()).catch(n)}.bind(this))},exit:function(){return new Promise(function(e,n){if(this.isFullscreen){var l=function(){this.off(\"change\",l),e()}.bind(this);this.on(\"change\",l),Promise.resolve(u[t.exitFullscreen]()).catch(n)}else e()}.bind(this))},toggle:function(e){return this.isFullscreen?this.exit():this.request(e)},onchange:function(e){this.on(\"change\",e)},onerror:function(e){this.on(\"error\",e)},on:function(e,n){var l=r[e];l&&u.addEventListener(l,n,!1)},off:function(e,n){var l=r[e];l&&u.removeEventListener(l,n,!1)},raw:t};t?(Object.defineProperties(n,{isFullscreen:{get:function(){return Boolean(u[t.fullscreenElement])}},element:{enumerable:!0,get:function(){return u[t.fullscreenElement]}},isEnabled:{enumerable:!0,get:function(){return Boolean(u[t.fullscreenEnabled])}}}),e?module.exports=n:window.screenfull=n):e?module.exports={isEnabled:!1}:window.screenfull={isEnabled:!1}}();","/// <reference lib=\"dom\"/>\n\ndeclare namespace screenfull {\n\ttype RawEventNames = {\n\t\treadonly requestFullscreen: string;\n\t\treadonly exitFullscreen: string;\n\t\treadonly fullscreenElement: string;\n\t\treadonly fullscreenEnabled: string;\n\t\treadonly fullscreenchange: string;\n\t\treadonly fullscreenerror: string;\n\t};\n\n\ttype EventName = 'change' | 'error';\n\n\tinterface Screenfull {\n\t\t/**\n\t\tWhether fullscreen is active.\n\t\t*/\n\t\treadonly isFullscreen: boolean;\n\n\t\t/**\n\t\tThe element currently in fullscreen, otherwise `null`.\n\t\t*/\n\t\treadonly element: Element | null;\n\n\t\t/**\n\t\tWhether you are allowed to enter fullscreen. If your page is inside an `<iframe>` you will need to add a `allowfullscreen` attribute (+ `webkitallowfullscreen` and `mozallowfullscreen`).\n\n\t\t@example\n\t\t```\n\t\tif (screenfull.isEnabled) {\n\t\t\tscreenfull.request();\n\t\t}\n\t\t```\n\t\t*/\n\t\treadonly isEnabled: boolean;\n\n\t\t/**\n\t\tExposes the raw properties (prefixed if needed) used internally.\n\t\t*/\n\t\traw: RawEventNames;\n\n\t\t/**\n\t\tMake an element fullscreen.\n\n\t\tIf your page is inside an `<iframe>` you will need to add a `allowfullscreen` attribute (+ `webkitallowfullscreen` and `mozallowfullscreen`).\n\n\t\tKeep in mind that the browser will only enter fullscreen when initiated by user events like click, touch, key.\n\n\t\t@param element - Default is `<html>`. If called with another element than the currently active, it will switch to that if it's a decendant.\n\t\t@returns A promise that resolves after the element enters fullscreen.\n\n\t\t@example\n\t\t```\n\t\t// Fullscreen the page\n\t\tdocument.getElementById('button').addEventListener('click', () => {\n\t\t\tif (screenfull.isEnabled) {\n\t\t\t\tscreenfull.request();\n\t\t\t} else {\n\t\t\t\t// Ignore or do something else\n\t\t\t}\n\t\t});\n\n\t\t// Fullscreen an element\n\t\tconst element = document.getElementById('target');\n\n\t\tdocument.getElementById('button').addEventListener('click', () => {\n\t\t\tif (screenfull.isEnabled) {\n\t\t\t\tscreenfull.request(element);\n\t\t\t}\n\t\t});\n\n\t\t// Fullscreen an element with jQuery\n\t\tconst element = $('#target')[0]; // Get DOM element from jQuery collection\n\n\t\t$('#button').on('click', () => {\n\t\t\tif (screenfull.isEnabled) {\n\t\t\t\tscreenfull.request(element);\n\t\t\t}\n\t\t});\n\t\t```\n\t\t*/\n\t\trequest(element?: Element): Promise<void>;\n\n\t\t/**\n\t\tBrings you out of fullscreen.\n\n\t\t@returns A promise that resolves after the element exits fullscreen.\n\t\t*/\n\t\texit(): Promise<void>;\n\n\t\t/**\n\t\tRequests fullscreen if not active, otherwise exits.\n\n\t\t@returns A promise that resolves after the element enters/exits fullscreen.\n\n\t\t@example\n\t\t```\n\t\t// Toggle fullscreen on a image with jQuery\n\n\t\t$('img').on('click', event => {\n\t\t\tif (screenfull.isEnabled) {\n\t\t\t\tscreenfull.toggle(event.target);\n\t\t\t}\n\t\t});\n\t\t```\n\t\t*/\n\t\ttoggle(element?: Element): Promise<void>;\n\n\t\t/**\n\t\tAdd a listener for when the browser switches in and out of fullscreen or when there is an error.\n\n\t\t@example\n\t\t```\n\t\t// Detect fullscreen change\n\t\tif (screenfull.isEnabled) {\n\t\t\tscreenfull.on('change', () => {\n\t\t\t\tconsole.log('Am I fullscreen?', screenfull.isFullscreen ? 'Yes' : 'No');\n\t\t\t});\n\t\t}\n\n\t\t// Detect fullscreen error\n\t\tif (screenfull.isEnabled) {\n\t\t\tscreenfull.on('error', event => {\n\t\t\t\tconsole.error('Failed to enable fullscreen', event);\n\t\t\t});\n\t\t}\n\t\t```\n\t\t*/\n\t\ton(name: EventName, handler: (event: Event) => void): void;\n\n\t\t/**\n\t\tRemove a previously registered event listener.\n\n\t\t@example\n\t\t```\n\t\tscreenfull.off('change', callback);\n\t\t```\n\t\t*/\n\t\toff(name: EventName, handler: (event: Event) => void): void;\n\n\t\t/**\n\t\tAlias for `.on('change', function)`.\n\t\t*/\n\t\tonchange(handler: (event: Event) => void): void;\n\n\t\t/**\n\t\tAlias for `.on('error', function)`.\n\t\t*/\n\t\tonerror(handler: (event: Event) => void): void;\n\t}\n}\n\n/**\nSimple wrapper for cross-browser usage of the JavaScript [Fullscreen API](https://developer.mozilla.org/en/DOM/Using_full-screen_mode), which lets you bring the page or any element into fullscreen. Smoothens out the browser implementation differences, so you don't have to.\n*/\ndeclare const screenfull: screenfull.Screenfull | {isEnabled: false};\n\nexport = screenfull;\nexport as namespace screenfull;\n","const videoStageTime = [16, 10, , 8, 7, 10]; //16+10+8+7+10 = 51秒\r\n//消息工厂,想把监听也放在这里,不知道对不对\r\nexport default class videosMsgFatory {\r\n    static anlyArr() {\r\n        let arr = [];\r\n        for (let one of arguments[0]) {\r\n            arr.push(new videosMsg(one[0], one[1]));\r\n        }\r\n        return arr;\r\n    }\r\n}\r\n\r\n//单个视频消息\r\nclass videosMsg {\r\n    type;//类型\r\n    data;//数据\r\n    constructor(type, data) {\r\n        this.type = type;\r\n        this.data = data;\r\n    }\r\n}","export default class videoShader1 {\r\n    node = null;\r\n    _currentBuffer = null;\r\n    //GLProgram\r\n    program;\r\n    //orginGLProgram\r\n    orgProgram;\r\n    //sgNode 渲染节点\r\n    sgNode;\r\n    //占用纹理位置\r\n    shaderPos = [];\r\n\r\n    constructor() {\r\n        this.shaderPos = [shaderIndex++, shaderIndex++];\r\n    }\r\n    MycreateTexture() {\r\n        const gl = cc._renderContext;\r\n        const texture = gl.createTexture();\r\n        gl.bindTexture(gl.TEXTURE_2D, texture);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR); //gl.LINEAR\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n        return texture;\r\n    }\r\n    /**\r\n     * shader\r\n     */\r\n    ShaderEffect() {\r\n        this.program = new cc.GLProgram();\r\n        if (cc.sys.isNative) {\r\n            this.program.initWithString(default_vert, gray_frag);\r\n            this.program.link();\r\n            this.program.updateUniforms();\r\n        } else {\r\n            this.program.initWithVertexShaderByteArray(default_vert, gray_frag);\r\n            this.program.addAttribute(cc.macro.ATTRIBUTE_NAME_POSITION, cc.macro.VERTEX_ATTRIB_POSITION);\r\n            this.program.addAttribute(cc.macro.ATTRIBUTE_NAME_COLOR, cc.macro.VERTEX_ATTRIB_COLOR);\r\n            this.program.addAttribute(cc.macro.ATTRIBUTE_NAME_TEX_COORD, cc.macro.VERTEX_ATTRIB_TEX_COORDS);\r\n            this.program.link();\r\n            this.program.updateUniforms();\r\n        }\r\n        let gl = cc._renderContext;\r\n        this.program._uniforms[1] = gl.getUniformLocation(this.program._programObj, \"YTexture\");\r\n        this.program._uniforms[2] = gl.getUniformLocation(this.program._programObj, \"CBTexture\");\r\n        this.program._uniforms[3] = gl.getUniformLocation(this.program._programObj, \"CRTexture\");\r\n        this.program.setUniformLocationWith1i(this.program._uniforms[1], 0);\r\n        this.program.setUniformLocationWith1i(this.program._uniforms[2], this.shaderPos[0]);\r\n        this.program.setUniformLocationWith1i(this.program._uniforms[3], this.shaderPos[1]);\r\n        this.sgNode = this.node.getComponent(cc.Sprite)._sgNode;\r\n        this.orgProgram = this.sgNode.shaderProgram;\r\n        this.sgNode.setShaderProgram(this.program);\r\n        this._texture1 = this.MycreateTexture();\r\n        this._texture2 = this.MycreateTexture();\r\n        this._texture3 = this.MycreateTexture();\r\n    }\r\n    Myrendering(size) {\r\n        var videoSize = size; //{width:864,height:480};\r\n        const lumaSize = videoSize.width * videoSize.height;\r\n        const chromaSize = lumaSize >> 2;\r\n        const buffer = this._currentBuffer;\r\n        if (buffer) {\r\n            var uint8Y = buffer.subarray(0, lumaSize),\r\n                uint8Cr = buffer.subarray(lumaSize, lumaSize + chromaSize),\r\n                uint8Cb = buffer.subarray(lumaSize + chromaSize, lumaSize + 2 *\r\n                    chromaSize);\r\n            gl.activeTexture(gl.TEXTURE0);\r\n            gl.bindTexture(gl.TEXTURE_2D, this._texture1);\r\n            gl.texImage2D(gl.TEXTURE_2D, 0, gl.LUMINANCE, videoSize.width >> 1,\r\n                videoSize.height >> 1, 0, gl.LUMINANCE, gl.UNSIGNED_BYTE, uint8Y);\r\n            gl.activeTexture(gl['TEXTURE' + this.shaderPos[0]]);\r\n            gl.bindTexture(gl.TEXTURE_2D, this._texture2);\r\n            gl.texImage2D(gl.TEXTURE_2D, 0, gl.LUMINANCE, videoSize.width >> 1,\r\n                videoSize.height >> 1, 0, gl.LUMINANCE, gl.UNSIGNED_BYTE, uint8Cr);\r\n            gl.activeTexture(gl['TEXTURE' + this.shaderPos[1]]);\r\n            gl.bindTexture(gl.TEXTURE_2D, this._texture3);\r\n            gl.texImage2D(gl.TEXTURE_2D, 0, gl.LUMINANCE, videoSize.width >> 1,\r\n                videoSize.height >> 1, 0, gl.LUMINANCE, gl.UNSIGNED_BYTE, uint8Cb);\r\n            uint8Y = null;\r\n            uint8Cr = null;\r\n            uint8Cb = null;\r\n        }\r\n    }\r\n    // setProgram(node, program) {\r\n    //     if (cc.sys.isNative) {\r\n    //         var glProgram_state = cc.GLProgramState.getOrCreateWithGLProgram(program);\r\n    //         node.setGLProgramState(glProgram_state);\r\n    //     } else {\r\n    //         node.setShaderProgram(program);\r\n    //     }\r\n    //     var children = node.children;\r\n    //     if (!children)\r\n    //         return;\r\n\r\n    //     for (var i = 0; i < children.length; i++) {\r\n    //         this.setProgram(children[i], program);\r\n    //     }\r\n    // }\r\n}\r\n//存储每个shader占用的纹理位置\r\nvar shaderIndex = 1;\r\n//定点着色器\r\nvar default_vert = `\r\n    attribute vec4 a_position;\r\n    attribute vec2 a_texCoord;\r\n    attribute vec4 a_color;\r\n    varying vec2 v_texCoord;\r\n    varying lowp vec4 v_fragmentColor;\r\n    void main()\r\n    {\r\n        gl_Position = CC_PMatrix * a_position;\r\n        v_fragmentColor = a_color;\r\n        v_texCoord = a_texCoord;\r\n    }`;\r\n//片元着色器\r\nvar gray_frag = `\r\n    #ifdef GL_ES\r\n    precision mediump float;\r\n    #endif\r\n    varying vec4 v_fragmentColor;\r\n    varying vec2 v_texCoord;\r\n    uniform sampler2D YTexture;\r\n    uniform sampler2D CBTexture;\r\n    uniform sampler2D CRTexture;\r\n    const mat4 YUV2RGB = mat4(1.1643828125, 0, 1.59602734375, -.87078515625,\r\n           1.1643828125, -.39176171875, -.81296875, .52959375,\r\n           1.1643828125, 2.017234375, 0, -1.081390625,\r\n           0, 0, 0, 1);\r\n    const mat4 YUV2RGB2 = mat4(1.000000,    1.000000,    1.000000,    0.000000,\r\n        0.000000,    -0.34414,    1.177200,    0.000000,\r\n        1.402000,    -0.71414,    0.000000,    0.000000,\r\n        0.000000,    0.000000,    0.000000,    1.000000);\r\n    void main()\r\n    {\r\n        float y = texture2D(YTexture, v_texCoord).r;\r\n        float cr = texture2D(CBTexture, v_texCoord).r;\r\n        float cb = texture2D(CRTexture, v_texCoord).r;\r\n        gl_FragColor = v_fragmentColor * vec4(y, cr, cb, 1.0) *YUV2RGB ;\r\n    }`;","/**************************************************************************\r\n * Copyright (C) 2015 ebet.com, Inc - All Rights Reserved\r\n * Unauthorized copying of this file, via any medium is strictly prohibited\r\n * Proprietary and confidential\r\n * Written by ebet.com\r\n **************************************************************************/\r\n// var ebet = {};\r\n// ebet.baccarat = {};\r\nmodule.exports = videoScoketContrl;\r\n\r\nfunction videoScoketContrl(baccarat) {\r\n  //connection status\r\n  var state = true;\r\n  var decodeWorkerUrl = \"lib/H264Decoder.js\";\r\n  var WEBSOCKET_HEADER_TYPE_VIDEO = 0x01;\r\n  var WEBSOCKET_HEADER_TYPE_AUDIO = 0x02;\r\n  var WEBSOCKET_HEADER_TYPE_UNDEFINED = 0x00;\r\n  var WEBSOCKET_HEADER_TYPE_STATUS = 0xff;\r\n  var TIME_INTERVAL = 30;\r\n  /**\r\n   * The video WebSocket handler\r\n   * WebWorker的使用\r\n   * @constructor\r\n   */\r\n  baccarat.VideoSocketController = function (url, useWorker, webgl) {\r\n    var self = this;\r\n    this._currentUrl = url;\r\n\r\n    this._currentFPS = VIDEO_FPS;\r\n    this.audioPlayer = AV.Player.fromBufferSource();\r\n    //播放定時器\r\n    if (this.timerId) {\r\n      clearInterval(this.timerId);\r\n    }\r\n    this.timerId = setInterval(function () {\r\n      self.decodeFromQueueTimer();\r\n    }, TIME_INTERVAL);\r\n    //this.audioPlayer.play();\r\n    this._useWorker = (useWorker === undefined) ? baccarat.USE_WORKER :\r\n      useWorker;\r\n    this._useGL = (webgl === undefined) ? (cc._renderType === cc._RENDER_TYPE_WEBGL) :\r\n      webgl;\r\n    this.reuseMemory = false; //\r\n    this.transferMemory = false;\r\n    this._lastBuffer = null;\r\n    this._lastTimestamp = null;\r\n    this._decoder = new Decoder({\r\n      \"rgb\": !this._useGL,\r\n      \"reuseMemory\": this.reuseMemory\r\n    }); //for closure compiler\r\n\r\n    this._statistics = new ebet.NetworkStatistics(300 * 1000 / 8); //bit rate: 307kb\r\n\r\n    //this._client = new WebSocket(url, [\"video\", \"audio\"]);\r\n    this._client = new WebSocket(url);\r\n    this._client.onopen = onOpenCallback.bind(this);\r\n    this._client.onerror = onErrorCallback.bind(this);\r\n    this.onOpen = null;\r\n    this.onClose = null;\r\n    this.onError = null;\r\n\r\n    this._decodeVideo = null;\r\n    this._videoCache = [];\r\n    this.onPictureDecoded = null;\r\n    this._packageCache = null;\r\n    this._setupWorker();\r\n  };\r\n\r\n  // the callback of the socket\r\n  var onOpenCallback = function (event) {\r\n    // cc.log('socket open video')\r\n    this._client.binaryType = \"arraybuffer\";\r\n    this._client.onmessage = onMessageCallback.bind(this);\r\n    this._client.onclose = onCloseCallback.bind(this);\r\n\r\n    if (this.onOpen)\r\n      this.onOpen(event);\r\n  };\r\n  var onCloseCallback = function (event) {\r\n    cc.log(\"The video WebSocket connection has been closed.\");\r\n    console.log(event.currentTarget.url, this._currentUrl)\r\n    if (this.onClose)\r\n      this.onClose(event);\r\n  };\r\n  var onMessageCallback = function (event) {\r\n    var messageData = new Uint8Array(event.data);\r\n    var header = this.WSHeader(messageData);\r\n    var ts;\r\n    if (header.type !== WEBSOCKET_HEADER_TYPE_UNDEFINED) {\r\n      ts = this.intFromBytes(messageData.subarray(8, 12));\r\n      this._statistics.receiveBytes(messageData.length);\r\n      messageData = new Uint8Array(event.data, 12, messageData.length - 12);\r\n    }\r\n    // cc.log(messageData)\r\n    // cc.log(this._lastBuffer)\r\n    switch (header.type) {\r\n      case WEBSOCKET_HEADER_TYPE_VIDEO:\r\n        //使用队列方式处理\r\n        //H264\r\n        if (messageData[0] === 0 && messageData[1] === 0 && messageData[2] ===\r\n          0 && messageData[3] === 1) {\r\n          if (this._lastBuffer) {\r\n            this._decodeVideo(this._lastTimestamp, this._lastBuffer);\r\n          }\r\n          this._lastBuffer = messageData;\r\n          this._lastTimestamp = ts;\r\n        } else {\r\n          cc.log(\"receive a split data\");\r\n          var newBuffer = new Uint8Array(this._lastBuffer.length +\r\n            messageData.length);\r\n          newBuffer.set(this._lastBuffer);\r\n          newBuffer.set(messageData, this._lastBuffer.length);\r\n          this._decodeVideo(ts, newBuffer);\r\n          this._lastBuffer = null;\r\n        }\r\n        break;\r\n      case WEBSOCKET_HEADER_TYPE_AUDIO:\r\n        //if (!cc.sys.isMobile)\r\n        //    this.audioPlayer.asset.source.add(messageData);\r\n        this._packageCache.pushAAC(ts, messageData);\r\n        break;\r\n      case WEBSOCKET_HEADER_TYPE_STATUS:\r\n        var msg = String.fromCharCode.apply(String, messageData);\r\n        //this._packageCache.lastPlayedTimestamp = 0;\r\n        switch (msg) {\r\n          //reset buffer\r\n          case \"video streaming server error.\":\r\n            this._lastBuffer = false;\r\n            break;\r\n        }\r\n        break;\r\n    }\r\n  };\r\n\r\n  var onErrorCallback = function (event) {\r\n    cc.log(\"the video connection has an error\", event);\r\n    if (this.onError)\r\n      this.onError(event);\r\n  };\r\n\r\n  var proto = baccarat.VideoSocketController.prototype;\r\n\r\n  proto.recycleMemory = function () {};\r\n  proto.WSHeader = function (data) {\r\n    var header = {\r\n      type: WEBSOCKET_HEADER_TYPE_UNDEFINED,\r\n      size: 0\r\n    };\r\n    if (data[0] === 0x55 && data[1] === 0x47 && data[2] === 0x49) {\r\n      switch (data[3]) {\r\n        case WEBSOCKET_HEADER_TYPE_VIDEO:\r\n          header.type = WEBSOCKET_HEADER_TYPE_VIDEO;\r\n          break;\r\n        case WEBSOCKET_HEADER_TYPE_AUDIO:\r\n          header.type = WEBSOCKET_HEADER_TYPE_AUDIO;\r\n          break;\r\n        case WEBSOCKET_HEADER_TYPE_STATUS:\r\n          header.type = WEBSOCKET_HEADER_TYPE_STATUS;\r\n          break;\r\n      }\r\n      if (header.type > 0) {\r\n        header.size = this.intFromBytes(data.subarray(4, 8));\r\n      }\r\n    }\r\n    return header;\r\n  };\r\n\r\n  proto.NALU = function (header) {\r\n    /*NALU_TYPE_SLICE    = 1,     byte: 00001   //非IDR图像的编码条带\r\n      NALU_TYPE_DPA      = 2,     byte: 00010   //编码条带数据分割块A\r\n      NALU_TYPE_DPB      = 3,     byte: 00011   //编码条带数据分割块B\r\n      NALU_TYPE_DPC      = 4,     byte: 00100   //编码条带数据分割块C\r\n      NALU_TYPE_IDR      = 5,     byte: 00101   //IDR图像的编码条带\r\n      NALU_TYPE_SEI      = 6,     byte: 00110   //增强信息（SEI）\r\n      NALU_TYPE_SPS      = 7,     byte: 00111   //序列参数集（SPS）\r\n      NALU_TYPE_PPS      = 8,     byte: 01000   //图像参数集（PPS）\r\n      NALU_TYPE_AUD      = 9,     byte: 01001\r\n      NALU_TYPE_EOSEQ    = 10,    byte: 01010\r\n      NALU_TYPE_EOSTREAM = 11,    byte: 01011\r\n      NALU_TYPE_FILL     = 12,    byte: 01100\r\n      #if (MVC_EXTENSION_ENABLE)\r\n      NALU_TYPE_PREFIX   = 14,    byte: 01110\r\n      NALU_TYPE_SUB_SPS  = 15,    byte: 01111\r\n      NALU_TYPE_SLC_EXT  = 20,    byte: 10100\r\n      NALU_TYPE_VDRD     = 24     byte: 11000   */\r\n    var tmp = (parseInt(header, 16)).toString(2);\r\n    //補齊位元數到8\r\n    if (tmp.length < 8) {\r\n      for (var i = 7; i >= tmp.length - 1; i--)\r\n        tmp = \"0\" + tmp;\r\n    }\r\n    var nalu = {\r\n      ForbiddenZero: 0,\r\n      RefIdc: 0,\r\n      UnitType: 0\r\n    };\r\n    var base = [];\r\n    //轉換為整數\r\n    for (var i in tmp) {\r\n      base[i] = parseInt(tmp[i]);\r\n    }\r\n    nalu.ForbiddenZero = base[0];\r\n    var idc = (base[1] * 2 + base[2]);\r\n    nalu.RefIdc = idc;\r\n    var idx = 3;\r\n    for (var i = 4; i >= 0; i--) {\r\n      nalu.UnitType += base[idx] << i;\r\n      idx++;\r\n    }\r\n    return nalu;\r\n  };\r\n\r\n  proto.intFromBytes = function (x) {\r\n    var val = 0;\r\n    for (var i = 0; i < x.length; ++i) {\r\n      val += x[i];\r\n      if (i < x.length - 1) {\r\n        val = val << 8;\r\n      }\r\n    }\r\n    return val;\r\n  };\r\n  proto.onRenderingBefore = function (dt) {\r\n    /*var cache = this._packageCache;\r\n      var nowTime = new Date();\r\n      var ms = nowTime.getTime();\r\n      if(!this._lastTickMs){\r\n        this._lastTickMs = ms;\r\n        return;\r\n      }\r\n      var diffTime = ms - self._lastTickMs;\r\n      var selPkg = cache.getDecodeH264Buffer(diffTime);\r\n      if (selPkg) {\r\n        this._decoder.decode(selPkg.buffer);\r\n        // if (!cc.sys.isMobile) {\r\n          var audioPkg = cache.getDecodeAACBuffer();\r\n          if (audioPkg)\r\n            this.audioPlayer.asset.source.add(audioPkg.buffer);\r\n        // }\r\n  \r\n      }*/\r\n  };\r\n\r\n  proto.decodeFromQueueTimer = function () {\r\n    var cache = this._packageCache;\r\n    var nowTime = new Date();\r\n    var ms = nowTime.getTime();\r\n    if (!this._lastTickMs) {\r\n      this._lastTickMs = ms;\r\n      return;\r\n    }\r\n    var diffTime = ms - this._lastTickMs;\r\n    this._lastTickMs = ms;\r\n    var selPkg = cache.getDecodeH264Buffer(diffTime);\r\n    if (selPkg) {\r\n      this._decoder.decode(selPkg.buffer);\r\n      var audioPkg = cache.getDecodeAACBuffer();\r\n      if (audioPkg)\r\n        this.audioPlayer.asset.source.add(audioPkg.buffer);\r\n    }\r\n  };\r\n\r\n  proto._setupWorker = function () {\r\n    var self = this;\r\n    var onPictureDecoded = function (buffer, format, width, height, infos) {\r\n      if (self.onPictureDecoded)\r\n        self.onPictureDecoded(buffer, format, width, height, infos);\r\n    };\r\n\r\n    if (this._useWorker) {\r\n      var worker = this.worker = new Worker(decodeWorkerUrl);\r\n      worker.addEventListener(\"message\", function (e) {\r\n        cc.log(e)\r\n        var data = e.data;\r\n        if (data.consoleLog) {\r\n          cc.log(data.consoleLog);\r\n          return;\r\n        }\r\n\r\n        onPictureDecoded.call(self, new Uint8Array(data.buf, 0, data.length), 0, data.width,\r\n          data.height, data.infos);\r\n      }, false);\r\n\r\n      worker.postMessage({\r\n        \"type\": \"Broadway.js - Worker init\",\r\n        \"options\": {\r\n          \"rgb\": !self._useGL,\r\n          \"reuseMemory\": self.reuseMemory //\r\n        }\r\n      });\r\n\r\n      if (this.transferMemory) {\r\n        this.decode = function (videoData, parInfo) {\r\n          // no copy\r\n          // instead we are transfering the ownership of the buffer\r\n          // dangerous!!!\r\n          worker.postMessage({\r\n            buf: videoData.buffer,\r\n            offset: videoData.byteOffset,\r\n            length: videoData.length,\r\n            info: parInfo\r\n          }, [videoData.buffer]); // Send data to our worker.\r\n        };\r\n      } else {\r\n        this._decodeVideo = function (ts, videoData, parInfo) {\r\n          // Copy the sample so that we only do a structured clone of the region of interest\r\n          var copyU8 = new Uint8Array(videoData.length);\r\n          copyU8.set(videoData, 0, videoData.length);\r\n          worker.postMessage({\r\n            buf: copyU8.buffer,\r\n            offset: 0,\r\n            length: videoData.length,\r\n            info: parInfo\r\n          }, [copyU8.buffer]); //向Worker发送数据\r\n        }\r\n      }\r\n\r\n      if (this.reuseMemory) {\r\n        this.recycleMemory = function (parArray) {\r\n          worker.postMessage({\r\n            reuse: parArray.buffer\r\n          }, [parArray.buffer]);\r\n        }\r\n      }\r\n    } else {\r\n      this._packageCache = new baccarat.H264Cache();\r\n      //todo closure compiler\r\n      this._decoder.onPictureDecoded = onPictureDecoded;\r\n      this._decodeVideo = function (ts, videoData, parInfo) {\r\n        //使用主循环来处理，使用队列缓存\r\n        //this._decoder.decode(videoData);\r\n        if (ts === 0)\r\n          this._decoder.decode(videoData);\r\n        else\r\n          this._packageCache.pushH264(ts, videoData);\r\n      };\r\n    }\r\n  };\r\n  /**\r\n  \r\n     * Set the url to handler, if url don't equal currentUrl, it will close the currentUrl connection,\r\n     * and create a new connection.\r\n     * @param {string} url\r\n     */\r\n  proto.setUrl = function (url) {\r\n    if (url !== this._currentUrl) {\r\n      this._client.close();\r\n    }\r\n\r\n    if (this._currentUrl) {\r\n      this.reOpen();\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Gets the current url string\r\n   * @returns {string}\r\n   */\r\n  proto.getUrl = function () {\r\n    return this._currentUrl;\r\n  };\r\n\r\n  /**\r\n   * Close the WebSocket connection.\r\n   */\r\n  proto.close = function () {\r\n    this._currentUrl = null;\r\n    this._client.close();\r\n    // if (this._client.readyState !== WebSocket.CLOSED || this._client.readyState !==\r\n    // WebSocket.CLOSING)\r\n    //this.audioPlayer.stop();\r\n    this._packageCache.clear();\r\n    state = true;\r\n  };\r\n\r\n  /**\r\n   * Reopen the WebSocket connection with current url string.\r\n   */\r\n  proto.reOpen = function () {\r\n    if (!this._currentUrl) {\r\n      return\r\n    }\r\n    this._client = new WebSocket(this._currentUrl);\r\n    this._client.onopen = onOpenCallback.bind(this);\r\n    this._client.onerror = onErrorCallback.bind(this);\r\n    this.audioPlayer = AV.Player.fromBufferSource();\r\n    //this.audioPlayer.play();\r\n  };\r\n\r\n  proto.getState = function () {\r\n    if (!this._client)\r\n      return -1;\r\n    return this._client.readyState;\r\n  };\r\n\r\n  proto.getNetworkStatus = function () {\r\n    return this._statistics.getNetworkStatus();\r\n  };\r\n\r\n  //-------------------video caches -----------------\r\n\r\n  baccarat.H264Package = function (timestamp, buffer) {\r\n    this.timestamp = timestamp;\r\n    this.buffer = buffer;\r\n    this.bufferSize = buffer.byteLength;\r\n    this.keyframe = (new Uint16Array(buffer.buffer, 16, 1)[0] === 34917)\r\n  };\r\n\r\n  function comparePackages(a, b) {\r\n    return a.timestamp - b.timestamp;\r\n  }\r\n\r\n  baccarat.H264Cache = function () {\r\n    this._videoCache = [];\r\n    this._audioCache = [];\r\n    this.receivedKeyframe = false;\r\n    this._deltaTime = 0;\r\n  };\r\n\r\n  var h264CacheProto = baccarat.H264Cache.prototype;\r\n\r\n  h264CacheProto.clear = function () {\r\n    this._videoCache.length = 0;\r\n    this._audioCache.length = 0;\r\n    this.receivedKeyframe = false;\r\n    this.lastPlayedTimestamp = 0;\r\n    this._deltaTime = 0;\r\n  };\r\n\r\n  h264CacheProto.sortCaches = function () {\r\n    this._videoCache.sort(comparePackages);\r\n    this._audioCache.sort(comparePackages);\r\n  };\r\n  var VIDEO_FPS = 1000 / 30;\r\n  var CACHE_FRAMES = 5;\r\n  var SKIP_KEYFRAMES = 120; //120幀 才需要跳幀\r\n  h264CacheProto.getDecodeH264Buffer = function (dt) {\r\n    this._deltaTime += dt;\r\n    if (this._deltaTime < this._currentFPS)\r\n      return null;\r\n    this._deltaTime %= this._currentFPS;\r\n    var videoCache = this._videoCache;\r\n    if (videoCache.length < CACHE_FRAMES) //cache frames.\r\n      return null;\r\n    if (videoCache.length == CACHE_FRAMES && state) {\r\n      state = false;\r\n    }\r\n    videoCache.sort(comparePackages);\r\n    var frame = this._searchVideoKeyframe();\r\n    if (!frame) {\r\n      frame = videoCache.shift()\r\n    }\r\n\r\n    var range = 0;\r\n    if (frame.timestamp < this.lastPlayedTimestamp) {\r\n      return null;\r\n    }\r\n    if (videoCache.length < 5) {\r\n      range = 0;\r\n    } else if (videoCache.length < 10) {\r\n      range = VIDEO_FPS * 0.1;\r\n    } else if (videoCache.length < 15) {\r\n      range = VIDEO_FPS * 0.25;\r\n    } else if (videoCache.length < 20) {\r\n      range = VIDEO_FPS * 0.3;\r\n    } else if (videoCache.length < 30) {\r\n      range = VIDEO_FPS * 0.4;\r\n    } else if (videoCache.length < 60) {\r\n      range = VIDEO_FPS * 0.5;\r\n    } else if (videoCache.length < 100) {\r\n      range = VIDEO_FPS * 0.6;\r\n    } else {\r\n      range = VIDEO_FPS * 0.7;\r\n    }\r\n    this._currentFPS = VIDEO_FPS - range;\r\n    this.lastPlayedTimestamp = frame.timestamp;\r\n    return frame;\r\n  };\r\n\r\n  //如果延遲了 就跳楨到關鍵keyFrame  如果該keyFrame 在 skip內 則先演到該keyFrame 再跳到下一個keyFrame\r\n  h264CacheProto._searchVideoKeyframe = function () {\r\n    var videoCache = this._videoCache;\r\n    if (videoCache.length < SKIP_KEYFRAMES)\r\n      return null;\r\n\r\n    var selIdx = -1;\r\n    for (var i = 0; i < videoCache.length; i++) {\r\n      if (videoCache[i].keyframe)\r\n        selIdx = i;\r\n    }\r\n    if (selIdx !== -1) {\r\n      if (selIdx > SKIP_KEYFRAMES) {\r\n        var selPkg = videoCache[selIdx];\r\n        videoCache.splice(0, selIdx + 1);\r\n        return selPkg;\r\n      }\r\n    }\r\n    return null;\r\n  };\r\n\r\n  // 推進來時, 如果在list中找到時 就不做事,\r\n  // 如收過keyFrame 則當ts > lastTs pushPackage\r\n  //                  ts < lastTs (收到過時的產物) 則 reset TimeStamp\r\n  // 如無this.receivedKeyframe 就創建package 如有keyFrame 則更改flag 跟lastPlayerTs\r\n  h264CacheProto.pushH264 = function (timestamp, buffer) {\r\n    if (!this.getPackageByTimestamp(this._videoCache, timestamp)) {\r\n      if (this.receivedKeyframe) {\r\n        if (timestamp > this.lastPlayedTimestamp)\r\n          this._videoCache.push(new baccarat.H264Package(timestamp, buffer));\r\n        else {\r\n          if (this.lastPlayedTimestamp - timestamp > 2000)\r\n            this.lastPlayedTimestamp = 0; //reset, because timestamp has been reset.\r\n          // cc.log(\"lose \" + timestamp, this.lastPlayedTimestamp);\r\n        }\r\n      } else {\r\n        var selPkg = new baccarat.H264Package(timestamp, buffer);\r\n        if (selPkg.keyframe) {\r\n          this.receivedKeyframe = true;\r\n          this.lastPlayedTimestamp = timestamp;\r\n          this._videoCache.push(selPkg);\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  h264CacheProto.getPackageByTimestamp = function (packages, timestamp) {\r\n    if (!packages || packages.length === 0)\r\n      return null;\r\n    for (var i = 0; i < packages.length; i++) {\r\n      if (packages[i].timestamp === timestamp) {\r\n        return packages[i];\r\n      }\r\n    }\r\n    return null;\r\n  };\r\n\r\n  // 從audioCacge中loop 直到找到timeStamp > lastTs return frame\r\n  h264CacheProto.getDecodeAACBuffer = function () {\r\n    var audioCache = this._audioCache;\r\n    var lastPlayedTimestamp = this.lastPlayedTimestamp;\r\n    if (audioCache.length === 0)\r\n      return null;\r\n    while (audioCache.length !== 0) {\r\n      var frame = audioCache[0];\r\n      if (frame == null) {\r\n        return null;\r\n      }\r\n      //時間到了則播放\r\n      if (frame.timestamp - lastPlayedTimestamp >= 0 && frame.timestamp - lastPlayedTimestamp <= VIDEO_FPS) {\r\n        return audioCache.shift();\r\n        //舊的音頻直接丟棄, 避免音頻不同步\r\n      } else if (frame.timestamp < lastPlayedTimestamp) {\r\n        audioCache.shift();\r\n      }\r\n      return null;\r\n    }\r\n    //audioCache.sort(comparePackages);\r\n    /*while (audioCache.length !== 0) {\r\n      var frame = audioCache.shift();\r\n      if (frame.timestamp > this.lastPlayedTimestamp)\r\n        return frame;\r\n    }*/\r\n    return null;\r\n  };\r\n\r\n  h264CacheProto.skipAACBuffer = function (timestamp) {\r\n    var audioCache = this._audioCache;\r\n    if (audioCache.length === 0)\r\n      return;\r\n    audioCache.sort(comparePackages);\r\n    var idx = -1;\r\n    for (var i = 0; i < audioCache.length; i++) {\r\n      if (audioCache[i].timestamp > timestamp) {\r\n        idx = i;\r\n        break;\r\n      }\r\n    }\r\n    if (idx > 0)\r\n      audioCache.splice(0, idx)\r\n  };\r\n\r\n  h264CacheProto.pushAAC = function (timestamp, buffer) {\r\n    if (!this.getPackageByTimestamp(this._audioCache, timestamp)) {\r\n      var pkg = new baccarat.H264Package(timestamp, buffer);\r\n      this._audioCache.push(pkg);\r\n    }\r\n  };\r\n}","cc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        videoSprite: cc.Node,\r\n    },\r\n    initVideo() {},\r\n    onLoad() {\r\n        if (cc.sys.isBrowser && !ebet.baccarat.H264Sprite) {\r\n            (require('AAC'))(window); //初始化web端的直播视频\r\n            (require('videoSocketController'))(ebet.baccarat); //初始化web端的直播视频\r\n          //  (require('H264Sprite'))(ebet.baccarat); //初始化web端的直播视频\r\n        }\r\n        let videoUrl = 'ws://ws4.jiasula.info:8081/lobbyB/B15/19148936/6eca0113e34c41c1f45a5f9eaf13429c';\r\n        this.playVideo(this.videoSprite, videoUrl);\r\n    },\r\n    playVideo(videoSprite, url) {\r\n        ebet.baccarat._currenturl = url;\r\n        videoSprite.addComponent(ebet.baccarat.H264Sprite);\r\n    },\r\n    onDestroy() {\r\n\r\n    },\r\n});"],"sourceRoot":"/source/","file":"project.js"}