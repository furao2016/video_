{"version":3,"sources":["..\\..\\..\\..\\..\\assets\\Scripts\\Manager/assets\\Scripts\\Manager\\lottery_viewComponentManager.js"],"names":["curZIndex","ViewOpenEventKey","ViewCloseEventKey","ViewComponentManager","panelDic","canvas","curOpenPanelName","ChangeScene","panelname","obj","callback","panel","cc","instantiate","find","parent","setPosition","view","getComponent","Init","name","Show","node","zIndex","Hide","GlobalMsg","getInstance","Send","removeFromParent","self","openPanel","OpenPanel","resCall","err","key","log","OpenByPrefab","lottery_BaseResLoad","LoadByKey","DeletePanel","element","active","onClose","onDestroy","tag","Register","Unregister","SingletonBase"],"mappings":"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","file":"lottery_viewComponentManager.js","sourceRoot":"..\\..\\..\\..\\..\\assets\\Scripts\\Manager","sourcesContent":["import SingletonBase from \"../Singleton/SingletonBase\";\r\nimport GlobalMsg from \"../Core/Event/lottery_GlobalMsg\";\r\nimport lottery_BaseResLoad from 'lottery_BaseResLoad'\r\n\r\nlet curZIndex = 0\r\nlet ViewOpenEventKey = \"ViewOpenEventKey\"\r\nlet ViewCloseEventKey = \"ViewCloseEventKey\"\r\n\r\nexport default class ViewComponentManager extends SingletonBase {\r\n    constructor() {\r\n        super()\r\n    }\r\n    static _onNewObject() {\r\n        return new ViewComponentManager()\r\n    }\r\n    _onDestroyObject() {\r\n        this.ChangeScene()\r\n    }\r\n\r\n    panelDic = {}//缓存面板  key : 界面名字 value : viewBaseComponent对象\r\n    canvas = null\r\n    curOpenPanelName = \"\"\r\n    /**根据加载好的预设实例化界面\r\n     * conpoment 继承 viewBase 的类对象\r\n     */\r\n    OpenByPrefab(panelname, obj, callback) {\r\n        var panel = cc.instantiate(obj);\r\n        if (this.canvas == null)\r\n            this.canvas = cc.find(\"Canvas\");\r\n        panel.parent = this.canvas;\r\n        panel.setPosition(0, 0);\r\n        var view = panel.getComponent('lottery_viewBaseComponent');\r\n        this.panelDic[panelname] = view;\r\n        view.Init(panel, panelname);\r\n        if (callback != null && typeof (callback) == \"function\")\r\n            callback(view);\r\n    }\r\n    /**\r\n     * 打开面板\r\n     * @param {*} name 面板名字\r\n     * @param {*} model 打开模式\r\n     */\r\n    OpenPanel(name) {\r\n        var panel = this.panelDic[name];\r\n        panel.Show();\r\n        panel.node.zIndex = curZIndex;\r\n        curZIndex++;\r\n        this.curOpenPanelName = name;\r\n    }\r\n    /**\r\n     * 关闭面板\r\n     * @param {*} name 面板名字\r\n     */\r\n    ClosePanel(name) {\r\n        var view = this.panelDic[name]\r\n        view.Hide();\r\n        curZIndex--;\r\n        view = this.panelDic[this.curOpenPanelName]\r\n        view.node.zIndex = curZIndex;\r\n        curZIndex++;\r\n        GlobalMsg.getInstance().Send(ViewCloseEventKey, name)\r\n    }\r\n\r\n    /**\r\n     * 删除面板\r\n     * @param {*} name 面板名字\r\n     */\r\n    DeletePanel(name) {\r\n        var view = this.panelDic[name]\r\n        // view.Hide();\r\n        if (view && view.node) {\r\n            view.node.removeFromParent(false);\r\n            delete this.panelDic[name];\r\n        }\r\n\r\n        curZIndex--;\r\n        view = this.panelDic[this.curOpenPanelName]\r\n        // view.node.zIndex = curZIndex;\r\n        curZIndex++;\r\n        GlobalMsg.getInstance().Send(ViewCloseEventKey, name)\r\n    }\r\n\r\n    /*------------------------对外接口---------------------------*/\r\n    /**\r\n     * 打开面板\r\n     * panelname:面板名称\r\n     * component:面板对应的脚本名 继承 viewBase\r\n     * callback:打开面板后的回调方法\r\n     * model:打开模式\r\n     */\r\n    Open(panelname, callback) {\r\n        var self = this;\r\n        var openPanel = function (node) {\r\n            self.OpenPanel(panelname);\r\n            if (callback != null && typeof (callback) == \"function\")\r\n                callback(node);\r\n        }\r\n\r\n        if (this.panelDic[panelname] == null) {\r\n            var resCall = function (err, obj, key) {\r\n                if (err) {\r\n                    cc.log(\"加载失败 err:\" + err)\r\n                    callback()\r\n                }\r\n                else {\r\n                    self.OpenByPrefab(panelname, obj, openPanel);\r\n                }\r\n            };\r\n            lottery_BaseResLoad.getInstance().LoadByKey(panelname, \"Prefab/\" + panelname, resCall);\r\n        }\r\n        else {\r\n            openPanel(this.panelDic[panelname]);\r\n        }\r\n    }\r\n    //关闭面板，预留，后期会增加关闭面板后的一些处理逻辑\r\n    Close(panelname) {\r\n        //关闭当前面板\r\n        // this.ClosePanel(panelname);\r\n        this.DeletePanel(panelname);\r\n    }\r\n    CloseAllView() {\r\n        for (const key in this.panelDic) {\r\n            const element = this.panelDic[key];\r\n            if (element.node.active) {\r\n                element.onClose();\r\n            }\r\n        }\r\n    }\r\n    /**切换场景，所有界面会被销毁，这个时候需要清理一次数据，以及调用所有界面的ondestroy函数 */\r\n    ChangeScene() {\r\n        for (const key in this.panelDic) {\r\n            const element = this.panelDic[key];\r\n            element.onDestroy();\r\n        }\r\n        this.panelDic = {}\r\n        this.canvas = null\r\n        this.curOpenPanelName = \"\"\r\n    }\r\n    /**注册关闭界面监听事件，主要用于界面在关闭时，控制层收到消息 帮助控制层和界面层脱偶 */\r\n    RegisterClosePanelEvent(callback, tag) {\r\n        GlobalMsg.getInstance().Register(ViewCloseEventKey, callback, tag)\r\n    }\r\n    UnRegisterClosePanelEvent(tag) {\r\n        GlobalMsg.getInstance().Unregister(ViewCloseEventKey, tag)\r\n    }\r\n    RegisterOpenPanelEvent(callback, tag) {\r\n        GlobalMsg.getInstance().Register(ViewOpenEventKey, callback, tag)\r\n    }\r\n    UnRegisterOpenPanelEvent(tag) {\r\n        GlobalMsg.getInstance().Unregister(ViewOpenEventKey, tag)\r\n    }\r\n}"]}