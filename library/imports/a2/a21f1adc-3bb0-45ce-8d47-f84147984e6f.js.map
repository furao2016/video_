{"version":3,"sources":["..\\..\\..\\..\\..\\assets\\Scripts\\Singleton/assets\\Scripts\\Singleton\\SingletonBase.js"],"names":["allowNew","SingletonBase","Error","_singleInstance","_onNewObject","_AddToCoreMgr","CoreMgr","RegisterSingleton","ret","instance","_onDestroyObject","_doDestroyInstance","lottery_CoreMgr"],"mappings":";;;;;;;;;;;;;;;AAAA;;;;;;;;AAEA,IAAIA,WAAW,KAAf;IACqBC;AAIjB,6BAAc;AAAA;;AACV,YAAI,CAACD,QAAL,EACI,MAAM,IAAIE,KAAJ,2BAAN;AACP;;AAED;;;;;;;;;AA4CA;;;2CAGmB;AACf;;AAEA;AACA;AACH;;;sCAjDoB;AACjB,gBAAI,CAAC,KAAKC,eAAV,EAA2B;AACvBH,2BAAW,IAAX;AACA,qBAAKG,eAAL,GAAuB,KAAKC,YAAL,EAAvB;AACA,qBAAKC,aAAL;AACAL,2BAAW,KAAX;AACH;;AAED,mBAAO,KAAKG,eAAZ;AACH;;AAED;;;;;;uCAGsB;AAClB,kBAAM,IAAID,KAAJ,sBAAN;AACH;AACD;;;;;;wCAGuB;AACnBI,sCAAQC,iBAAR,CAA0B,IAA1B;AACH;;;6CAC2B;AACxB,gBAAIC,MAAM,KAAV;AACA,gBAAI,KAAKL,eAAT,EAA0B;AACtBK,sBAAM,IAAN;AACA,oBAAIC,WAAW,KAAKN,eAApB;AACA,qBAAKA,eAAL,GAAuB,IAAvB;AACAM,yBAASC,gBAAT;AACH;AACD,mBAAOF,GAAP;AACH;AACD;;;;;;0CAIyB;AACrB,mBAAO,KAAKG,kBAAL,EAAP;AACH;;;;YAjDMR,kBAAkB,aAClBS,kBAAkB;kBAHRX","file":"SingletonBase.js","sourceRoot":"..\\..\\..\\..\\..\\assets\\Scripts\\Singleton","sourcesContent":["import CoreMgr from \"../Core/lottery_CoreMgr\";\r\n\r\nlet allowNew = false\r\nexport default class SingletonBase {\r\n\r\n    static _singleInstance = null\r\n    static lottery_CoreMgr = null\r\n    constructor() {\r\n        if (!allowNew)\r\n            throw new Error(`Can't new on singleton!`)\r\n    }\r\n\r\n    /**\r\n     * 获取单例实例\r\n     */\r\n    static getInstance() {\r\n        if (!this._singleInstance) {\r\n            allowNew = true\r\n            this._singleInstance = this._onNewObject()\r\n            this._AddToCoreMgr()\r\n            allowNew = false\r\n        }\r\n\r\n        return this._singleInstance\r\n    }\r\n\r\n    /**\r\n     * 创建实例的静态回调方法。由子类重写，并返回具体类型的对象\r\n     */\r\n    static _onNewObject() {\r\n        throw new Error(`must be implement!`)\r\n    }\r\n    /**\r\n     * 添加对象致CoreMgr管理类中去\r\n     */\r\n    static _AddToCoreMgr() {\r\n        CoreMgr.RegisterSingleton(this)\r\n    }\r\n    static _doDestroyInstance() {\r\n        let ret = false\r\n        if (this._singleInstance) {\r\n            ret = true\r\n            let instance = this._singleInstance\r\n            this._singleInstance = null\r\n            instance._onDestroyObject()\r\n        }\r\n        return ret\r\n    }\r\n    /** \r\n     * 销毁对象的方法\r\n     */\r\n\r\n    static destroyInstance() {\r\n        return this._doDestroyInstance()\r\n    }\r\n\r\n    /**\r\n     * 实例方法。当单例对象被销毁时被调用的回调方法\r\n     */\r\n    _onDestroyObject() {\r\n        // here is your code...\r\n\r\n        // 需要在结尾调用父类的此方法\r\n        //super._onDestroyObject()\r\n    }\r\n}\r\n"]}