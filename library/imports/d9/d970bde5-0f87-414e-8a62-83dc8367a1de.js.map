{"version":3,"sources":["..\\..\\..\\..\\..\\..\\assets\\Scripts\\Core\\Timer/assets\\Scripts\\Core\\Timer\\lottery_TimeMgr.js"],"names":["TimerManager","timerList","timerID","isOpenTimer","timerIndex","activeTimerIDDic","intervalID","intervalTime","clearInterval","clearTimer","length","timerobj","isPause","timer","delay","callback","repeat","isEndless","splice","interval","self","getTimerID","bind","id","push","curRepeat","instance","cc","game","config","frameRate","setInterval","updateTimer","SingletonBase"],"mappings":"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","file":"lottery_TimeMgr.js","sourceRoot":"..\\..\\..\\..\\..\\..\\assets\\Scripts\\Core\\Timer","sourcesContent":["import SingletonBase from \"../../Singleton/SingletonBase\";\r\n\r\n/*\r\n计时器管理类\r\n*/\r\nexport default class TimerManager extends SingletonBase {\r\n\r\n    timerList = []\r\n    timerID = 0\r\n    isOpenTimer = false\r\n    timerIndex = false\r\n    activeTimerIDDic = {}\r\n    intervalID = 0\r\n    intervalTime = 0\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n    \r\n    static _onNewObject() {\r\n        let instance = new TimerManager();\r\n        instance.intervalTime = 1 / cc.game.config.frameRate\r\n        instance.intervalID = setInterval(instance.updateTimer.bind(instance), instance.intervalTime * 1000)\r\n        return instance\r\n    }\r\n    _onDestroyObject() {\r\n        clearInterval(this.intervalID)\r\n        this.clearTimer()\r\n    }\r\n    updateTimer() {\r\n        if (!this.isOpenTimer)\r\n            return;\r\n        this.timerIndex = this.timerList.length - 1;\r\n        for (; this.timerIndex >= 0; this.timerIndex--) {\r\n            var timerobj = this.timerList[this.timerIndex];\r\n            if (timerobj.isPause)\r\n                continue\r\n            timerobj.timer += this.intervalTime;\r\n            if (timerobj.timer >= timerobj.delay) {\r\n                timerobj.callback();\r\n                timerobj.repeat--;\r\n                if (!timerobj.isEndless && timerobj.repeat <= 0) {\r\n                    this.timerList.splice(this.timerIndex, 1)\r\n                    if (this.timerList.length <= 0) {\r\n                        this.isOpenTimer = false;\r\n                    }\r\n                }\r\n                else {\r\n                    timerobj.timer = timerobj.timer - timerobj.interval;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    /*\r\n    获取计时器ID，内部调用 计算方式有待优化\r\n    */\r\n    getTimerID() {\r\n        this.timerID = this.timerID + 1;\r\n        if (this.timerID >= 999999999)\r\n            this.timerID = 1;\r\n        while (this.activeTimerIDDic[this.timerID]) {\r\n            this.timerID = this.timerID + 1;\r\n            if (this.timerID >= 999999999)\r\n                this.timerID = 1;\r\n        }\r\n        return this.timerID;\r\n    }\r\n    /*\r\n    打开一个计时器\r\n    callback 回调函数\r\n    interval 间隔时间\r\n    repeat 重复次数 <=0 无限次数 >0 重复repeat次\r\n    delay 延时时间\r\n    self 注册对象\r\n\r\n    return 计时器的ID\r\n    */\r\n    openTimer(callback, interval, repeat, delay, self) {\r\n        var timer = {\r\n            \"id\": this.getTimerID(),\r\n            \"callback\": callback.bind(self),\r\n            \"interval\": interval,\r\n            \"repeat\": repeat,\r\n            \"curRepeat\": repeat,\r\n            \"delay\": delay,\r\n            \"isEndless\": repeat > 0 ? false : true,\r\n            \"timer\": 0,\r\n            \"isPause\": false\r\n        };\r\n        if (repeat <= 0) {\r\n            this.activeTimerIDDic[timer.id] = true\r\n        }\r\n        this.timerList.push(timer);\r\n        if (!this.isOpenTimer)\r\n            this.isOpenTimer = true;\r\n        return timer.id;\r\n    }\r\n    /*\r\n    关闭一个计时器\r\n    */\r\n    closeTimer(id) {\r\n        this.timerIndex = this.timerList.length - 1;\r\n        for (; this.timerIndex >= 0; this.timerIndex--) {\r\n            var timerobj = this.timerList[this.timerIndex]\r\n            if (timerobj.id === id) {\r\n                this.timerList.splice(this.timerIndex, 1);\r\n                break;\r\n            }\r\n        }\r\n        if (this.activeTimerIDDic[id]) {\r\n            delete this.activeTimerIDDic[id]\r\n        }\r\n    }\r\n    /*\r\n    暂停一个计时器\r\n    */\r\n    pauseTimer(id) {\r\n        this.timerIndex = this.timerList.length - 1;\r\n        for (; this.timerIndex >= 0; this.timerIndex--) {\r\n            var timerobj = this.timerList[this.timerIndex]\r\n            if (timerobj.id === id) {\r\n                timerobj.isPause = true;\r\n            }\r\n        }\r\n    }\r\n    /*\r\n    恢复一个计时器\r\n    */\r\n    resumeTimer(id) {\r\n        this.timerIndex = this.timerList.length - 1;\r\n        for (; this.timerIndex >= 0; this.timerIndex--) {\r\n            var timerobj = this.timerList[this.timerIndex]\r\n            if (timerobj.id === id) {\r\n                timerobj.isPause = false;\r\n            }\r\n        }\r\n    }\r\n    /*\r\n    重置一个计时器主要是把计时增量置0，重新开始计时，有次数限制的 重置次数，达到复用的目的\r\n    重置计时器的各项数据  不传入的为之前的默认值\r\n    */\r\n    resetTImer(id, delay, repeat, interval) {\r\n        this.timerIndex = this.timerList.length - 1;\r\n        for (; this.timerIndex >= 0; this.timerIndex--) {\r\n            var timerobj = this.timerList[this.timerIndex]\r\n            if (timerobj.id === id) {\r\n                timerobj.repeat = repeat ? repeat : timerobj.curRepeat;\r\n                timerobj.timer = 0;\r\n                timerobj.delay = delay ? delay : timerobj.delay;\r\n                timerobj.interval = interval ? interval : timerobj.interval;\r\n            }\r\n        }\r\n    }\r\n    clearTimer() {\r\n        this.isOpenTimer = false;\r\n        this.timerList = [];\r\n    }\r\n}"]}