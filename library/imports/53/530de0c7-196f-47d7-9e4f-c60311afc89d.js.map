{"version":3,"sources":["..\\..\\..\\..\\..\\assets\\Scripts\\Manager/assets\\Scripts\\Manager\\lottery_SocketManager.js"],"names":["SocketEnum","require","ReConnectTimer","socktIP","socketPort","socketParam","SocketManager","heartTime","heartTimerID","reConnectTimerID","isreconnect","curSocketState","none","socketEventDic","loadingShowFunc","loadingHideFunc","reConnectSocketNum","success","BaseSocketIns","close","msg","data","JSON","parse","msgId","codeBack","SockMsgDefine","UP","Heart","code","state","lottery_TimeMgr","getInstance","closeTimer","error","LongConnect","Disconnect","ReConnect","HeartClose","openTimer","Send","stringify","func","Connect","bind","ip","port","param","init","send","id","callback","self","show","hide","_instance","lottery_BaseSocket","RegestMessageEvent","OnMessage","RegisterConnectEvent","OnConnect","SingletonBase"],"mappings":"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","file":"lottery_SocketManager.js","sourceRoot":"..\\..\\..\\..\\..\\assets\\Scripts\\Manager","sourcesContent":["import SingletonBase from \"SingletonBase\";\r\nimport lottery_BaseSocket from 'lottery_BaseSocket'\r\nimport lottery_TimeMgr from 'lottery_TimeMgr'\r\n\r\nlet SocketEnum = require(\"lottery_SocketEnum\");\r\nlet ReConnectTimer = 5;//重连间隔时间 单位 秒\r\nimport SockMsgDefine from \"lottery_SockMsgDefine\";\r\n\r\nlet socktIP = \"192.168.0.158\";\r\nlet socketPort = \"7050\";\r\nlet socketParam = \"\";\r\nexport default class SocketManager extends SingletonBase {\r\n    BaseSocketIns\r\n    heartTime = 25//心跳包间隔时间 单位 秒\r\n    heartTimerID = 0//心跳包计时器ID \r\n    reConnectTimerID = 0\r\n    isreconnect = false\r\n    curSocketState = SocketEnum.none//当前socket状态\r\n    socketEventDic = {}\r\n    loadingShowFunc = null\r\n    loadingHideFunc = null\r\n    reConnectSocketNum = 0  //断线重连次数\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    static _onNewObject() {\r\n        let _instance = new SocketManager();\r\n        _instance.BaseSocketIns = new lottery_BaseSocket();\r\n        _instance.BaseSocketIns.RegestMessageEvent(_instance.OnMessage.bind(_instance));\r\n        _instance.BaseSocketIns.RegisterConnectEvent(_instance.OnConnect.bind(_instance))\r\n        return _instance\r\n    }\r\n    _onDestroyObject() {\r\n        if (this.curSocketState === SocketEnum.success)\r\n            this.BaseSocketIns.close()\r\n    }\r\n\r\n    /**获取消息*/\r\n    OnMessage(msg) {\r\n        let data = null;\r\n        if (msg.data) {\r\n            data = JSON.parse(msg.data);\r\n        }\r\n\r\n        let msgId = data.codeBack;\r\n        if (msgId != SockMsgDefine.UP.Heart) {//心跳包消息处理\r\n\r\n        }\r\n        if (data.code == 1) {//正确返回处理\r\n            this.socketEventDic[msgId] && this.socketEventDic[msgId](data.data)\r\n        }\r\n        else if (data.code == 2) {//错误信息返回\r\n            \r\n        }\r\n    }\r\n    /**\r\n     * 连接状态改变函数\r\n     * @param {*} state \r\n     */\r\n    OnConnect(state) {\r\n        switch (state) {\r\n            case SocketEnum.success:    //连接成功\r\n                this.loadingHideFunc && this.loadingHideFunc()\r\n                this.reConnectSocketNum = 0;    //重连次数\r\n                this.isreconnect = false;\r\n                if (this.reConnectTimerID !== 0) {\r\n                    lottery_TimeMgr.getInstance().closeTimer(this.reConnectTimerID);\r\n                    this.reConnectTimerID = 0;\r\n                }\r\n                //this.HeartOpen();//开启心跳包\r\n                break;\r\n            case SocketEnum.error:\r\n            case SocketEnum.close:\r\n                //this.HeartClose();//关闭心跳包\r\n                this.socketEventDic[SockMsgDefine.LongConnect.Disconnect] && this.socketEventDic[SockMsgDefine.LongConnect.Disconnect]();\r\n                this.ReConnect();//重连socket\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        this.curSocketState = state;\r\n    }\r\n    /**打开心跳包*/\r\n    HeartOpen() {\r\n        this.HeartClose();\r\n        this.heartTimerID = lottery_TimeMgr.getInstance().openTimer(() => {\r\n            let msg = {};\r\n            msg.codeBack = SockMsgDefine.UP.Heart;\r\n            msg.data = {};\r\n            this.Send(JSON.stringify(msg), false);\r\n        }, this.heartTime, -1, this.heartTime)\r\n    }\r\n    /**关闭心跳包*/\r\n    HeartClose() {\r\n        if (this.heartTimerID !== 0) {\r\n            lottery_TimeMgr.getInstance().closeTimer(this.heartTimerID);\r\n        }\r\n    }\r\n    /**重连socket */\r\n    ReConnect() {\r\n        this.loadingShowFunc && this.loadingShowFunc()\r\n        if (this.curSocketState == SocketEnum.success)\r\n            this.BaseSocketIns.close();\r\n        var func = function () {\r\n            this.reConnectSocketNum = this.reConnectSocketNum + 1;\r\n            this.reConnectTimerID = 0;\r\n            if (this.reConnectSocketNum >= 3) {\r\n                this.reConnectSocketNum = 0;\r\n                lottery_TimeMgr.getInstance().closeTimer(this.reConnectTimerID);\r\n                this.close();\r\n                return\r\n            }\r\n            this.Connect(socktIP, socketPort, socketParam);\r\n        }\r\n        if (this.reConnectTimerID === 0)\r\n            this.reConnectTimerID = lottery_TimeMgr.getInstance().openTimer(func.bind(this), 0, 1, ReConnectTimer);\r\n    }\r\n    /*--------------------------------------对外接口--------------------------------------*/\r\n    /**连接*/\r\n    Connect(ip, port, param) {\r\n        socktIP = ip || socktIP;\r\n        socketPort = port || socketPort;\r\n        socketParam = param || socketParam;\r\n        if (param && param != \"\") {\r\n            this.BaseSocketIns.init(socktIP, socketPort, socketParam)\r\n        }\r\n        else {\r\n            //TODO: 没有设定连接参数的提示代码\r\n        }\r\n    }\r\n    /**发送数据  发送成功返回true，失败返回false*/\r\n    Send(data) {\r\n        if (this.curSocketState && this.curSocketState != SocketEnum.success) {\r\n            return false;\r\n        }\r\n        this.BaseSocketIns.send(data);\r\n        return true\r\n    }\r\n    /**事件注册 */\r\n    On(id, callback, self) {\r\n        this.socketEventDic[id] = self ? callback.bind(self) : callback;\r\n    }\r\n    close() {\r\n        this.HeartClose();\r\n        this.BaseSocketIns.close();\r\n    }\r\n    SetLoadingShowAndHideFunc(show, hide) {\r\n        this.loadingShowFunc = show\r\n        this.loadingHideFunc = hide\r\n    }\r\n}"]}