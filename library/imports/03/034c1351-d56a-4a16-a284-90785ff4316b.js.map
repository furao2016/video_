{"version":3,"sources":["..\\..\\..\\..\\..\\..\\assets\\Scripts\\Core\\Event/assets\\Scripts\\Core\\Event\\lottery_GlobalMsg.js"],"names":["GlobalMsg","m_Callbacks","msgkey","callback","uuid","push","error","cc","log","js","getClassName","message","index","length","element","splice","args","SingletonBase"],"mappings":";;;;;;;;;;;;;AAAA;;;;;;;;;;;;AAEA;;;;IAIqBA;;;AAIjB,yBAAc;AAAA;;AAAA;;AAAA,cAFdC,WAEc,GAFA,EAEA;AAAA;AAEb;;;;2CAMkB;AACf,iBAAKA,WAAL,GAAmB,EAAnB;AACH;AACD;;;;iCACSC,QAAQC,UAAUC,MAAM;AAC7B,gBAAI;AACA,oBAAI,KAAKH,WAAL,CAAiBC,MAAjB,KAA4B,IAAhC,EAAsC;AAClC,yBAAKD,WAAL,CAAiBC,MAAjB,IAA2B,EAA3B;AACH;AACD,qBAAKD,WAAL,CAAiBC,MAAjB,EAAyBG,IAAzB,CAA8B;AAC1B,gCAAYF,QADc;AAE1B,4BAAQC;AAFkB,iBAA9B,EAJA,CAOM;AACT,aARD,CAQE,OAAOE,KAAP,EAAc;AACZC,mBAAGC,GAAH,CAAOD,GAAGE,EAAH,CAAMC,YAAN,CAAmB,IAAnB,IAA2B,GAA3B,GAAiCJ,MAAMK,OAA9C;AACH;AACJ;AACD;;;;;;mCAGWT,QAAQE,MAAM;AACrB,gBAAI;AACA,oBAAI,KAAKH,WAAL,CAAiBC,MAAjB,KAA4B,IAAhC,EAAsC;AAClCK,uBAAGC,GAAH,CAAO,gBAAgBN,MAAhB,GAAyB,2BAAhC;AACA;AACH;AACD,oBAAIE,IAAJ,EAAU;AACN,yBAAK,IAAIQ,QAAQ,CAAjB,EAAoBA,QAAQ,KAAKX,WAAL,CAAiBC,MAAjB,EAAyBW,MAArD,EAA6DD,OAA7D,EAAsE;AAClE,4BAAME,UAAU,KAAKb,WAAL,CAAiBC,MAAjB,EAAyBU,KAAzB,CAAhB;AACA,4BAAIE,QAAQV,IAAR,IAAgBA,IAApB,EAA0B;AACtB,iCAAKH,WAAL,CAAiBC,MAAjB,EAAyBa,MAAzB,CAAgCH,KAAhC,EAAuC,CAAvC;AACA;AACH;AACJ;AACJ,iBARD,MASK;AACD,2BAAO,KAAKX,WAAL,CAAiBC,MAAjB,CAAP;AACH;AACJ,aAjBD,CAiBE,OAAOI,KAAP,EAAc;AACZC,mBAAGC,GAAH,CAAOD,GAAGE,EAAH,CAAMC,YAAN,CAAmB,IAAnB,IAA2B,GAA3B,GAAiCJ,MAAMK,OAA9C;AACH;AACJ;AACD;;;;;;;6BAIKT,QAAQc,MAAM;AACf,gBAAI,KAAKf,WAAL,CAAiBC,MAAjB,KAA4B,IAAhC,EAAsC;AAClCK,mBAAGC,GAAH,CAAO,sCAAsCN,MAAtC,GAA+C,mCAAtD;AACA;AACH;AACD,iBAAK,IAAIU,QAAQ,CAAjB,EAAoBA,QAAQ,KAAKX,WAAL,CAAiBC,MAAjB,EAAyBW,MAArD,EAA6DD,OAA7D,EAAsE;AAClE,oBAAME,UAAU,KAAKb,WAAL,CAAiBC,MAAjB,EAAyBU,KAAzB,CAAhB;AACA,oBAAIE,QAAQX,QAAZ,EAAsB;AAClBW,4BAAQX,QAAR,CAAiBa,IAAjB;AACH;AACJ;AACJ;;;uCA7DqB;AAClB,mBAAO,IAAIhB,SAAJ,EAAP;AACH;;;;EAVkCiB;;kBAAlBjB","file":"lottery_GlobalMsg.js","sourceRoot":"..\\..\\..\\..\\..\\..\\assets\\Scripts\\Core\\Event","sourcesContent":["import SingletonBase from \"../../Singleton/SingletonBase\";\r\n\r\n/**\r\n * 消息处理中心\r\n * 当前是同步机制\r\n */\r\nexport default class GlobalMsg extends SingletonBase {\r\n\r\n    m_Callbacks = {}\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    static _onNewObject() {\r\n        return new GlobalMsg()\r\n    }\r\n\r\n    _onDestroyObject() {\r\n        this.m_Callbacks = {}\r\n    }\r\n    /**注册单个监听 */\r\n    Register(msgkey, callback, uuid) {\r\n        try {\r\n            if (this.m_Callbacks[msgkey] == null) {\r\n                this.m_Callbacks[msgkey] = []\r\n            }\r\n            this.m_Callbacks[msgkey].push({\r\n                \"callback\": callback,\r\n                \"uuid\": uuid\r\n            })    //数组，同一个脚本，可能注册多次\r\n        } catch (error) {\r\n            cc.log(cc.js.getClassName(this) + \":\" + error.message);\r\n        }\r\n    }\r\n    /**注销监听\r\n     * 如果传入UUID 则注销单个监听 如果uuid为空 则注销 整个 msgkey的监听\r\n    */\r\n    Unregister(msgkey, uuid) {\r\n        try {\r\n            if (this.m_Callbacks[msgkey] == null) {\r\n                cc.log(\"Unregister \" + msgkey + \" failed! case it is null!\")\r\n                return\r\n            }\r\n            if (uuid) {\r\n                for (let index = 0; index < this.m_Callbacks[msgkey].length; index++) {\r\n                    const element = this.m_Callbacks[msgkey][index];\r\n                    if (element.uuid == uuid) {\r\n                        this.m_Callbacks[msgkey].splice(index, 1);\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                delete this.m_Callbacks[msgkey];\r\n            }\r\n        } catch (error) {\r\n            cc.log(cc.js.getClassName(this) + \":\" + error.message);\r\n        }\r\n    }\r\n    /**\r\n     * 发送消息，msgkey 消息key值\r\n     * args 需要传递的参数 自定义数据结构\r\n     */\r\n    Send(msgkey, args) {\r\n        if (this.m_Callbacks[msgkey] == null) {\r\n            cc.log(\"this.m_Callbacks[msgkey] == null:\" + msgkey + \"---------------------------------\")\r\n            return\r\n        }\r\n        for (let index = 0; index < this.m_Callbacks[msgkey].length; index++) {\r\n            const element = this.m_Callbacks[msgkey][index];\r\n            if (element.callback) {\r\n                element.callback(args);\r\n            }\r\n        }\r\n    }\r\n}"]}