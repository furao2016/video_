{"version":3,"sources":["..\\..\\..\\..\\..\\..\\assets\\Scripts\\Core\\ResHandle/assets\\Scripts\\Core\\ResHandle\\lottery_BaseResLoad.js"],"names":["BaseResLoad","WaitList","DoneList","KeyList","keyDic","ProgressList","TypeList","CurDownloadKey","IsLoading","length","self","downFunc","err","obj","deleteFunc","shift","cc","error","CheckUpdate","loader","loadRes","DownloadRes","key","url","callback","mtype","progress","getRes","push","loadResDir","SingletonBase"],"mappings":"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","file":"lottery_BaseResLoad.js","sourceRoot":"..\\..\\..\\..\\..\\..\\assets\\Scripts\\Core\\ResHandle","sourcesContent":["import SingletonBase from \"../../Singleton/SingletonBase\";\r\n\r\n/**\r\n * 基础资源加载类\r\n * \r\n * 缺乏制定文件夹扫描加载\r\n */\r\n\r\nexport default class BaseResLoad extends SingletonBase {\r\n\r\n    WaitList = []\r\n    DoneList = []\r\n    KeyList = []\r\n    keyDic = {}\r\n    ProgressList = []\r\n    TypeList = []\r\n    CurDownloadKey = null\r\n    IsLoading = false\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    static _onNewObject() {\r\n        return new BaseResLoad()\r\n    }\r\n    _onDestroyObject() {\r\n        this.IsLoading = false;\r\n        this.KeyList = [];\r\n        this.keyDic = {};\r\n        this.WaitList = [];\r\n        this.DoneList = [];\r\n        this.ProgressList = [];\r\n        this.TypeList = [];\r\n    }\r\n    DownloadRes() {\r\n        if (this.KeyList.length <= 0) {//下载完成\r\n            this.IsLoading = false;\r\n        }\r\n        else {//数组中要下载的列表还有\r\n            //当前下载的资源完成\r\n            if (this.CurDownloadKey == null || this.CurDownloadKey == \"undefined\") {\r\n                this.CurDownloadKey = this.KeyList[0];//获取第一个key\r\n                var self = this;\r\n                this.IsLoading = true;\r\n                var downFunc = function (err, obj) {\r\n                    var deleteFunc = function () {\r\n                        //删除KeyList中的第一个数据\r\n                        self.KeyList.shift();\r\n                        //删除等待列表中的key\r\n                        delete (self.WaitList[self.CurDownloadKey]);\r\n                        delete (self.DoneList[self.CurDownloadKey]);\r\n                        delete (self.TypeList[self.CurDownloadKey]);\r\n                        delete (self.ProgressList[self.CurDownloadKey]);\r\n                        delete (self.keyDic[self.CurDownloadKey])\r\n                    }\r\n                    if (!err) {\r\n                        //下载完成，\r\n                        //将下载好的图片回调给传入的函数\r\n                        if (self.DoneList[self.CurDownloadKey] != null && self.DoneList[self.CurDownloadKey] != \"undefined\") {\r\n                            self.DoneList[self.CurDownloadKey](err, obj, self.CurDownloadKey);\r\n                        }\r\n                    }\r\n                    else {\r\n                        cc.error(\"当前下载失败，开始下一个\" + err);\r\n                    };\r\n                    deleteFunc();\r\n                    self.CurDownloadKey = null;\r\n                    self.CheckUpdate();\r\n                };\r\n                if (this.TypeList[this.CurDownloadKey] && !this.ProgressList[this.CurDownloadKey])\r\n                    cc.loader.loadRes(this.WaitList[this.CurDownloadKey], this.TypeList[this.CurDownloadKey], downFunc);\r\n                else if (!this.TypeList[this.CurDownloadKey] && this.ProgressList[this.CurDownloadKey])\r\n                    cc.loader.loadRes(this.WaitList[this.CurDownloadKey], this.ProgressList[this.CurDownloadKey], downFunc)\r\n                else if (!this.TypeList[this.CurDownloadKey] && !this.ProgressList[this.CurDownloadKey])\r\n                    cc.loader.loadRes(this.WaitList[this.CurDownloadKey], downFunc);\r\n                else\r\n                    cc.loader.loadRes(this.WaitList[this.CurDownloadKey], this.TypeList[this.CurDownloadKey], this.ProgressList[this.CurDownloadKey], downFunc);\r\n            }\r\n            else {\r\n                //当前下载的未完成，继续等待完成\r\n                cc.error(\"当前下载的未完成，继续等待完成\");\r\n            }\r\n        }\r\n    }\r\n    CheckUpdate() {\r\n        if (this.KeyList.length > 0) {\r\n            //获取最后一个， 然后开始下载\r\n            this.DownloadRes();\r\n        }\r\n        else {\r\n            this.IsLoading = false;\r\n        }\r\n    }\r\n\r\n    /*------------------------------对外接口---------------------------------*/\r\n    /**\r\n     * 根据key和路径有序加载\r\n     * 加载Atlas资源的时候需要传入mtype = cc.SpriteAtlas\r\n     */\r\n    LoadByKey(key, url, callback, mtype = null, progress = null) {\r\n        if (this.keyDic[key])\r\n            return;\r\n\r\n        var obj;\r\n        if (mtype)\r\n            obj = cc.loader.getRes(url, mtype);\r\n        else\r\n            obj = cc.loader.getRes(url);\r\n        if (obj) {\r\n            callback(null, obj, key)\r\n            return;\r\n        }\r\n\r\n        this.keyDic[key] = true\r\n        this.KeyList.push(key);\r\n        this.WaitList[key] = url;\r\n        this.DoneList[key] = callback;\r\n        if (mtype)\r\n            this.TypeList[key] = mtype;\r\n        if (progress)\r\n            this.ProgressList[key] = progress;\r\n        if (this.IsLoading == false) {//开始下载\r\n            this.DownloadRes();\r\n        }\r\n        return null;\r\n    }\r\n\r\n    LoadResDir(url, progress, callback) {\r\n        cc.loader.loadResDir(url, progress, callback)\r\n    }\r\n}"]}