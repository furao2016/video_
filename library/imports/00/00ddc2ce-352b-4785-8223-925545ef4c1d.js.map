{"version":3,"sources":["..\\..\\..\\..\\..\\..\\assets\\Scripts\\Core\\Net/assets\\Scripts\\Core\\Net\\lottery_BaseSocket.js"],"names":["SocketEnum","require","simplewebsocket","_wb_client","_host","_port","_attachParam","_cacheMsg","_is_opened","_onMessageCallback","_onConnectCallback","host","port","param","connect","error","cc","log","js","getClassName","message","url","WebSocket","onopen","onOpen","bind","onmessage","onMessage","onerror","onError","onclose","onClose","e","index","length","data","send","success","readyState","push","close","callback"],"mappings":"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","file":"lottery_BaseSocket.js","sourceRoot":"..\\..\\..\\..\\..\\..\\assets\\Scripts\\Core\\Net","sourcesContent":["var SocketEnum = require(\"lottery_SocketEnum\");\r\nexport default class simplewebsocket {\r\n    _wb_client = null\r\n    _host = \"\"\r\n    _port = \"\"\r\n    _attachParam = \"\"//附带参数\r\n    _cacheMsg = []\r\n    _is_opened = false\r\n    _onMessageCallback = null//消息接受派发回调函数。socketmanager会注册 然后在manager里面去做派发\r\n    _onConnectCallback = null//建立链接的回调函数。socketmanager会注册，然后在manager里面处理逻辑\r\n\r\n    init(host, port, param) {\r\n        try {\r\n            this._is_opened = false;\r\n            this._host = host || this._host;\r\n            this._port = port || this._port;\r\n            this._attachParam = param || this._attachParam || \"\";\r\n            this.connect();\r\n        } catch (error) {\r\n            cc.log(cc.js.getClassName(this) + \":\" + error.message);\r\n        }\r\n    }\r\n\r\n    connect() {\r\n        try {\r\n            this._is_opened = false\r\n            var url = \"ws://\" + this._host + \":\" + this._port + \"/socket/video/\" + this._attachParam;\r\n            this._wb_client = new WebSocket(url);\r\n            this._wb_client.onopen = this.onOpen.bind(this)\r\n            this._wb_client.onmessage = this.onMessage.bind(this)\r\n            this._wb_client.onerror = this.onError.bind(this)\r\n            this._wb_client.onclose = this.onClose.bind(this)\r\n        } catch (error) {\r\n            cc.log(cc.js.getClassName(this) + \":\" + error.message);\r\n        }\r\n\r\n    }\r\n    onOpen(e) {\r\n        try {\r\n            this._is_opened = true\r\n            for (let index = 0; index < this._cacheMsg.length; index++) {\r\n                const data = this._cacheMsg[index];\r\n                this.send(data);\r\n            }\r\n            this._cacheMsg = []\r\n\r\n            if (this._onConnectCallback) {\r\n                this._onConnectCallback(SocketEnum.success)\r\n            }\r\n        } catch (error) {\r\n            cc.log(cc.js.getClassName(this) + \":\" + error.message);\r\n        }\r\n    }\r\n    send(data) {\r\n        try {\r\n            if (this._is_opened && this._wb_client.readyState === 1) {\r\n                this._wb_client.send(data);\r\n            }\r\n            else {\r\n                this._cacheMsg.push(data);\r\n            }\r\n        } catch (error) {\r\n            cc.log(cc.js.getClassName(this) + \":\" + error.message);\r\n        }\r\n    }\r\n    onError(e) {\r\n        try {\r\n            this._is_opened = false\r\n            if (this._onConnectCallback) {\r\n                this._onConnectCallback(SocketEnum.error)\r\n            }\r\n        } catch (error) {\r\n            cc.log(cc.js.getClassName(this) + \":\" + error.message);\r\n        }\r\n    }\r\n    onMessage(message) {\r\n        if (this._onMessageCallback)\r\n            this._onMessageCallback(message);\r\n    }\r\n    onClose(e) {\r\n        if (this._onConnectCallback) {\r\n            this._onConnectCallback(SocketEnum.close)\r\n        }\r\n    }\r\n    /**\r\n     * 主动关闭;\r\n     */\r\n    close() {\r\n        try {\r\n            if (this._is_opened) {\r\n                this._is_opened = false;\r\n                //清空onclose主动回调的原因是因为要兼容浏览器bug\r\n                //在主动断开链接之后浏览器可能很晚很晚才能回调onclose\r\n                //结果导致再次链接的时候反而处理不正确了\r\n                this._wb_client.onclose = null\r\n                this._wb_client.onmessage = null\r\n                this._wb_client.onopen = null\r\n                this._wb_client.onerror = null\r\n                this._wb_client.close(1000);\r\n                this._wb_client = null;\r\n            }\r\n        } catch (error) {\r\n            cc.log(cc.js.getClassName(this) + \":\" + error.message);\r\n        }\r\n    }\r\n    /**\r\n     * 注册消息派发函数\r\n     * @param {*} callback \r\n     */\r\n    RegestMessageEvent(callback) {\r\n        this._onMessageCallback = callback;\r\n    }\r\n    /**\r\n     * 连接状态改变回掉函数\r\n     * @param {*} callback \r\n     */\r\n    RegisterConnectEvent(callback) {\r\n        this._onConnectCallback = callback\r\n    }\r\n}"]}