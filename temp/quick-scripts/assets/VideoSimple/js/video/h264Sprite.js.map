{"version":3,"sources":["h264Sprite.js"],"names":["module","exports","H264SpriteFn","baccarat","H264Sprite","cc","Class","extends","Component","name","properties","_currentUrl","_socketController","_hideListener","_showListener","_lbTipInfo","_count","_useWebWorker","ctor","ebet","_currenturl","game","on","EVENT_HIDE","gameHideClose","close","gameShowReOpen","reOpen","update","dt","onRenderingBefore","VideoShader","Myrendering","videoSize","onDestroy","off","unscheduleAllCallbacks","onLoad","require","node","scheduleOnce","removeCom","renderer","useWorker","self","_renderType","RENDER_TYPE_CANVAS","VideoSocketController","shaderStatus","texureImag","Texture2D","selfSprite","getComponent","Sprite","onPictureDecoded","data","pixelFormat","pixelsWidth","pixelsHeight","contentSize","ShaderEffect","_currentBuffer","initWithData","spriteFrame","SpriteFrame","width","winSize","height"],"mappings":";;;;;;AAAA;;;;;;AAMAA,OAAOC,OAAP,GAAiBC,YAAjB;;AAEA,SAASA,YAAT,CAAsBC,QAAtB,EAAgC;AAC5BA,aAASC,UAAT,GAAsBC,GAAGC,KAAH,CAAS;AAC3BC,iBAASF,GAAGG,SADe;AAE3BC,cAAM,gBAFqB;AAG3BC,oBAAY;AACRC,yBAAa,IADL;AAERC,+BAAmB,IAFX;;AAIRC,2BAAe,IAJP;AAKRC,2BAAe,IALP;;AAORC,wBAAY,IAPJ;AAQRC,oBAAQ,CARA;AASRC,2BAAe;AATP,SAHe;AAc3BC,cAAM,gBAAY;AACd,iBAAKP,WAAL,GAAmBQ,KAAKhB,QAAL,CAAciB,WAAjC;AACAf,eAAGgB,IAAH,CAAQC,EAAR,CAAWjB,GAAGgB,IAAH,CAAQE,UAAnB,EAA+B,KAAKC,aAApC,EAAmD,IAAnD;AACH,SAjB0B;AAkB3BA,qBAlB2B,2BAkBX;AACZ,gBAAI,KAAKZ,iBAAT,EAA4B;AACxB,qBAAKA,iBAAL,CAAuBa,KAAvB;AACH;AACJ,SAtB0B;AAuB3BC,sBAvB2B,4BAuBV;AACb,gBAAI,KAAKd,iBAAT,EAA4B;AACxB,qBAAKA,iBAAL,CAAuBe,MAAvB;AACH;AACJ,SA3B0B;;AA4B3B;AACA;AACA;AACA;AACA;AACAC,gBAAQ,gBAAUC,EAAV,EAAc;AAClB;AACA;AACA;AACA;AACA;AACA,gBAAI,KAAKjB,iBAAL,CAAuBkB,iBAA3B,EAA8C;AAC1C,qBAAKlB,iBAAL,CAAuBkB,iBAAvB,CAAyCD,EAAzC;AACA,qBAAKE,WAAL,CAAiBC,WAAjB,CAA6Bb,KAAKc,SAAlC;AACH;AACD;AACH,SA5C0B;AA6C3BC,mBAAW,qBAAY;AACnB7B,eAAGgB,IAAH,CAAQc,GAAR,CAAY9B,GAAGgB,IAAH,CAAQE,UAApB,EAAgC,KAAKC,aAArC;AACA,iBAAKZ,iBAAL,CAAuBa,KAAvB;AACA,iBAAKb,iBAAL,GAAyB,IAAzB;AACA,iBAAKwB,sBAAL;AACH,SAlD0B;AAmD3BC,gBAAQ,kBAAY;AAAA;;AAChB,iBAAKN,WAAL,GAAmBO,QAAQ,aAAR,CAAnB;AACA,iBAAKP,WAAL,CAAiBQ,IAAjB,GAAwB,KAAKA,IAA7B;AACA,iBAAKC,YAAL,CAAkB,YAAM;AACpB,sBAAKD,IAAL,CAAUE,SAAV,GAAsB,KAAtB;AACH,aAFD,EAEG,IAFH;AAGA,gBAAIC,iBAAJ;AAAA,gBAAcC,YAAY,KAA1B;AAAA,gBACIC,OAAO,IADX,CANgB,CAOC;AACjB,gBAAIvC,GAAGwC,WAAH,KAAmBxC,GAAGgB,IAAH,CAAQyB,kBAA/B,EAAmD;AAC/C,qBAAKlC,iBAAL,GAAyB,IAAIT,SAAS4C,qBAAb,CAAmC,KAAKpC,WAAxC,EAAqDgC,SAArD,EAAgE,IAAhE,CAAzB;AACH;AACD,gBAAIK,eAAe,KAAnB;AACA,gBAAIC,aAAa,IAAI5C,GAAG6C,SAAP,EAAjB;AACA,gBAAIC,aAAaP,KAAKL,IAAL,CAAUa,YAAV,CAAuB/C,GAAGgD,MAA1B,CAAjB;AACA,iBAAKzC,iBAAL,CAAuB0C,gBAAvB,GAA0C,UAAUC,IAAV,EAAgBC,WAAhB,EAA6BC,WAA7B,EAA0CC,YAA1C,EAAwDC,WAAxD,EAAqE;AAC3G,oBAAIf,KAAKL,IAAL,CAAUE,SAAd,EAAyB;AACzB,oBAAI,CAACO,YAAL,EAAmB;AACfA,mCAAe,IAAf;AACAJ,yBAAKb,WAAL,CAAiB6B,YAAjB;AACH;;AAEDhB,qBAAKb,WAAL,CAAiB8B,cAAjB,GAAkCN,IAAlC;AACAN,2BAAWa,YAAX,CAAwBP,IAAxB,EAA8BC,WAA9B,EAA2CC,WAA3C,EAAwDC,YAAxD,EAAsEC,WAAtE;AACAR,2BAAWY,WAAX,GAAyB,IAAI1D,GAAG2D,WAAP,CAAmBf,UAAnB,CAAzB;AACAE,2BAAWZ,IAAX,CAAgB0B,KAAhB,GAAwB5D,GAAG6D,OAAH,CAAWD,KAAnC;AACAd,2BAAWZ,IAAX,CAAgB4B,MAAhB,GAAyB9D,GAAG6D,OAAH,CAAWC,MAApC;AACH,aAZD;AAaH;AA9E0B,KAAT,CAAtB;AAgFH","file":"h264Sprite.js","sourceRoot":"..\\..\\..\\..\\..\\..\\assets\\VideoSimple\\js\\video","sourcesContent":["/**************************************************************************\r\n * Copyright (C) 2015 ebet.com, Inc - All Rights Reserved\r\n * Unauthorized copying of this file, via any medium is strictly prohibited\r\n * Proprietary and confidential\r\n * Written by ebet.com\r\n **************************************************************************/\r\nmodule.exports = H264SpriteFn;\r\n\r\nfunction H264SpriteFn(baccarat) {\r\n    baccarat.H264Sprite = cc.Class({\r\n        extends: cc.Component,\r\n        name: 'videoSpriteCom',\r\n        properties: {\r\n            _currentUrl: null,\r\n            _socketController: null,\r\n\r\n            _hideListener: null,\r\n            _showListener: null,\r\n\r\n            _lbTipInfo: null,\r\n            _count: 0,\r\n            _useWebWorker: true,\r\n        },\r\n        ctor: function () {\r\n            this._currentUrl = ebet.baccarat._currenturl;\r\n            cc.game.on(cc.game.EVENT_HIDE, this.gameHideClose, this);\r\n        },\r\n        gameHideClose() {\r\n            if (this._socketController) {\r\n                this._socketController.close();\r\n            }\r\n        },\r\n        gameShowReOpen() {\r\n            if (this._socketController) {\r\n                this._socketController.reOpen();\r\n            }\r\n        },\r\n        // schefunction:function()\r\n        // {\r\n        //     cc.log(\"schefunction\");\r\n        // },\r\n        //----------------------------------------------------------------------------------------------------------\r\n        update: function (dt) {\r\n            // cc.log(\"update\");\r\n            // this._count+= dt;\r\n            // if(this._count > 0.02)\r\n            // {\r\n            //     this._count = 0;\r\n            if (this._socketController.onRenderingBefore) {\r\n                this._socketController.onRenderingBefore(dt);\r\n                this.VideoShader.Myrendering(ebet.videoSize);\r\n            }\r\n            // }\r\n        },\r\n        onDestroy: function () {\r\n            cc.game.off(cc.game.EVENT_HIDE, this.gameHideClose);\r\n            this._socketController.close();\r\n            this._socketController = null;\r\n            this.unscheduleAllCallbacks();\r\n        },\r\n        onLoad: function () {\r\n            this.VideoShader = require('VideoShader');\r\n            this.VideoShader.node = this.node;\r\n            this.scheduleOnce(() => {\r\n                this.node.removeCom = false;\r\n            }, 0.05)\r\n            let renderer, useWorker = false,\r\n                self = this; //baccarat.USE_WORKER;\r\n            if (cc._renderType !== cc.game.RENDER_TYPE_CANVAS) {\r\n                this._socketController = new baccarat.VideoSocketController(this._currentUrl, useWorker, true);\r\n            }\r\n            let shaderStatus = false;\r\n            let texureImag = new cc.Texture2D();\r\n            let selfSprite = self.node.getComponent(cc.Sprite);\r\n            this._socketController.onPictureDecoded = function (data, pixelFormat, pixelsWidth, pixelsHeight, contentSize) {\r\n                if (self.node.removeCom) return;\r\n                if (!shaderStatus) {\r\n                    shaderStatus = true;\r\n                    self.VideoShader.ShaderEffect();\r\n                }\r\n\r\n                self.VideoShader._currentBuffer = data;\r\n                texureImag.initWithData(data, pixelFormat, pixelsWidth, pixelsHeight, contentSize);\r\n                selfSprite.spriteFrame = new cc.SpriteFrame(texureImag);\r\n                selfSprite.node.width = cc.winSize.width;\r\n                selfSprite.node.height = cc.winSize.height;\r\n            }\r\n        },\r\n    })\r\n};"]}