{"version":3,"sources":["screenfull.d.ts"],"names":[],"mappings":";;;;AAAA,0BAA0B;AA8J1B,iBAAS,UAAU,CAAC","file":"","sourceRoot":"..\\..\\..\\..\\..\\..\\assets\\Scripts\\Tools\\screenfull","sourcesContent":["/// <reference lib=\"dom\"/>\n\ndeclare namespace screenfull {\n\ttype RawEventNames = {\n\t\treadonly requestFullscreen: string;\n\t\treadonly exitFullscreen: string;\n\t\treadonly fullscreenElement: string;\n\t\treadonly fullscreenEnabled: string;\n\t\treadonly fullscreenchange: string;\n\t\treadonly fullscreenerror: string;\n\t};\n\n\ttype EventName = 'change' | 'error';\n\n\tinterface Screenfull {\n\t\t/**\n\t\tWhether fullscreen is active.\n\t\t*/\n\t\treadonly isFullscreen: boolean;\n\n\t\t/**\n\t\tThe element currently in fullscreen, otherwise `null`.\n\t\t*/\n\t\treadonly element: Element | null;\n\n\t\t/**\n\t\tWhether you are allowed to enter fullscreen. If your page is inside an `<iframe>` you will need to add a `allowfullscreen` attribute (+ `webkitallowfullscreen` and `mozallowfullscreen`).\n\n\t\t@example\n\t\t```\n\t\tif (screenfull.isEnabled) {\n\t\t\tscreenfull.request();\n\t\t}\n\t\t```\n\t\t*/\n\t\treadonly isEnabled: boolean;\n\n\t\t/**\n\t\tExposes the raw properties (prefixed if needed) used internally.\n\t\t*/\n\t\traw: RawEventNames;\n\n\t\t/**\n\t\tMake an element fullscreen.\n\n\t\tIf your page is inside an `<iframe>` you will need to add a `allowfullscreen` attribute (+ `webkitallowfullscreen` and `mozallowfullscreen`).\n\n\t\tKeep in mind that the browser will only enter fullscreen when initiated by user events like click, touch, key.\n\n\t\t@param element - Default is `<html>`. If called with another element than the currently active, it will switch to that if it's a decendant.\n\t\t@returns A promise that resolves after the element enters fullscreen.\n\n\t\t@example\n\t\t```\n\t\t// Fullscreen the page\n\t\tdocument.getElementById('button').addEventListener('click', () => {\n\t\t\tif (screenfull.isEnabled) {\n\t\t\t\tscreenfull.request();\n\t\t\t} else {\n\t\t\t\t// Ignore or do something else\n\t\t\t}\n\t\t});\n\n\t\t// Fullscreen an element\n\t\tconst element = document.getElementById('target');\n\n\t\tdocument.getElementById('button').addEventListener('click', () => {\n\t\t\tif (screenfull.isEnabled) {\n\t\t\t\tscreenfull.request(element);\n\t\t\t}\n\t\t});\n\n\t\t// Fullscreen an element with jQuery\n\t\tconst element = $('#target')[0]; // Get DOM element from jQuery collection\n\n\t\t$('#button').on('click', () => {\n\t\t\tif (screenfull.isEnabled) {\n\t\t\t\tscreenfull.request(element);\n\t\t\t}\n\t\t});\n\t\t```\n\t\t*/\n\t\trequest(element?: Element): Promise<void>;\n\n\t\t/**\n\t\tBrings you out of fullscreen.\n\n\t\t@returns A promise that resolves after the element exits fullscreen.\n\t\t*/\n\t\texit(): Promise<void>;\n\n\t\t/**\n\t\tRequests fullscreen if not active, otherwise exits.\n\n\t\t@returns A promise that resolves after the element enters/exits fullscreen.\n\n\t\t@example\n\t\t```\n\t\t// Toggle fullscreen on a image with jQuery\n\n\t\t$('img').on('click', event => {\n\t\t\tif (screenfull.isEnabled) {\n\t\t\t\tscreenfull.toggle(event.target);\n\t\t\t}\n\t\t});\n\t\t```\n\t\t*/\n\t\ttoggle(element?: Element): Promise<void>;\n\n\t\t/**\n\t\tAdd a listener for when the browser switches in and out of fullscreen or when there is an error.\n\n\t\t@example\n\t\t```\n\t\t// Detect fullscreen change\n\t\tif (screenfull.isEnabled) {\n\t\t\tscreenfull.on('change', () => {\n\t\t\t\tconsole.log('Am I fullscreen?', screenfull.isFullscreen ? 'Yes' : 'No');\n\t\t\t});\n\t\t}\n\n\t\t// Detect fullscreen error\n\t\tif (screenfull.isEnabled) {\n\t\t\tscreenfull.on('error', event => {\n\t\t\t\tconsole.error('Failed to enable fullscreen', event);\n\t\t\t});\n\t\t}\n\t\t```\n\t\t*/\n\t\ton(name: EventName, handler: (event: Event) => void): void;\n\n\t\t/**\n\t\tRemove a previously registered event listener.\n\n\t\t@example\n\t\t```\n\t\tscreenfull.off('change', callback);\n\t\t```\n\t\t*/\n\t\toff(name: EventName, handler: (event: Event) => void): void;\n\n\t\t/**\n\t\tAlias for `.on('change', function)`.\n\t\t*/\n\t\tonchange(handler: (event: Event) => void): void;\n\n\t\t/**\n\t\tAlias for `.on('error', function)`.\n\t\t*/\n\t\tonerror(handler: (event: Event) => void): void;\n\t}\n}\n\n/**\nSimple wrapper for cross-browser usage of the JavaScript [Fullscreen API](https://developer.mozilla.org/en/DOM/Using_full-screen_mode), which lets you bring the page or any element into fullscreen. Smoothens out the browser implementation differences, so you don't have to.\n*/\ndeclare const screenfull: screenfull.Screenfull | {isEnabled: false};\n\nexport = screenfull;\nexport as namespace screenfull;\n"]}