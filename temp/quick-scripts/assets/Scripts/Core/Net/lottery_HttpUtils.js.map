{"version":3,"sources":["lottery_HttpUtils.js"],"names":["EXHRDataType","cc","Enum","Undefined","Text","Binary","Max_Try_Time","HttpUtils","_reqListTimes","url","dataType","callback","xhr","XMLHttpRequest","self","onload","getRequestEnd","onerror","e","getError","responseType","open","send","error","log","js","getClassName","message","isOK","readyState","status","response","responseText","getRequestFailed","datatype","httpGets","data","arr","param","push","encodeURIComponent","join","params","fail","timers","onreadystatechange","clearTimeout","JSON","parse","setRequestHeader","timeout","serializePost","setTimeout","abort","succ","type","options","toUpperCase","async","window","ActiveXObject","responseXML","SingletonBase"],"mappings":"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","file":"lottery_HttpUtils.js","sourceRoot":"..\\..\\..\\..\\..\\..\\assets\\Scripts\\Core\\Net","sourcesContent":["import SingletonBase from \"../../Singleton/SingletonBase\";\r\n\r\n//数据类型\r\nlet EXHRDataType = cc.Enum({\r\n    Undefined: 0,\r\n    Text: 1,\r\n    Binary: 2,\r\n});\r\nvar Max_Try_Time = 4;\r\nexport default class HttpUtils extends SingletonBase {\r\n\r\n    _reqListTimes = {}\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    static _onNewObject() {\r\n        return new HttpUtils()\r\n    }\r\n    /**\r\n     * HTTP get;\r\n     */\r\n    httpGets(url, dataType, callback) {\r\n        try {\r\n            var xhr = new XMLHttpRequest()\r\n            var self = this\r\n            xhr.onload = function () {\r\n                self.getRequestEnd(xhr, url, dataType, callback)\r\n            }\r\n            xhr.onerror = function (e) {\r\n                self.getError(callback, url)\r\n            }\r\n            xhr.responseType = \"arraybuffer\"\r\n            xhr.open(\"GET\", url, true)\r\n            xhr.send()\r\n        } catch (error) {\r\n            cc.log(cc.js.getClassName(this) + \":\" + error.message);\r\n        }\r\n    }\r\n    getError(callback, url) {\r\n        try {\r\n            if (callback) {\r\n                callback(false, url)\r\n            }\r\n        } catch (error) {\r\n            cc.log(cc.js.getClassName(this) + \":\" + error.message);\r\n        }\r\n    }\r\n    /**\r\n     * get response;\r\n     */\r\n    getRequestEnd(xhr, url, dataType, callback) {\r\n        try {\r\n            var isOK = false\r\n            if (xhr.readyState == 4 && (xhr.status >= 200 && xhr.status < 400)) {\r\n                var response = null;\r\n                if (dataType == EXHRDataType.Binary) {\r\n                    response = xhr.response;\r\n                }\r\n                else {\r\n                    response = xhr.responseText;\r\n                }\r\n                isOK = true\r\n                callback(isOK, response)\r\n            }\r\n            else {\r\n                this.getRequestFailed(url, datatype, callback)\r\n            }\r\n        } catch (error) {\r\n            cc.log(cc.js.getClassName(this) + \":\" + error.message);\r\n        }\r\n    }\r\n    /**\r\n     * dispose get failed\r\n     */\r\n    getRequestFailed(url, datatype, callback) {\r\n        try {\r\n            if (!this._reqListTimes[url]) {\r\n                this._reqListTimes[url] = 0;\r\n            }\r\n            if (this._reqListTimes[url] >= Max_Try_Time) {//达到最大尝试次数;\r\n                if (callback) {\r\n                    callback(false);\r\n                }\r\n            }\r\n            else {\r\n                this._reqListTimes[url]++;  //尝试次数自加;\r\n                this.httpGets(url, datatype, callback);\r\n            }\r\n        } catch (error) {\r\n            cc.log(cc.js.getClassName(this) + \":\" + error.message);\r\n        }\r\n    }\r\n    serializePost(data) {\r\n        try {\r\n            if (typeof data == 'string') {\r\n                return data;\r\n            }\r\n            var arr = [];\r\n            for (var param in data) {\r\n                arr.push(encodeURIComponent(param) + '=' + encodeURIComponent(data[param]));\r\n            }\r\n            return arr.join('&');\r\n        } catch (error) {\r\n            cc.log(cc.js.getClassName(this) + \":\" + error.message);\r\n        }\r\n    }\r\n    /**\r\n     * http post请求\r\n     */\r\n    httpPost(url, params, callback, fail) {\r\n        try {\r\n            var timers = null;\r\n            var xhr = new XMLHttpRequest()\r\n            var self = this\r\n            xhr.onreadystatechange = function () {\r\n                if (xhr.readyState == 4) {\r\n                    clearTimeout(timers);\r\n                    if (xhr.status >= 200 && xhr.status < 400) {\r\n                        if (callback) {\r\n                            if (xhr.responseText && typeof xhr.responseText == 'string') {\r\n                                callback(JSON.parse(xhr.responseText));\r\n                            } else {\r\n                                callback(xhr.responseText)\r\n                            }\r\n                        }\r\n                    } else {\r\n                        self.getError(fail, url)\r\n                    }\r\n                }\r\n            }\r\n            xhr.onerror = function (e) {\r\n                self.getError(fail, url)\r\n            }\r\n            xhr.open(\"POST\", url, true);\r\n            xhr.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\r\n            xhr.timeout = 10000;// 5 seconds for timeout\r\n            xhr.send(this.serializePost(params));\r\n            timers = setTimeout(() => {\r\n                xhr.abort();\r\n            }, xhr.timeout);\r\n        } catch (error) {\r\n            cc.log(cc.js.getClassName(this) + \":\" + error.message);\r\n        }\r\n    }\r\n    ajaxGet(url, succ, fail, type, data) {\r\n        /**\r\n         * 传入方式默认为对象\r\n         * */\r\n        var options = {};\r\n        /**\r\n         * 默认为GET请求\r\n         * */\r\n        options.type = (type || \"GET\").toUpperCase();\r\n        /**\r\n         * 返回值类型默认为json\r\n         * */\r\n        options.dataType = options.dataType || 'json';\r\n        /**\r\n         * 默认为异步请求\r\n         * */\r\n        options.async = options.async || true;\r\n        /* 超时处理 */\r\n        options.timeout = options.timeout || 1500;\r\n        /**\r\n         * 对需要传入的参数的处理\r\n         * */\r\n        var params = data || '';\r\n        var xhr, timers;\r\n        /**\r\n         * 创建一个 ajax请求\r\n         * W3C标准和IE标准\r\n         */\r\n        if (window.XMLHttpRequest) {\r\n            /**\r\n             * W3C标准\r\n             * */\r\n            xhr = new XMLHttpRequest();\r\n        } else {\r\n            /**\r\n             * IE标准\r\n             * @type {ActiveXObject}\r\n             */\r\n            xhr = new ActiveXObject('Microsoft.XMLHTTP')\r\n        }\r\n\r\n        xhr.onreadystatechange = function () {\r\n            if (xhr.readyState == 4) {\r\n                var status = xhr.status;\r\n                clearTimeout(timers);\r\n                if (status >= 200 && status < 300) {\r\n                    succ && succ(JSON.parse(xhr.responseText), xhr.responseXML);\r\n                } else {\r\n                    fail && fail(status);\r\n                }\r\n            }\r\n        };\r\n        if (options.type == 'GET') {\r\n            xhr.open(\"GET\", url + '?' + params, options.async);\r\n            xhr.send(null)\r\n        } else if (options.type == 'POST') {\r\n            /**\r\n             *打开请求\r\n            * */\r\n            xhr.open('POST', options.url, options.async);\r\n            /**\r\n             * POST请求设置请求头\r\n             * */\r\n            xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');\r\n            /**\r\n             * 发送请求参数\r\n             */\r\n            xhr.send(params);\r\n        }\r\n        timers = setTimeout(() => {\r\n            xhr.abort();\r\n        }, options.timeout);\r\n    }\r\n}"]}